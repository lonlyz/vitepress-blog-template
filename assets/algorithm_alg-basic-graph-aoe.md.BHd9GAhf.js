import{_ as a,c as l,ai as t,o as r}from"./chunks/framework.BrYByd3F.js";const o="/vitepress-blog-template/images/alg/alg-graph-aoe-0.png",i="/vitepress-blog-template/images/alg/alg-graph-aoe-1.png",s="/vitepress-blog-template/images/alg/alg-graph-aoe-2.png",p="/vitepress-blog-template/images/alg/alg-graph-aoe-3.png",h="/vitepress-blog-template/images/alg/alg-graph-aoe-4.png",f=JSON.parse('{"title":"图 - AOE & 关键路径","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/alg-basic-graph-aoe.md","filePath":"algorithm/alg-basic-graph-aoe.md","lastUpdated":1737706346000}'),c={name:"algorithm/alg-basic-graph-aoe.md"};function n(d,e,g,m,b,u){return r(),l("div",null,e[0]||(e[0]=[t('<h1 id="图-aoe-关键路径" tabindex="-1">图 - AOE &amp; 关键路径 <a class="header-anchor" href="#图-aoe-关键路径" aria-label="Permalink to &quot;图 - AOE &amp; 关键路径&quot;">​</a></h1><blockquote><p>关键路径在项目管理计算工期等方面有广泛等应用，提升工期就是所见缩减所有关键路径上的工期，并且在实现时需要应用到之前拓扑排序的算法(前提: 有向无环图，有依赖关系)。@pdai</p></blockquote><h2 id="关键路径相关名词" tabindex="-1">关键路径相关名词 <a class="header-anchor" href="#关键路径相关名词" aria-label="Permalink to &quot;关键路径相关名词&quot;">​</a></h2><p>相关术语:</p><ul><li><code>AOV网络(Activity On Vertex Network)</code>: 有向图，用顶点表示活动，用弧表示活动的先后顺序</li><li><code>AOE网络(Activity On Edge)</code>: 有向图，用顶点表示事件，用弧表示活动，用权值表示活动消耗时间(带权的有向无环图)</li><li><code>活动</code>: 业务逻辑中的行为，用边表示</li><li><code>事件</code>: 活动的结果或者触发条件</li><li><code>关键路径</code>: 具有最大路径长度(权重)的路径，可能不止一条</li><li><code>活动的两个属性</code>: e(i)最早开始时间，l(i)最晚开始时间</li><li><code>事件的两个属性</code>: ve(j)最早开始时间，vl(j)最晚开始时间</li></ul><p>AOV和AOE的对比: 虽然都是用来对工程建模，但是还是有很大不同。主要体现在:</p><ul><li>AOV网是顶点表示活动的网，他只描述活动之间的制约更新，</li><li>AOE网是用边表示活动的网，边上的权值表示活动持续的时间</li></ul><h2 id="关键路径的实现" tabindex="-1">关键路径的实现 <a class="header-anchor" href="#关键路径的实现" aria-label="Permalink to &quot;关键路径的实现&quot;">​</a></h2><h3 id="_4个关键概念" tabindex="-1">4个关键概念 <a class="header-anchor" href="#_4个关键概念" aria-label="Permalink to &quot;4个关键概念&quot;">​</a></h3><h4 id="事件最早发生时间" tabindex="-1">事件最早发生时间 <a class="header-anchor" href="#事件最早发生时间" aria-label="Permalink to &quot;事件最早发生时间&quot;">​</a></h4><p>事件最早发生时间etv(earliest time of vertex)，即顶点Vk的最早发生时间。</p><h4 id="事件最晚发生时间" tabindex="-1">事件最晚发生时间 <a class="header-anchor" href="#事件最晚发生时间" aria-label="Permalink to &quot;事件最晚发生时间&quot;">​</a></h4><p>事件最晚发生时间ltv(lastest time of vertex)，即顶点Vk的最晚发生时间，也就是每个顶点对应的事件最晚需要开始的事件，超出此事件将会延误整个工期。</p><h4 id="活动的最早开工时间" tabindex="-1">活动的最早开工时间 <a class="header-anchor" href="#活动的最早开工时间" aria-label="Permalink to &quot;活动的最早开工时间&quot;">​</a></h4><p>活动的最早开工时间ete(earliest time of edge)，即弧ak的最早发生时间。</p><h4 id="活动的最晚开工时间" tabindex="-1">活动的最晚开工时间 <a class="header-anchor" href="#活动的最晚开工时间" aria-label="Permalink to &quot;活动的最晚开工时间&quot;">​</a></h4><p>活动的最晚开工时间lte(lastest time if edge)，即弧的最晚发生时间，也就是不推迟工期的最晚开工时间。</p><h3 id="_4个时间的关系" tabindex="-1">4个时间的关系 <a class="header-anchor" href="#_4个时间的关系" aria-label="Permalink to &quot;4个时间的关系&quot;">​</a></h3><p>我们可以由事件的最早发生时间和事件的最晚发生时间求出活动的最早和最晚开工时间。 由1,2可以求得3,4，然后在根据ete[k]是否与lte[k]相等来判断ak是否是关键活动。</p><h3 id="算法实现" tabindex="-1">算法实现 <a class="header-anchor" href="#算法实现" aria-label="Permalink to &quot;算法实现&quot;">​</a></h3><ul><li>推演图</li></ul><p><img src="'+o+'" alt="error.图片加载失败"></p><ul><li>etv从左向右推导</li></ul><p><img src="'+i+'" alt="error.图片加载失败"></p><ul><li>ltv从右向左推导</li></ul><p><img src="'+s+'" alt="error.图片加载失败"></p><ul><li>ete: 活动最早开工时间需要和etv事件最早发生时间结合</li></ul><p><img src="'+p+'" alt="error.图片加载失败"></p><ul><li>lte: 活动最晚开工时间需要和ltv事件最晚发生时间结合(都是倒序获得)</li></ul><p><img src="'+h+'" alt="error.图片加载失败"></p><blockquote><p>推演的步骤具体可以参考 <a href="https://www.cnblogs.com/ssyfj/p/9496969.html" target="_blank" rel="noreferrer">这里在新窗口打开</a></p></blockquote><h2 id="参考文章" tabindex="-1">参考文章 <a class="header-anchor" href="#参考文章" aria-label="Permalink to &quot;参考文章&quot;">​</a></h2><ul><li><p><a href="https://blog.csdn.net/qq%5C_25508039/article/details/75390192" target="_blank" rel="noreferrer">https://blog.csdn.net/qq\\_25508039/article/details/75390192</a></p></li><li><p><a href="https://www.cnblogs.com/ssyfj/p/9496969.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/ssyfj/p/9496969.html</a></p></li><li><p><a href="https://www.cnblogs.com/Braveliu/p/3461649.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/Braveliu/p/3461649.html</a></p></li><li><p><a href="https://www.cnblogs.com/lisen10/p/10876110.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/lisen10/p/10876110.html</a></p></li></ul><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>',34)]))}const k=a(c,[["render",n]]);export{f as __pageData,k as default};
