import{_ as a,c as r,ai as l,o as t}from"./chunks/framework.BrYByd3F.js";const g=JSON.parse('{"title":"♥算法思想知识体系详解♥","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/alg-core-overview.md","filePath":"algorithm/alg-core-overview.md","lastUpdated":1737706346000}'),i={name:"algorithm/alg-core-overview.md"};function o(h,e,c,n,d,m){return t(),r("div",null,e[0]||(e[0]=[l('<h1 id="♥算法思想知识体系详解♥" tabindex="-1">♥算法思想知识体系详解♥ <a class="header-anchor" href="#♥算法思想知识体系详解♥" aria-label="Permalink to &quot;♥算法思想知识体系详解♥&quot;">​</a></h1><blockquote><p>我们通过理解算法背后常用的算法思想，进行归纳总结，并通过leetcode练习来辅助理解和提升. @pdai</p></blockquote><h2 id="算法思想详解" tabindex="-1">算法思想详解 <a class="header-anchor" href="#算法思想详解" aria-label="Permalink to &quot;算法思想详解&quot;">​</a></h2><p><em>相关文章</em></p><ul><li><a href="https://pdai.tech/md/algorithm/alg-core-divide-and-conquer.html" target="_blank" rel="noreferrer">算法思想 - 分治算法</a><ul><li>分治算法的基本思想是将一个规模为N的问题分解为K个规模较小的子问题，这些子问题相互独立且与原问题性质相同。求出子问题的解，就可得到原问题的解</li></ul></li><li><a href="https://pdai.tech/md/algorithm/alg-core-dynamic.html" target="_blank" rel="noreferrer">算法思想 - 动态规划算法</a><ul><li>动态规划算法通常用于求解具有某种最优性质的问题。在这类问题中，可能会有许多可行解。每一个解都对应于一个值，我们希望找到具有最优值的解。动态规划算法与分治法类似，其基本思想也是将待求解问题分解成若干个子问题，先求解子问题，然后从这些子问题的解得到原问题的解</li></ul></li><li><a href="https://pdai.tech/md/algorithm/alg-core-greedy.html" target="_blank" rel="noreferrer">算法思想 - 贪心算法</a><ul><li>本文主要介绍算法中贪心算法的思想: 保证每次操作都是局部最优的，并且最后得到的结果是全局最优的</li></ul></li><li><a href="https://pdai.tech/md/algorithm/alg-core-devide-two.html" target="_blank" rel="noreferrer">算法思想 - 二分法</a><ul><li>本文主要介绍算法思想中分治算法重要的二分法，比如二分查找；二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法。但是，折半查找要求线性表必须采用顺序存储结构，而且表中元素按关键字有序排列。</li></ul></li><li><a href="https://pdai.tech/md/algorithm/alg-core-search.html" target="_blank" rel="noreferrer">算法思想 - 搜索算法</a><ul><li>本文主要介绍算法中搜索算法的思想，主要包含BFS，DFS</li></ul></li><li><a href="https://pdai.tech/md/algorithm/alg-core-backtracking.html" target="_blank" rel="noreferrer">算法思想 - 回溯算法</a><ul><li>Backtracking(回溯)属于 DFS, 本文主要介绍算法中Backtracking算法的思想。回溯算法实际上一个类似枚举的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就“回溯”返回，尝试别的路径。回溯法是一种选优搜索法，按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的技术为回溯法</li></ul></li></ul><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>',6)]))}const s=a(i,[["render",o]]);export{g as __pageData,s as default};
