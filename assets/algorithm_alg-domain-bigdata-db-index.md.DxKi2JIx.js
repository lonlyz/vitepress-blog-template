import{_ as e,c as t,ai as n,o as s}from"./chunks/framework.BrYByd3F.js";const h=JSON.parse('{"title":"大数据处理 - Trie树/数据库/倒排索引","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/alg-domain-bigdata-db-index.md","filePath":"algorithm/alg-domain-bigdata-db-index.md","lastUpdated":1737706346000}'),i={name:"algorithm/alg-domain-bigdata-db-index.md"};function o(l,a,r,p,d,c){return s(),t("div",null,a[0]||(a[0]=[n(`<h1 id="大数据处理-trie树-数据库-倒排索引" tabindex="-1">大数据处理 - Trie树/数据库/倒排索引 <a class="header-anchor" href="#大数据处理-trie树-数据库-倒排索引" aria-label="Permalink to &quot;大数据处理 - Trie树/数据库/倒排索引&quot;">​</a></h1><blockquote><p>大数据处理处理思想之 Trie树/数据库/倒排索引, 本文主要梳理下思路。@pdai</p></blockquote><h2 id="trie树" tabindex="-1">Trie树 <a class="header-anchor" href="#trie树" aria-label="Permalink to &quot;Trie树&quot;">​</a></h2><blockquote><p>Trie树的介绍和实现请参考 <a href="https://pdai.tech/md/algorithm/alg-basic-tree-trie.html" target="_blank" rel="noreferrer">树 - 前缀树(Trie)</a></p></blockquote><ul><li><code>适用范围</code>: 数据量大，重复多，但是数据种类小可以放入内存</li><li><code>基本原理及要点</code>: 实现方式，节点孩子的表示方式</li><li><code>扩展</code>: 压缩实现。</li></ul><p><strong>一些适用场景</strong>：</p><ul><li>寻找<strong>热门查询</strong>: 查询串的<strong>重复度比较高</strong>，虽然总数是1千万，但如果除去重复后，不超过3百万个，每个不超过255字节。</li><li>有10个文件，每个文件1G，每个文件的每一行都存放的是用户的query，每个文件的<strong>query都可能重复</strong>。要你按照query的频度排序。</li><li>1000万字符串，其中有些是相同的(<strong>重复</strong>),需要把重复的全部去掉，保留没有重复的字符串。请问怎么设计和实现?</li><li>一个文本文件，大约有一万行，每行一个词，要求统计出其中<strong>最频繁出现</strong>的前10个词。其解决方法是: 用trie树统计每个词出现的次数，时间复杂度是O(n*le)(le表示单词的平准长度)，然后是找出出现最频繁的前10个词。</li></ul><h2 id="数据库索引" tabindex="-1">数据库索引 <a class="header-anchor" href="#数据库索引" aria-label="Permalink to &quot;数据库索引&quot;">​</a></h2><blockquote><p>数据库索引相关，可以参看 <a href="https://pdai.tech/md/db/sql-mysql/sql-mysql-b-tree.html" target="_blank" rel="noreferrer">MySQL - 索引(B+树)</a></p></blockquote><ul><li><code>适用范围</code>: 大数据量的增删改查</li><li><code>基本原理及要点</code>: 利用数据的设计实现方法，对海量数据的增删改查进行处理。</li></ul><h2 id="倒排索引-inverted-index" tabindex="-1">倒排索引(Inverted index) <a class="header-anchor" href="#倒排索引-inverted-index" aria-label="Permalink to &quot;倒排索引(Inverted index)&quot;">​</a></h2><blockquote><p>倒排索引，可以参看 ElsaticSearch底层的实现。</p></blockquote><ul><li><code>适用范围</code>: 搜索引擎，关键字查询</li><li><code>基本原理及要点</code>: 为何叫倒排索引? 一种索引方法，被用来存储在全文搜索下某个单词在一个文档或者一组文档中的存储位置的映射。</li></ul><p>以英文为例，下面是要被索引的文本:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>T0 = &quot;it is what it is&quot;</span></span>
<span class="line"><span>T1 = &quot;what is it&quot;</span></span>
<span class="line"><span>T2 = &quot;it is a banana&quot;</span></span>
<span class="line"><span>// 我们就能得到下面的倒排索引: </span></span>
<span class="line"><span>&quot;a&quot;:      {2}</span></span>
<span class="line"><span>&quot;banana&quot;: {2}</span></span>
<span class="line"><span>&quot;is&quot;:     {0, 1, 2}</span></span>
<span class="line"><span>&quot;it&quot;:     {0, 1, 2}</span></span>
<span class="line"><span>&quot;what&quot;:   {0, 1}</span></span>
<span class="line"><span>// 检索的条件&quot;what&quot;,&quot;is&quot;和&quot;it&quot;将对应集合的交集。</span></span></code></pre></div><p>正向索引开发出来用来存储每个文档的单词的列表。正向索引的查询往往满足每个文档有序频繁的全文查询和每个单词在校验文档中的验证这样的查询。在正向索引中，文档占据了中心的位置，每个文档指向了一个它所包含的索引项的序列。也就是说文档指向了它包含的那些单词，而<strong>倒排索引则是单词指向了包含它的文档，很容易看到这个反向的关系</strong>。</p><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>`,17)]))}const q=e(i,[["render",o]]);export{h as __pageData,q as default};
