import{_ as a,c as t,ai as r,o as i}from"./chunks/framework.BrYByd3F.js";const p=JSON.parse('{"title":"分布式算法 - Overview","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/alg-domain-distribute-overview.md","filePath":"algorithm/alg-domain-distribute-overview.md","lastUpdated":1737706346000}'),l={name:"algorithm/alg-domain-distribute-overview.md"};function o(d,e,s,n,h,m){return i(),t("div",null,e[0]||(e[0]=[r('<h1 id="分布式算法-overview" tabindex="-1">分布式算法 - Overview <a class="header-anchor" href="#分布式算法-overview" aria-label="Permalink to &quot;分布式算法 - Overview&quot;">​</a></h1><blockquote><p>本文总结下常见的分布式算法，主要是分布式中的一致性算法。@pdai</p></blockquote><h2 id="常见的分布式算法" tabindex="-1">常见的分布式算法 <a class="header-anchor" href="#常见的分布式算法" aria-label="Permalink to &quot;常见的分布式算法&quot;">​</a></h2><ul><li><a href="https://pdai.tech/md/algorithm/alg-domain-distribute-x-consistency-hash.html" target="_blank" rel="noreferrer">分布式算法 - 一致性Hash算法</a><ul><li>一致性Hash算法是个经典算法，Hash环的引入是为解决<code>单调性(Monotonicity)</code>的问题；虚拟节点的引入是为了解决<code>平衡性(Balance)</code>问题</li></ul></li><li><a href="https://pdai.tech/md/algorithm/alg-domain-distribute-x-paxos.html" target="_blank" rel="noreferrer">分布式算法 - Paxos算法</a><ul><li>Paxos算法是Lamport宗师提出的一种基于消息传递的分布式一致性算法，使其获得2013年图灵奖。自Paxos问世以来就持续垄断了分布式一致性算法，Paxos这个名词几乎等同于分布式一致性, 很多分布式一致性算法都由Paxos演变而来</li></ul></li><li><a href="https://pdai.tech/md/algorithm/alg-domain-distribute-x-raft.html" target="_blank" rel="noreferrer">分布式算法 - Raft算法</a><ul><li>Paxos是出了名的难懂，而Raft正是为了探索一种更易于理解的一致性算法而产生的。它的首要设计目的就是易于理解，所以在选主的冲突处理等方式上它都选择了非常简单明了的解决方案</li></ul></li><li><a href="https://pdai.tech/md/algorithm/alg-domain-distribute-x-zab.html" target="_blank" rel="noreferrer">分布式算法 - ZAB算法</a><ul><li>ZAB 协议全称：Zookeeper Atomic Broadcast（Zookeeper 原子广播协议）, 它应该是所有一致性协议中生产环境中应用最多的了。为什么呢？因为他是为 Zookeeper 设计的分布式一致性协议！</li></ul></li><li><a href="https://pdai.tech/md/algorithm/alg-domain-id-snowflake.html" target="_blank" rel="noreferrer">分布式算法 - Snowflake算法</a><ul><li>Snowflake，雪花算法是由Twitter开源的分布式ID生成算法，以划分命名空间的方式将 64-bit位分割成多个部分，每个部分代表不同的含义。这种就是将64位划分为不同的段，每段代表不同的涵义，基本就是时间戳、机器ID和序列数。为什么如此重要？因为它提供了一种ID生成及生成的思路，当然这种方案就是需要考虑时钟回拨的问题以及做一些 buffer的缓冲设计提高性能。</li></ul></li></ul><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>',5)]))}const u=a(l,[["render",o]]);export{p as __pageData,u as default};
