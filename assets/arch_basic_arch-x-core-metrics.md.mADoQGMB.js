import{_ as e,c as r,ai as t,o}from"./chunks/framework.BrYByd3F.js";const u=JSON.parse('{"title":"架构 - 理解架构的核心要素","description":"","frontmatter":{},"headers":[],"relativePath":"arch/basic/arch-x-core-metrics.md","filePath":"arch/basic/arch-x-core-metrics.md","lastUpdated":1737706346000}'),i={name:"arch/basic/arch-x-core-metrics.md"};function p(l,a,c,h,d,s){return o(),r("div",null,a[0]||(a[0]=[t('<h1 id="架构-理解架构的核心要素" tabindex="-1">架构 - 理解架构的核心要素 <a class="header-anchor" href="#架构-理解架构的核心要素" aria-label="Permalink to &quot;架构 - 理解架构的核心要素&quot;">​</a></h1><blockquote><p>一般来说软件架构需要关注<strong>性能、可用性、伸缩性、扩展性和安全性这5个架构要素</strong>。@pdai</p></blockquote><h2 id="架构的核心要素" tabindex="-1">架构的核心要素 <a class="header-anchor" href="#架构的核心要素" aria-label="Permalink to &quot;架构的核心要素&quot;">​</a></h2><p>所谓架构，一种通俗的说法就是“最高层次的规划，难以改变的决定”，这些规划和决定奠定了事物未来发展的方向和最终的蓝图。</p><p>而软件架构即“有关软件整体结构与组件的抽象描述，用于指导大型软件系统各方面的设计”。一般来说软件架构需要关注性能、可用性、伸缩性、扩展性和安全性这5个架构要素。</p><h3 id="性能" tabindex="-1">性能 <a class="header-anchor" href="#性能" aria-label="Permalink to &quot;性能&quot;">​</a></h3><p>性能是网站架构设计的一个重要方面，任何软件架构设计方案都必须考虑可能带来的性能问题。也正因为性能问题几乎无处不在，所以优化网站性能的手段也非常多：</p><ul><li><p><code>浏览器端</code>：可以通过浏览器缓存、页面压缩传输、合理布局页面、减少Cookie传输等手段，甚至可以使用CDN加速功能。</p></li><li><p><code>应用服务器端</code>：可以使用服务器本地缓存和分布式缓存，也可以通过异步操作方式来加快响应，在高并发请求的情况下，可以将多台应用服务器组成一个集群共同对外服务，提高整体处理能力，改善性能。</p></li><li><p><code>数据库服务器端</code>：可用使用索引、缓存、SQL性能优化等手段，还可以使用NoSQL数据库来优化数据模型、存储结构等。</p></li></ul><p>衡量网站性能有一系列指标，重要的有响应时间、TPS、系统性能计数器等，通过这些指标以确定系统设计是否达到目标。</p><h3 id="可用性" tabindex="-1">可用性 <a class="header-anchor" href="#可用性" aria-label="Permalink to &quot;可用性&quot;">​</a></h3><p>可用性即能够不间断提供服务的时间。几乎所有网站都承诺7×24小时可用，但事实上任何网站都不可能达到完全的7×24，总会有一些故障时间，扣除这些故障时间，就是网站的可用时间。一些大型网站可以做到4个9以上的可用性，也就是99.99%。</p><p>网站高可用的主要手段就是冗余，应用部署在多台服务器上同时提供服务，数据存储在多台服务器上相互备份，任何一台服务器都不会影响应用的整体可以，通常的实现手段即把多台服务器通过负载均衡设备组成一个集群。</p><p>衡量一个系统架构设计是否满足高可用的目标，就是假设系统中任何一台或者多台服务器宕机时，以及出现各种不可预期的问题时，系统整体是否依然可用。</p><h3 id="伸缩性" tabindex="-1">伸缩性 <a class="header-anchor" href="#伸缩性" aria-label="Permalink to &quot;伸缩性&quot;">​</a></h3><p>大型网站需要面对大量用户的高并发访问和存储海量数据，网站通过集群的方式将多台服务器组成一个整体共同提供服务。所谓伸缩性是指通过不断向集群中加入服务器的手段来缓解不断整体上市用户并发访问压力和不断增长的数据存储需求。</p><p>衡量架构伸缩性的主要标准就是是否可用多台服务器构建集群，是否容易向集群中添加新的服务器。加入新的服务器后是否可以提供和原来的服务器无差别的服务。集群中可容纳的总服务器数量是否有限制。</p><h3 id="扩展性" tabindex="-1">扩展性 <a class="header-anchor" href="#扩展性" aria-label="Permalink to &quot;扩展性&quot;">​</a></h3><p>不同于其他架构要素主要关注非功能性需求，网站的扩展性架构直接关注网站的功能需求。网站快速发展，功能不断扩展，如何设计网站的架构使其能够快速响应需求变化，是网站可扩展架构的主要目标。</p><p>衡量网站架构扩展性好坏的主要标准就是在网站增加新的业务产品时，是否可以实现对现有产品透明无影响，不同产品之间是否很少耦合等。</p><p>网站可扩展架构的主要手段是事件驱动架构和分布式服务。</p><p>事件驱动通常利用消息队列实现，通过这种方式将消息生产和处理逻辑分隔开。</p><p>服务器服务则是将业务和可复用服务分离开来，通过分布式服务框架调用。新增加产品可用通过调用可复用的服务来实现自身的业务逻辑，而对现有产品没有任何影响。</p><h3 id="安全性" tabindex="-1">安全性 <a class="header-anchor" href="#安全性" aria-label="Permalink to &quot;安全性&quot;">​</a></h3><p>互联网是开发的，任何人在任何地方都可以访问网站。网站的安全架构就是保护网站不受恶意访问和攻击，保护网站的重要数据不被窃取。</p><p>衡量网站安全架构的标准就是针对现存和潜在的各种攻击和窃密手段，是否有可靠的应对策略。</p><h2 id="参考文章" tabindex="-1">参考文章 <a class="header-anchor" href="#参考文章" aria-label="Permalink to &quot;参考文章&quot;">​</a></h2><ul><li>文章主要参考自 李智慧的 《大型网站技术架构》</li></ul><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>',28)]))}const b=e(i,[["render",p]]);export{u as __pageData,b as default};
