import{_ as e,c as a,ai as t,o as l}from"./chunks/framework.BrYByd3F.js";const h="/vitepress-blog-template/images/arch/arch-x-overview-learn2.png",g=JSON.parse('{"title":"♥架构 - 知识体系详解♥","description":"","frontmatter":{},"headers":[],"relativePath":"arch/basic/arch-x-overview.md","filePath":"arch/basic/arch-x-overview.md","lastUpdated":1737706346000}'),i={name:"arch/basic/arch-x-overview.md"};function o(c,r,n,s,p,u){return l(),a("div",null,r[0]||(r[0]=[t('<h1 id="♥架构-知识体系详解♥" tabindex="-1">♥架构 - 知识体系详解♥ <a class="header-anchor" href="#♥架构-知识体系详解♥" aria-label="Permalink to &quot;♥架构 - 知识体系详解♥&quot;">​</a></h1><p>提示</p><p>本系列将带你梳理下架构相关的知识体系。@pdai</p><h2 id="如何学习架构" tabindex="-1">如何学习架构 <a class="header-anchor" href="#如何学习架构" aria-label="Permalink to &quot;如何学习架构&quot;">​</a></h2><ul><li>包含如何学习架构?</li></ul><p><img src="'+h+'" alt="error.图片加载失败"></p><h3 id="基础到方法论" tabindex="-1">基础到方法论 <a class="header-anchor" href="#基础到方法论" aria-label="Permalink to &quot;基础到方法论&quot;">​</a></h3><blockquote><p>包括架构的概述，特点，目标，本质以及方法论等</p></blockquote><ul><li><a href="https://pdai.tech/md/arch/arch-x-basic.html" target="_blank" rel="noreferrer">架构 - 架构基础: 特点,本质...</a><ul><li>本节总结下架构相关的基础知识：概述，特点，目标，本质...</li></ul></li></ul><h3 id="如何理解架构" tabindex="-1">如何理解架构 <a class="header-anchor" href="#如何理解架构" aria-label="Permalink to &quot;如何理解架构&quot;">​</a></h3><blockquote><p>理解架构，包括架构的视角，架构的演进，服务化演进，架构的核心要素</p></blockquote><ul><li><a href="https://pdai.tech/md/arch/arch-x-view.html" target="_blank" rel="noreferrer">架构 - 理解构架的视角</a><ul><li>在学习架构时，我认为首先要理清楚架构的视角，<strong>因为你所认知的架构和别人所说的架构可能是两码事</strong>。对于不同职位的视角是不一样的，比如开发而言他更多的看到的是开发架构；对售前人员，他可能更多的看到的是业务架构；对于运维人员，他看到的可能是运维架构；而对于技术支持和部署人员，他更多的看到的网络和物理架构。</li></ul></li><li><a href="https://pdai.tech/md/arch/arch-x-view-2.html" target="_blank" rel="noreferrer">架构 - 理解构架的分层</a><ul><li>技术框架（technological Framework）是整个或部分技术系统的可重用设计，表现为一组抽象构件及构件实例间交互的方法。于开发者而言，实际工作从通常采用的是分层模型，由于其重要性，这里独立一个章节，总结经典的<strong>七层逻辑架构</strong>。</li></ul></li><li><a href="https://pdai.tech/md/arch/arch-x-evolution.html" target="_blank" rel="noreferrer">架构 - 理解架构的演进</a><ul><li>在学习架构时，<strong>第一步不要去学习框架，而是要学习架构的演进</strong>。强烈推荐李智慧老师的《大型网站技术架构》，这本书翻起来很快，对构筑你自己的体系很有帮助，本文的内容来源于它，在此基础上拓展了下。</li></ul></li><li><a href="https://pdai.tech/md/arch/arch-x-service.html" target="_blank" rel="noreferrer">架构 - 理解架构的服务演化</a><ul><li>Kubernetes、Service Mesh 和 Serverless应该是最近比较火的了，而上文主要从<strong>逻辑架构角度</strong>分析了架构演进，本文将从<strong>服务演化</strong>和<strong>容器编排化</strong>的角度帮你增强对架构演进的认识。</li></ul></li><li><a href="https://pdai.tech/md/arch/arch-x-pattern.html" target="_blank" rel="noreferrer">架构 - 理解架构的模式1</a><ul><li>架构演进中有很多知识点，总体上可以归结为以下模式，<strong>这里说的模式本质是架构中技术点的抽象</strong>。强烈推荐李智慧老师的《大型网站技术架构》，本文的内容也是来源于它，在此基础上拓展了下。</li></ul></li><li><a href="https://pdai.tech/md/arch/arch-x-pattern-2.html" target="_blank" rel="noreferrer">架构 - 理解架构的模式2</a><ul><li>本文整理自<a href="https://www.cnblogs.com/lovecindywang/p/9670356.html" target="_blank" rel="noreferrer">朱晔的互联网架构实践心得在新窗口打开</a>, 他是结合了 <strong>微软给出的云架构的一些模式</strong>的基础上加入他自己的理解来总结互联网架构中具体的一些模式。我在此基础上进行了些微小的调整。</li></ul></li><li><a href="https://pdai.tech/md/arch/arch-x-core-metrics.html" target="_blank" rel="noreferrer">架构 - 理解架构的核心要素</a><ul><li>一般来说软件架构需要关注<strong>性能、可用性、伸缩性、扩展性和安全性这5个架构要素</strong>。</li></ul></li></ul><h3 id="架构高并发和高可用" tabindex="-1">架构高并发和高可用 <a class="header-anchor" href="#架构高并发和高可用" aria-label="Permalink to &quot;架构高并发和高可用&quot;">​</a></h3><blockquote><p>架构高并发和高可用技术点主要包含如下方面。</p></blockquote><ul><li><a href="https://pdai.tech/md/arch/arch-y-cache.html" target="_blank" rel="noreferrer">架构之高并发：缓存</a><ul><li><strong>高并发实现的三板斧：缓存，限流和降级</strong>。缓存在高并发系统中有者极其广阔的应用，需要重点掌握，本文重点介绍下缓存及其实现。</li></ul></li><li><a href="https://pdai.tech/md/arch/arch-y-ratelimit.html" target="_blank" rel="noreferrer">架构之高并发：限流</a><ul><li>每个系统都有服务的上线，所以当流量超过服务极限能力时，系统可能会出现卡死、崩溃的情况，所以就有了降级和限流。限流其实就是：当高并发或者瞬时高并发时，为了保证系统的稳定性、可用性，系统以牺牲部分请求为代价或者延迟处理请求为代价，保证系统整体服务可用。</li></ul></li><li><a href="https://pdai.tech/md/arch/arch-y-reduce.html" target="_blank" rel="noreferrer">架构之高并发：降级和熔断</a><ul><li>在高并发环境下，<strong>服务之间的依赖关系导致调用失败，解决的方式通常是: 限流-&gt;熔断-&gt;隔离-&gt;降级, 其目的是防止雪崩效应</strong>。</li></ul></li><li><a href="https://pdai.tech/md/arch/arch-y-loadbalance.html" target="_blank" rel="noreferrer">架构之高可用：负载均衡</a><ul><li>负载均衡（Load Balance），意思是将负载（工作任务，访问请求）进行平衡、分摊到多个操作单元（服务器，组件）上进行执行。是解决高性能，单点故障（高可用），扩展性（水平伸缩）的终极解决方案。</li></ul></li><li><a href="https://pdai.tech/md/arch/arch-y-backup.html" target="_blank" rel="noreferrer">架构之高可用：容灾备份,故障转移</a><ul><li>容灾技术是系统的高可用性技术的一个组成部分，容灾系统更加强调处理外界环境对系统的影响，特别是灾难性事件对整个IT节点的影响，提供节点级别的系统恢复功能。故障转移（failover），即当活动的服务或应用意外终止时，快速启用<strong>冗余</strong>或备用的服务器、系统、硬件或者网络接替它们工作。故障恢复是在计划内或计划外中断解决后<strong>切换回主站点</strong>的过程。</li></ul></li></ul><h3 id="架构的安全" tabindex="-1">架构的安全 <a class="header-anchor" href="#架构的安全" aria-label="Permalink to &quot;架构的安全&quot;">​</a></h3><blockquote><p>此外还需要关注下架构的安全。</p></blockquote><ul><li><a href="https://pdai.tech/md/arch/arch-x-security.html" target="_blank" rel="noreferrer">架构 - 保障架构安全</a><ul><li>本文对架构安全知识点梳理。</li></ul></li></ul><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>',19)]))}const m=e(i,[["render",o]]);export{g as __pageData,m as default};
