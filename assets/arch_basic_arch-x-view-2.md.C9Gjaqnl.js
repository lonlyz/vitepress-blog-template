import{_ as t}from"./chunks/arch-x-view-2.uDjd0ILM.js";import{_ as e,c as a,ai as o,o as i}from"./chunks/framework.BrYByd3F.js";const s="/vitepress-blog-template/images/arch/arch-x-overview-layer2.jpg",b=JSON.parse('{"title":"架构 - 理解构架的分层","description":"","frontmatter":{},"headers":[],"relativePath":"arch/basic/arch-x-view-2.md","filePath":"arch/basic/arch-x-view-2.md","lastUpdated":1737706346000}'),l={name:"arch/basic/arch-x-view-2.md"};function n(c,r,p,h,g,d){return i(),a("div",null,r[0]||(r[0]=[o('<h1 id="架构-理解构架的分层" tabindex="-1">架构 - 理解构架的分层 <a class="header-anchor" href="#架构-理解构架的分层" aria-label="Permalink to &quot;架构 - 理解构架的分层&quot;">​</a></h1><blockquote><p>技术框架（technological Framework）是整个或部分技术系统的可重用设计，表现为一组抽象构件及构件实例间交互的方法。于开发者而言，实际工作从通常采用的是分层模型，这里独立一个章节，总结经典的<strong>七层逻辑架构</strong>。@pdai</p></blockquote><h2 id="架构技术视角回顾" tabindex="-1">架构技术视角回顾 <a class="header-anchor" href="#架构技术视角回顾" aria-label="Permalink to &quot;架构技术视角回顾&quot;">​</a></h2><blockquote><p>上个章节<a href="https://pdai.tech/md/arch/arch-x-view.html#%E5%BA%94%E7%94%A8%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84" target="_blank" rel="noreferrer">架构 - 理解构架的视角</a>中已经站在不同角色视角理解了架构，我们再回顾下技术架构。</p></blockquote><p>技术框架（technological Framework）是整个或部分技术系统的可重用设计，表现为一组抽象构件及构件实例间交互的方法;另一种定义认为，技术框架是可被技术开发者定制的应用骨架。前者是从应用方面而后者是从目的方面给出的定义。</p><p>从技术层面描述，主要是分层模型，例如持久层、数据层、逻辑层、应用层、表现层等，然后每层使用什么技术框架，例如Spring、hibernate、ioc、MVC、成熟的类库、中间件、WebService等，分别说明，要求这些技术能够将整个系统的主要实现概括。</p><p><img src="'+t+'" alt="error.图片加载失败"></p><h2 id="分层下看架构技术点" tabindex="-1">分层下看架构技术点 <a class="header-anchor" href="#分层下看架构技术点" aria-label="Permalink to &quot;分层下看架构技术点&quot;">​</a></h2><blockquote><p>于开发者而言，实际工作从通常采用的是分层模型，总结下经典的<strong>七层逻辑架构</strong>。</p></blockquote><p><img src="'+s+'" alt="error.图片加载失败"></p><p>以上采用<strong>七层逻辑架构</strong>，第一层客户层，第二层前端优化层，第三层应用层，第四层服务层，第五层数据存储层，第六层大数据存储层，第七层大数据处理层。</p><ul><li><strong>客户层</strong>：减少Http请求数，浏览器缓存，启用压缩，Js异步，减少Cookie传输；</li><li><strong>前端层</strong>：DNS负载均衡，CDN本地加速，反向代理服务；</li><li><strong>应用层</strong>：业务拆分；负载均衡，分级管理，应用缓存，服务集群，快速失败，异步调用，服务降级，消息队列，幂等设计等。</li><li><strong>服务层</strong>：提供公用服务，比如用户服务，订单服务，支付服务等；</li><li><strong>数据层</strong>：分布式, 数据库集群，读写分离，NOSQL集群，文件系统集群；分布式缓存；冗余备份（冷，热备[同步，异步]，温备），失效转移（确认，转移，恢复）。CAP理论，一致性算法。</li><li><strong>大数据存储层</strong>：支持应用层和服务层的日志数据收集，关系数据库和NOSQL数据库的结构化和半结构化数据收集；</li><li><strong>大数据处理层</strong>：通过Mapreduce进行离线数据分析或Storm实时数据分析，并将处理后的数据存入关系型数据库。（实际使用中，离线数据和实时数据会按照业务要求进行分类处理，并存入不同的数据库中，供应用层或服务层使用）。</li></ul><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>',13)]))}const u=e(l,[["render",n]]);export{b as __pageData,u as default};
