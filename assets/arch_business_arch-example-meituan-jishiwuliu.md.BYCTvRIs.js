import{_ as e,c as t,ai as r,o as i}from"./chunks/framework.BrYByd3F.js";const l="/vitepress-blog-template/images/arch/arch-e-meituan-wuliu-1.png",s="/vitepress-blog-template/images/arch/arch-e-meituan-wuliu-2.png",p="/vitepress-blog-template/images/arch/arch-e-meituan-wuliu-3.png",o="/vitepress-blog-template/images/arch/arch-e-meituan-wuliu-4.png",c="/vitepress-blog-template/images/arch/arch-e-meituan-wuliu-5.png",h="/vitepress-blog-template/images/arch/arch-e-meituan-wuliu-6.png",n="/vitepress-blog-template/images/arch/arch-e-meituan-wuliu-7.png",u="/vitepress-blog-template/images/arch/arch-e-meituan-wuliu-8.png",m="/vitepress-blog-template/images/arch/arch-e-meituan-wuliu-9.png",d="/vitepress-blog-template/images/arch/arch-e-meituan-wuliu-10.png",b="/vitepress-blog-template/images/arch/arch-e-meituan-wuliu-11.png",A=JSON.parse('{"title":"【仓储物流】美团-即时物流的分布式系统架构设计","description":"","frontmatter":{},"headers":[],"relativePath":"arch/business/arch-example-meituan-jishiwuliu.md","filePath":"arch/business/arch-example-meituan-jishiwuliu.md","lastUpdated":1737706346000}'),g={name:"arch/business/arch-example-meituan-jishiwuliu.md"};function _(q,a,f,C,k,x){return i(),t("div",null,a[0]||(a[0]=[r('<h1 id="【仓储物流】美团-即时物流的分布式系统架构设计" tabindex="-1">【仓储物流】美团-即时物流的分布式系统架构设计 <a class="header-anchor" href="#【仓储物流】美团-即时物流的分布式系统架构设计" aria-label="Permalink to &quot;【仓储物流】美团-即时物流的分布式系统架构设计&quot;">​</a></h1><blockquote><p>美团外卖已经发展了五年，即时物流探索也经历了3年多的时间，业务从零孵化到初具规模，在整个过程中积累了一些分布式高并发系统的建设经验。文主要介绍在美团即时物流分布式系统架构逐层演变的进展中，遇到的技术障碍和挑战。</p></blockquote><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><p>美团外卖已经发展了五年，即时物流探索也经历了3年多的时间，业务从零孵化到初具规模，在整个过程中积累了一些分布式高并发系统的建设经验。最主要的收获包括两点：</p><ul><li><p>即时物流业务对故障和高延迟的容忍度极低，在业务复杂度提升的同时也要求系统具备分布式、可扩展、可容灾的能力。即时物流系统阶段性的逐步实施分布式系统的架构升级，最终解决了系统宕机的风险。</p></li><li><p>围绕成本、效率、体验核心三要素，即时物流体系大量结合AI技术，从定价、ETA、调度、运力规划、运力干预、补贴、核算、语音交互、LBS挖掘、业务运维、指标监控等方面，业务突破结合架构升级，达到促规模、保体验、降成本的效果。</p></li></ul><p><img src="'+l+'" alt="error.图片加载失败"></p><p>本文主要介绍在美团即时物流分布式系统架构逐层演变的进展中，遇到的技术障碍和挑战：</p><ul><li>订单、骑手规模大，供需匹配过程的超大规模计算问题。</li><li>遇到节假日或者恶劣天气，订单聚集效应，流量高峰是平常的十几倍。</li><li>物流履约是线上连接线下的关键环节，故障容忍度极低，不能宕机，不能丢单，可用性要求极高。</li><li>数据实时性、准确性要求高，对延迟、异常非常敏感。</li></ul><h2 id="美团即时物流架构" tabindex="-1">美团即时物流架构 <a class="header-anchor" href="#美团即时物流架构" aria-label="Permalink to &quot;美团即时物流架构&quot;">​</a></h2><p>美团即时物流配送平台主要围绕三件事展开：一是面向用户提供履约的SLA，包括计算送达时间ETA、配送费定价等；二是在多目标（成本、效率、体验）优化的背景下，匹配最合适的骑手；三是提供骑手完整履约过程中的辅助决策，包括智能语音、路径推荐、到店提醒等。</p><p><img src="'+s+'" alt="error.图片加载失败"></p><p>在一系列服务背后，是美团强大的技术体系的支持，并由此沉淀出的配送业务架构体系，基于架构构建的平台、算法、系统和服务。庞大的物流系统背后离不开分布式系统架构的支撑，而且这个架构更要保证高可用和高并发。</p><p>分布式架构，是相对于集中式架构而言的一种架构体系。分布式架构适用CAP理论（Consistency 一致性，Availability 可用性，Partition Tolerance 分区容忍性）。在分布式架构中，一个服务部署在多个对等节点中，节点之间通过网络进行通信，多个节点共同组成服务集群来提供高可用、一致性的服务。</p><p>早期，美团按照业务领域划分成多个垂直服务架构；随着业务的发展，从可用性的角度考虑做了分层服务架构。后来，业务发展越发复杂，从运维、质量等多个角度考量后，逐步演进到微服务架构。这里主要遵循了两个原则：不宜过早的进入到微服务架构的设计中，好的架构是演进出来的不是提前设计出来的。</p><h2 id="分布式系统实践" tabindex="-1">分布式系统实践 <a class="header-anchor" href="#分布式系统实践" aria-label="Permalink to &quot;分布式系统实践&quot;">​</a></h2><p><img src="'+p+'" alt="error.图片加载失败"></p><p>上图是比较典型的美团技术体系下的分布式系统结构：依托了美团公共组件和服务，完成了分区扩容、容灾和监控的能力。前端流量会通过HLB来分发和负载均衡；在分区内，服务与服务会通过OCTO进行通信，提供服务注册、自动发现、负载均衡、容错、灰度发布等等服务。当然也可以通过消息队列进行通信，例如Kafka、RabbitMQ。在存储层使用Zebra来访问分布式数据库进行读写操作。利用CAT（美团开源的分布式监控系统）进行分布式业务及系统日志的采集、上报和监控。分布式缓存使用Squirrel+Cellar的组合。分布式任务调度则是通过Crane。</p><p>在实践过程还要解决几个问题，比较典型的是集群的扩展性，有状态的集群可扩展性相对较差，无法快速扩容机器，无法缓解流量压力。同时，也会出现节点热点的问题，包括资源不均匀、CPU使用不均匀等等。</p><p><img src="'+o+'" alt="error.图片加载失败"></p><p>首先，配送后台技术团队通过架构升级，将有状态节点变成无状态节点，通过并行计算的能力，让小的业务节点去分担计算压力，以此实现快速扩容。</p><p>第二是要解决一致性的问题，对于既要写DB也要写缓存的场景，业务写缓存无法保障数据一致性，美团内部主要通过Databus来解决，Databus是一个高可用、低延时、高并发、保证数据一致性的数据库变更实时传输系统。通过Databus上游可以监控业务Binlog变更，通过管道将变更信息传递给ES和其他DB，或者是其他KV系统，利用Databus的高可用特性来保证数据最终是可以同步到其他系统中。</p><p><img src="'+c+'" alt="error.图片加载失败"></p><p>第三是我们一直在花精力解决的事情，就是保障集群高可用，主要从三个方面来入手，事前较多的是做全链路压测评，估峰值容量；周期性的集群健康性检查；随机故障演练（服务、机器、组件）。事中做异常报警（性能、业务指标、可用性）；快速的故障定位（单机故障、集群故障、IDC故障、组件异常、服务异常）；故障前后的系统变更收集。事后重点做系统回滚；扩容、限流、熔断、降级；核武器兜底。</p><p><img src="'+h+'" alt="error.图片加载失败"></p><h3 id="单idc的快速部署-容灾" tabindex="-1">单IDC的快速部署&amp;容灾 <a class="header-anchor" href="#单idc的快速部署-容灾" aria-label="Permalink to &quot;单IDC的快速部署&amp;容灾&quot;">​</a></h3><p>单IDC故障之后，入口服务做到故障识别，自动流量切换；单IDC的快速扩容，数据提前同步，服务提前部署，Ready之后打开入口流量；要求所有做数据同步、流量分发的服务，都具备自动故障检测、故障服务自动摘除；按照IDC为单位扩缩容的能力。</p><p><img src="'+n+'" alt="error.图片加载失败"></p><h3 id="多中心尝试" tabindex="-1">多中心尝试 <a class="header-anchor" href="#多中心尝试" aria-label="Permalink to &quot;多中心尝试&quot;">​</a></h3><p>美团IDC以分区为单位，存在资源满排，分区无法扩容。美团的方案是多个IDC组成虚拟中心，以中心为分区的单位；服务无差别的部署在中心内；中心容量不够，直接增加新的IDC来扩容容量。</p><p><img src="'+u+'" alt="error.图片加载失败"></p><h3 id="单元化尝试" tabindex="-1">单元化尝试 <a class="header-anchor" href="#单元化尝试" aria-label="Permalink to &quot;单元化尝试&quot;">​</a></h3><p>相比多中心来说，单元化是进行分区容灾和扩容的更优方案。关于流量路由，美团主要是根据业务特点，采用区域或城市进行路由。数据同步上，异地会出现延迟状况。SET容灾上要保证同本地或异地SET出现问题时，可以快速把SET切换到其他SET上来承担流量。</p><p><img src="'+m+'" alt="error.图片加载失败"></p><h2 id="智能物流的核心技术能力和平台沉淀" tabindex="-1">智能物流的核心技术能力和平台沉淀 <a class="header-anchor" href="#智能物流的核心技术能力和平台沉淀" aria-label="Permalink to &quot;智能物流的核心技术能力和平台沉淀&quot;">​</a></h2><p>机器学习平台，是一站式线下到线上的模型训练和算法应用平台。之所以构建这个平台，目的是要解决算法应用场景多，重复造轮子的矛盾问题，以及线上、线下数据质量不一致。如果流程不明确不连贯，会出现迭代效率低，特征、模型的应用上线部署出现数据质量等障碍问题。</p><p><img src="'+d+'" alt="error.图片加载失败"></p><p>JARVIS是一个以稳定性保障为目标的智能化业务运维AIOps平台。主要用于处理系统故障时报警源很多，会有大量的重复报警，有效信息很容易被淹没等各种问题。此外，过往小规模分布式集群的运维故障主要靠人和经验来分析和定位，效率低下，处理速度慢，每次故障处理得到的预期不稳定，在有效性和及时性方面无法保证。所以需要AIOps平台来解决这些问题。</p><p><img src="'+b+'" alt="error.图片加载失败"></p><h2 id="未来的挑战" tabindex="-1">未来的挑战 <a class="header-anchor" href="#未来的挑战" aria-label="Permalink to &quot;未来的挑战&quot;">​</a></h2><p>经过复盘和Review之后，我们发现未来的挑战很大，微服务不再“微”了，业务复杂度提升之后，服务就会变得膨胀。其次，网状结构的服务集群，任何轻微的延迟，都可能导致的网络放大效应。另外复杂的服务拓扑，如何做到故障的快速定位和处理，这也是AIOps需要重点解决的难题。最后，就是单元化之后，从集群为单位的运维到以单元为单位的运维，业给美团业务部署能力带来很大的挑战。</p><h2 id="作者简介" tabindex="-1">作者简介 <a class="header-anchor" href="#作者简介" aria-label="Permalink to &quot;作者简介&quot;">​</a></h2><ul><li>宋斌，美团资深技术专家，长期参与分布式系统架构、高并发系统稳定性保障相关工作。目前担任即时物流团队后台技术负责人。2013年加入美团，参与过美团外卖C端、即时物流体系从零搭建。现在带领团队负责调度、清结算、LBS、定价等业务系统、算法数据平台、稳定性保障平台等技术平台的研发和运维。最近重点关注AIOps方向，探索在高并发、分布式系统架构下，如何更好的做好系统稳定性保障。</li></ul><h2 id="文章来源" tabindex="-1">文章来源 <a class="header-anchor" href="#文章来源" aria-label="Permalink to &quot;文章来源&quot;">​</a></h2><p>转载说明:</p><ul><li>版权声明：本文为「美团技术团队」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。</li><li>原文链接：<a href="https://tech.meituan.com/2018/11/22/instant-logistics-distributed-system-architecture.html" target="_blank" rel="noreferrer">https://tech.meituan.com/2018/11/22/instant-logistics-distributed-system-architecture.html</a></li><li>本文根据美团资深技术专家宋斌在ArchSummit架构师峰会上的演讲整理而成。</li></ul><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>',46)]))}const D=e(g,[["render",_]]);export{A as __pageData,D as default};
