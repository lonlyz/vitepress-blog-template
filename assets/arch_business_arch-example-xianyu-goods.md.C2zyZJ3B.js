import{_ as e,c as r,ai as t,o as p}from"./chunks/framework.BrYByd3F.js";const l="/vitepress-blog-template/images/arch/arch-e-goods-xianyu-1.png",i="/vitepress-blog-template/images/arch/arch-e-goods-xianyu-2.png",o="/vitepress-blog-template/images/arch/arch-e-goods-xianyu-3.png",s="/vitepress-blog-template/images/arch/arch-e-goods-xianyu-4.png",h="/vitepress-blog-template/images/arch/arch-e-goods-xianyu-5.png",n="/vitepress-blog-template/images/arch/arch-e-goods-xianyu-6.png",c="/vitepress-blog-template/images/arch/arch-e-goods-xianyu-7.png",f=JSON.parse('{"title":"【电商交易】闲鱼-亿级商品结构化背后的思考和演进","description":"","frontmatter":{},"headers":[],"relativePath":"arch/business/arch-example-xianyu-goods.md","filePath":"arch/business/arch-example-xianyu-goods.md","lastUpdated":1737706346000}'),d={name:"arch/business/arch-example-xianyu-goods.md"};function u(m,a,g,b,_,x){return p(),r("div",null,a[0]||(a[0]=[t('<h1 id="【电商交易】闲鱼-亿级商品结构化背后的思考和演进" tabindex="-1">【电商交易】闲鱼-亿级商品结构化背后的思考和演进 <a class="header-anchor" href="#【电商交易】闲鱼-亿级商品结构化背后的思考和演进" aria-label="Permalink to &quot;【电商交易】闲鱼-亿级商品结构化背后的思考和演进&quot;">​</a></h1><blockquote><p>闲鱼是一个典型的C2C场景的闲置交易平台，每个在闲鱼的用户都能享受到自由交易的乐趣，只要简单的输入商品名，商品价格，库存等信息就能完成一个商品的发布。充分的自由是闲鱼活力的来源，但是这对于一个电商平台来说是一个挑战。本文要说的商品结构化就是痛点之一。C2C平台的商品结构化之所以难，是因为用户完成结构化的动力不足。怎样让用户以最小的成本来完成结构化，我们不能寄希望于商家后台这样很重的解决方案，我们需要的是一个简单高效灵活的解法。</p></blockquote><h2 id="方案选型" tabindex="-1">方案选型 <a class="header-anchor" href="#方案选型" aria-label="Permalink to &quot;方案选型&quot;">​</a></h2><p>怎么解决? 首先我们从整个C2C商品发布的全周期做一个方案的对比分析。</p><p><img src="'+l+'" alt="error.图片加载失败"></p><h3 id="思路一-离线式方案" tabindex="-1">思路一 离线式方案 <a class="header-anchor" href="#思路一-离线式方案" aria-label="Permalink to &quot;思路一 离线式方案&quot;">​</a></h3><p>改方案包括算法关联&amp;社会化方案。算法关联方案是通过技术手段对用户发布的商品进行分析，从而进行同款的关联或是属性打标。社会化方案核心是将商品结构化包装成一个活动。这样能通过用户参与答题的方式，进行商品结构化的关联。离线方案核心的缺点是关联链路太长，数据回流慢。更为重要的问题是分析出的数据没有用户确认，无法在显示域中使用。</p><h3 id="思路二-手动关联方案" tabindex="-1">思路二 手动关联方案 <a class="header-anchor" href="#思路二-手动关联方案" aria-label="Permalink to &quot;思路二 手动关联方案&quot;">​</a></h3><p>这个是发布中的处理方案。这个方案可能是最为直观的方案。发布过程中，引导用户做属性打标或者同款商品的关联。这个方案的优点是简单直观。缺点同样明显：完全将成本转嫁给用户。对C卖家来说，每增加一个发布选择项，都可能导致用户流失。这个方案可以做为结构化的补充，却不是我们寻找的最优解。</p><p>我们的思考：我们能否在保障实时性的前提下，实现一个高效低成本的方案呢?</p><p>答案就是本文给出的方案——智能发布方案。如果闲鱼用户在发布阶段就能将准备发布的商品自动关联上手淘的商品库中的某个商品。该商品就能使用同款商品的若干结构化信息，商品结构的化的问题不就迎刃而解了么?</p><h3 id="方案对比" tabindex="-1">方案对比 <a class="header-anchor" href="#方案对比" aria-label="Permalink to &quot;方案对比&quot;">​</a></h3><p><img src="'+i+'" alt="error.图片加载失败"></p><p>可见智能发布方案是一个成本和效果最为均衡的方案。</p><h3 id="业务逻辑" tabindex="-1">业务逻辑 <a class="header-anchor" href="#业务逻辑" aria-label="Permalink to &quot;业务逻辑&quot;">​</a></h3><p>先从通过下图，了解一下产品核心逻辑（以视频发布为例）</p><p><img src="'+o+'" alt="error.图片加载失败"></p><p>简单拆解：</p><ol><li>主体对焦</li></ol><p>作为智能识别的开始。我们需要通过AI算法识别出端侧的拍摄的主体对象。这样做的目的是跟用户对识别物体目标保持一致。</p><ol start="2"><li>智能识别&amp;引导</li></ol><p>我们会在用户拍摄过程中对被拍摄物体进行实时识别。同时我们引导用户拍摄目标对象的核心信息放大算法的效果。</p><ol start="3"><li>结果反馈&amp;用户确认</li></ol><p>当用户拍摄完成，我们会以同款的方式，让用户进行一个简单的选择。</p><h2 id="架构设计" tabindex="-1">架构设计 <a class="header-anchor" href="#架构设计" aria-label="Permalink to &quot;架构设计&quot;">​</a></h2><h3 id="技术挑战" tabindex="-1">技术挑战 <a class="header-anchor" href="#技术挑战" aria-label="Permalink to &quot;技术挑战&quot;">​</a></h3><p>综上智能发布的核心解法是将商品结构化的产品问题，转变成同款商品匹配这样的技术问题。</p><p>所以我们的核心技术挑战：</p><ul><li><p>在发布阶段进行商品识别的实时性保障</p></li><li><p>怎样通过压榨AI的能力从而最大化同款商品的匹配成功率</p></li></ul><p>从闲鱼角度解这个问题，我们有三大技术优势:</p><ul><li><p>以AliNN为代表的移动AI解决方案使得端侧AI计算成为可能</p></li><li><p>我们有这个星球上可能最大的商品信息库(淘宝&amp;天猫)</p></li><li><p>阿里达摩院雄厚的AI能力</p></li></ul><p>我们可以通过前置部分AI能力到端侧，大幅度提升链路的实时性。同时我们将AI识别能力和淘系商品库做结合，完成同款商品匹配的功能。</p><p>为了做到上面的能力，我们构建了完整的智能发布技术架构。</p><h3 id="整体架构" tabindex="-1">整体架构 <a class="header-anchor" href="#整体架构" aria-label="Permalink to &quot;整体架构&quot;">​</a></h3><p>首先介绍我们的逻辑架构</p><p><img src="'+s+'" alt="error.图片加载失败"></p><p>整体设计上面分为三层:</p><ul><li><p>UI 展示和交互层。核心是处理用户输入和结果反馈。</p></li><li><p>逻辑处理层。主要是控制智能识别管线的运作逻辑和子模块处理结果的分发</p></li><li><p>框架层主要是各个核心处理子模块</p></li></ul><h3 id="架构细节" tabindex="-1">架构细节 <a class="header-anchor" href="#架构细节" aria-label="Permalink to &quot;架构细节&quot;">​</a></h3><p>细节来说，我们通过协同flutter，java/Oc和C++三层逻辑来构建高效的识别能力。如下图所示：</p><p><img src="'+h+'" alt="error.图片加载失败"></p><p>主要设计考量：</p><p>1.充分利用不同的技术，最大化研发效能。</p><p>我们充分利Flutter多端一致性的优势在UI层使用Flutter进行开发。同时我们将部分共同的算法下沉到C++层。这样能大幅提升两端逻辑的复用率和一致性。</p><p>2.充分利用端侧的计算能力</p><p>模糊检测，相似度检测，主体识别，tracking这些算法都是在端侧实现的。除了充分利用端侧的计算能力外，更重要的是提升拍摄过程中的处理效率。最大化降低对网络请求的依赖。</p><p>通过极致的压缩算法，将最终上传的图片大小控制在10K左右。即便是4次请求也不过40K。可以说对用户流量不会构成压力。</p><ol start="3"><li>管线编排系统</li></ol><p>考虑到后期系统的持续优化，对子模块的处理逻辑的调整不可避免。因此我们设计了一个灵活的管线来管理所有的处理逻辑。该管线能灵活组合java/Oc和C++的能力。并且可以方便做到子功能的顺序调整和功能增减。架构设计如下所示（以android为例）：</p><p><img src="'+n+'" alt="error.图片加载失败"></p><ol start="4"><li>用户隐私的保护</li></ol><p>用作识别的图片会做加密处理，将用户隐私泄露的风险降低到最小。出现在公域中的图片地址都是无法直接访问的。即便泄漏用户的隐私也可以保全。</p><h3 id="算法架构" tabindex="-1">算法架构 <a class="header-anchor" href="#算法架构" aria-label="Permalink to &quot;算法架构&quot;">​</a></h3><p>算法侧的我们也做了大量的优化。</p><p>智能发布的最核心算法是同款商品的匹配算法。我们将单帧的预测算法改进为多帧预测。并且我们创新性地将算法和交互做深度融合，极限压榨算法的极限能力。过程如下所示：</p><p>如果算法发现当前帧若不足以作出较为准确的算法预测，则将图像信息向后传递。在传递过程中，及时通过文案引导用户拍摄算法所需要的信息。依次迭代直到完整预测出商品信息。算法处理逻辑如下图所示。</p><p><img src="'+c+'" alt="error.图片加载失败"></p><h2 id="效果" tabindex="-1">效果 <a class="header-anchor" href="#效果" aria-label="Permalink to &quot;效果&quot;">​</a></h2><p>实时性处理性能：经过我们的测试，识别过程除主动提示外对用户无明显感知。用户的正常拍摄过程无掉帧等性能问题。</p><p>同款商品识别效果方面：总体上基于多帧识别准确度相比单帧提升约20%。</p><p>通过该项目我们不仅构建了闲鱼完整的对商品的实时识别能力。同时也沉淀了图片预处理，tracking等一批端计算核心算法。基于此，我们完全可以将更加实时的AI的能力赋能给更多场景（例如扫指定商品或者logo参加特定活动等）。</p><h2 id="展望" tabindex="-1">展望 <a class="header-anchor" href="#展望" aria-label="Permalink to &quot;展望&quot;">​</a></h2><p>智能发布将在9月的版本中跟大家见面，欢迎大家试用、反馈。首先上线的是视频发布的部分，后续还会增加图片，活动等场景。通过智能识别的项目，我们相信一定可以不断提升闲鱼商品结构化率。</p><p>我们畅想的未来发布是一个高度智能化的发布。基于摄像头对商品做深层次理解，系统直接给出商品信息，结构化标签，推荐价格，甚至新旧程度等发布要素。用户所要做的仅仅就是一个确认。今天的智能发布只是我们伟大征程的第一步，我们会向着目标不断努力！</p><h2 id="文章来源" tabindex="-1">文章来源 <a class="header-anchor" href="#文章来源" aria-label="Permalink to &quot;文章来源&quot;">​</a></h2><p>转载说明:</p><ul><li>版权声明：本文为CSDN博主「闲鱼技术」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。</li><li>原文链接：<a href="https://blog.csdn.net/weixin%5C_38912070/article/details/99518819" target="_blank" rel="noreferrer">https://blog.csdn.net/weixin\\_38912070/article/details/99518819</a></li></ul><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>',68)]))}const k=e(d,[["render",u]]);export{f as __pageData,k as default};
