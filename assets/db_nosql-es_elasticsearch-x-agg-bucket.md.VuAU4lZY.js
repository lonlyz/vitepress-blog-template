import{_ as a}from"./chunks/es-agg-bucket-1.oty1uWhV.js";import{_ as n,c as p,ai as t,o as e}from"./chunks/framework.BrYByd3F.js";const o="/vitepress-blog-template/images/db/es/es-agg-bucket-2.png",l="/vitepress-blog-template/images/db/es/es-agg-bucket-3.png",i="/vitepress-blog-template/images/db/es/es-agg-bucket-4.png",u="/vitepress-blog-template/images/db/es/es-agg-bucket-5.png",c="/vitepress-blog-template/images/db/es/es-agg-bucket-6.png",q="/vitepress-blog-template/images/db/es/es-agg-bucket-7.png",r="/vitepress-blog-template/images/db/es/es-agg-bucket-8.png",g="/vitepress-blog-template/images/db/es/es-agg-bucket-9.png",d="/vitepress-blog-template/images/db/es/es-agg-bucket-10.png",h="/vitepress-blog-template/images/db/es/es-agg-bucket-11.png",b="/vitepress-blog-template/images/db/es/es-agg-bucket-33.png",m="/vitepress-blog-template/images/db/es/es-agg-bucket-12.png",k="/vitepress-blog-template/images/db/es/es-agg-bucket-34.png",T=JSON.parse('{"title":"ES详解 - 聚合：聚合查询之Bucket聚合详解","description":"","frontmatter":{},"headers":[],"relativePath":"db/nosql-es/elasticsearch-x-agg-bucket.md","filePath":"db/nosql-es/elasticsearch-x-agg-bucket.md","lastUpdated":1737706346000}'),v={name:"db/nosql-es/elasticsearch-x-agg-bucket.md"};function _(f,s,y,x,C,P){return e(),p("div",null,s[0]||(s[0]=[t(`<h1 id="es详解-聚合-聚合查询之bucket聚合详解" tabindex="-1">ES详解 - 聚合：聚合查询之Bucket聚合详解 <a class="header-anchor" href="#es详解-聚合-聚合查询之bucket聚合详解" aria-label="Permalink to &quot;ES详解 - 聚合：聚合查询之Bucket聚合详解&quot;">​</a></h1><blockquote><p>除了查询之外，最常用的聚合了，ElasticSearch提供了三种聚合方式： <strong>桶聚合（Bucket Aggregation)</strong>，<strong>指标聚合（Metric Aggregation)</strong> 和 <strong>管道聚合（Pipline Aggregation)</strong>。本文主要讲讲<strong>桶聚合（Bucket Aggregation)</strong>。@pdai</p></blockquote><h2 id="聚合的引入" tabindex="-1">聚合的引入 <a class="header-anchor" href="#聚合的引入" aria-label="Permalink to &quot;聚合的引入&quot;">​</a></h2><p>我们在SQL结果中常有：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT COUNT(color) </span></span>
<span class="line"><span>FROM table</span></span>
<span class="line"><span>GROUP BY color</span></span></code></pre></div><p>ElasticSearch中<strong>桶</strong>在概念上类似于 SQL 的分组（<code>GROUP BY</code>），而<strong>指标</strong>则类似于 <code>COUNT()</code> 、 <code>SUM()</code> 、 <code>MAX()</code> 等统计方法。</p><p>进而引入了两个概念：</p><ul><li><strong>桶（Buckets）</strong> 满足特定条件的文档的集合</li><li><strong>指标（Metrics）</strong> 对桶内的文档进行统计计算</li></ul><p>所以ElasticSearch包含3种聚合（Aggregation)方式</p><ul><li><strong>桶聚合（Bucket Aggregation)</strong> - 本文中详解</li><li><strong>指标聚合（Metric Aggregation)</strong> - 下文中讲解</li><li><strong>管道聚合（Pipline Aggregation)</strong> - 再下一篇讲解 <ul><li>聚合管道化，简单而言就是上一个聚合的结果成为下个聚合的输入；</li></ul></li></ul><p>（PS:指标聚合和桶聚合很多情况下是组合在一起使用的，其实你也可以看到，桶聚合本质上是一种特殊的指标聚合，它的聚合指标就是数据的条数count)</p><h2 id="如何理解bucket聚合" tabindex="-1">如何理解Bucket聚合 <a class="header-anchor" href="#如何理解bucket聚合" aria-label="Permalink to &quot;如何理解Bucket聚合&quot;">​</a></h2><blockquote><p>如果你直接去看文档，大概有几十种：</p></blockquote><p><img src="`+o+'" alt=""></p><p>要么你需要花大量时间学习，要么你已经迷失或者即将迷失在知识点中...</p><p>所以你需要稍微<strong>站在设计者的角度思考</strong>下，不难发现设计上大概分为三类（当然有些是第二和第三类的融合）</p><p><img src="'+a+`" alt=""></p><p>（图中并没有全部列出内容，因为图要表达的意图我觉得还是比较清楚的，这就够了；有了这种思虑和认知，会大大提升你的认知效率。）</p><h2 id="按知识点学习聚合" tabindex="-1">按知识点学习聚合 <a class="header-anchor" href="#按知识点学习聚合" aria-label="Permalink to &quot;按知识点学习聚合&quot;">​</a></h2><blockquote><p>我们先按照官方权威指南中的一个例子，学习Aggregation中的知识点。</p></blockquote><h3 id="准备数据" tabindex="-1">准备数据 <a class="header-anchor" href="#准备数据" aria-label="Permalink to &quot;准备数据&quot;">​</a></h3><p>让我们先看一个例子。我们将会创建一些对汽车经销商有用的聚合，数据是关于汽车交易的信息：车型、制造商、售价、何时被出售等。</p><p>首先我们批量索引一些数据：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>POST /test-agg-cars/_bulk</span></span>
<span class="line"><span>{ &quot;index&quot;: {}}</span></span>
<span class="line"><span>{ &quot;price&quot; : 10000, &quot;color&quot; : &quot;red&quot;, &quot;make&quot; : &quot;honda&quot;, &quot;sold&quot; : &quot;2014-10-28&quot; }</span></span>
<span class="line"><span>{ &quot;index&quot;: {}}</span></span>
<span class="line"><span>{ &quot;price&quot; : 20000, &quot;color&quot; : &quot;red&quot;, &quot;make&quot; : &quot;honda&quot;, &quot;sold&quot; : &quot;2014-11-05&quot; }</span></span>
<span class="line"><span>{ &quot;index&quot;: {}}</span></span>
<span class="line"><span>{ &quot;price&quot; : 30000, &quot;color&quot; : &quot;green&quot;, &quot;make&quot; : &quot;ford&quot;, &quot;sold&quot; : &quot;2014-05-18&quot; }</span></span>
<span class="line"><span>{ &quot;index&quot;: {}}</span></span>
<span class="line"><span>{ &quot;price&quot; : 15000, &quot;color&quot; : &quot;blue&quot;, &quot;make&quot; : &quot;toyota&quot;, &quot;sold&quot; : &quot;2014-07-02&quot; }</span></span>
<span class="line"><span>{ &quot;index&quot;: {}}</span></span>
<span class="line"><span>{ &quot;price&quot; : 12000, &quot;color&quot; : &quot;green&quot;, &quot;make&quot; : &quot;toyota&quot;, &quot;sold&quot; : &quot;2014-08-19&quot; }</span></span>
<span class="line"><span>{ &quot;index&quot;: {}}</span></span>
<span class="line"><span>{ &quot;price&quot; : 20000, &quot;color&quot; : &quot;red&quot;, &quot;make&quot; : &quot;honda&quot;, &quot;sold&quot; : &quot;2014-11-05&quot; }</span></span>
<span class="line"><span>{ &quot;index&quot;: {}}</span></span>
<span class="line"><span>{ &quot;price&quot; : 80000, &quot;color&quot; : &quot;red&quot;, &quot;make&quot; : &quot;bmw&quot;, &quot;sold&quot; : &quot;2014-01-01&quot; }</span></span>
<span class="line"><span>{ &quot;index&quot;: {}}</span></span>
<span class="line"><span>{ &quot;price&quot; : 25000, &quot;color&quot; : &quot;blue&quot;, &quot;make&quot; : &quot;ford&quot;, &quot;sold&quot; : &quot;2014-02-12&quot; }</span></span></code></pre></div><h3 id="标准的聚合" tabindex="-1">标准的聚合 <a class="header-anchor" href="#标准的聚合" aria-label="Permalink to &quot;标准的聚合&quot;">​</a></h3><p>有了数据，开始构建我们的第一个聚合。汽车经销商可能会想知道哪个颜色的汽车销量最好，用聚合可以轻易得到结果，用 terms 桶操作：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GET /test-agg-cars/_search</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    &quot;size&quot; : 0,</span></span>
<span class="line"><span>    &quot;aggs&quot; : { </span></span>
<span class="line"><span>        &quot;popular_colors&quot; : { </span></span>
<span class="line"><span>            &quot;terms&quot; : { </span></span>
<span class="line"><span>              &quot;field&quot; : &quot;color.keyword&quot;</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><ol><li>聚合操作被置于顶层参数 aggs 之下（如果你愿意，完整形式 aggregations 同样有效）。</li><li>然后，可以为聚合指定一个我们想要名称，本例中是： popular_colors 。</li><li>最后，定义单个桶的类型 terms 。</li></ol><p>结果如下：</p><p><img src="`+l+`" alt=""></p><ol><li>因为我们设置了 size 参数，所以不会有 hits 搜索结果返回。</li><li>popular_colors 聚合是作为 aggregations 字段的一部分被返回的。</li><li>每个桶的 key 都与 color 字段里找到的唯一词对应。它总会包含 doc_count 字段，告诉我们包含该词项的文档数量。</li><li>每个桶的数量代表该颜色的文档数量。</li></ol><h3 id="多个聚合" tabindex="-1">多个聚合 <a class="header-anchor" href="#多个聚合" aria-label="Permalink to &quot;多个聚合&quot;">​</a></h3><p>同时计算两种桶的结果：对color和对make。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GET /test-agg-cars/_search</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    &quot;size&quot; : 0,</span></span>
<span class="line"><span>    &quot;aggs&quot; : { </span></span>
<span class="line"><span>        &quot;popular_colors&quot; : { </span></span>
<span class="line"><span>            &quot;terms&quot; : { </span></span>
<span class="line"><span>              &quot;field&quot; : &quot;color.keyword&quot;</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        &quot;make_by&quot; : { </span></span>
<span class="line"><span>            &quot;terms&quot; : { </span></span>
<span class="line"><span>              &quot;field&quot; : &quot;make.keyword&quot;</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>结果如下：</p><p><img src="`+i+`" alt=""></p><h3 id="聚合的嵌套" tabindex="-1">聚合的嵌套 <a class="header-anchor" href="#聚合的嵌套" aria-label="Permalink to &quot;聚合的嵌套&quot;">​</a></h3><p>这个新的聚合层让我们可以将 avg 度量嵌套置于 terms 桶内。实际上，这就为每个颜色生成了平均价格。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GET /test-agg-cars/_search</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>   &quot;size&quot; : 0,</span></span>
<span class="line"><span>   &quot;aggs&quot;: {</span></span>
<span class="line"><span>      &quot;colors&quot;: {</span></span>
<span class="line"><span>         &quot;terms&quot;: {</span></span>
<span class="line"><span>            &quot;field&quot;: &quot;color.keyword&quot;</span></span>
<span class="line"><span>         },</span></span>
<span class="line"><span>         &quot;aggs&quot;: { </span></span>
<span class="line"><span>            &quot;avg_price&quot;: { </span></span>
<span class="line"><span>               &quot;avg&quot;: {</span></span>
<span class="line"><span>                  &quot;field&quot;: &quot;price&quot; </span></span>
<span class="line"><span>               }</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>         }</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>   }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>结果如下：</p><p><img src="`+u+`" alt=""></p><p>正如 颜色 的例子，我们需要给度量起一个名字（ avg_price ）这样可以稍后根据名字获取它的值。最后，我们指定度量本身（ avg ）以及我们想要计算平均值的字段（ price ）</p><h3 id="动态脚本的聚合" tabindex="-1">动态脚本的聚合 <a class="header-anchor" href="#动态脚本的聚合" aria-label="Permalink to &quot;动态脚本的聚合&quot;">​</a></h3><p>这个例子告诉你，ElasticSearch还支持一些基于脚本（生成运行时的字段）的复杂的动态聚合。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GET /test-agg-cars/_search</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;runtime_mappings&quot;: {</span></span>
<span class="line"><span>    &quot;make.length&quot;: {</span></span>
<span class="line"><span>      &quot;type&quot;: &quot;long&quot;,</span></span>
<span class="line"><span>      &quot;script&quot;: &quot;emit(doc[&#39;make.keyword&#39;].value.length())&quot;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  &quot;size&quot; : 0,</span></span>
<span class="line"><span>  &quot;aggs&quot;: {</span></span>
<span class="line"><span>    &quot;make_length&quot;: {</span></span>
<span class="line"><span>      &quot;histogram&quot;: {</span></span>
<span class="line"><span>        &quot;interval&quot;: 1,</span></span>
<span class="line"><span>        &quot;field&quot;: &quot;make.length&quot;</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>结果如下：</p><p><img src="`+c+`" alt=""></p><p>histogram可以参考后文内容。</p><h2 id="按分类学习bucket聚合" tabindex="-1">按分类学习Bucket聚合 <a class="header-anchor" href="#按分类学习bucket聚合" aria-label="Permalink to &quot;按分类学习Bucket聚合&quot;">​</a></h2><blockquote><p>我们在具体学习时，也无需学习每一个点，基于上面图的认知，我们只需用20%的时间学习最为常用的80%功能即可，其它查查文档而已。@pdai</p></blockquote><h3 id="前置条件的过滤-filter" tabindex="-1">前置条件的过滤：filter <a class="header-anchor" href="#前置条件的过滤-filter" aria-label="Permalink to &quot;前置条件的过滤：filter&quot;">​</a></h3><p>在当前文档集上下文中定义与指定过滤器(Filter)匹配的所有文档的单个存储桶。通常，这将用于将当前聚合上下文缩小到一组特定的文档。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GET /test-agg-cars/_search</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;size&quot;: 0,</span></span>
<span class="line"><span>  &quot;aggs&quot;: {</span></span>
<span class="line"><span>    &quot;make_by&quot;: {</span></span>
<span class="line"><span>      &quot;filter&quot;: { &quot;term&quot;: { &quot;type&quot;: &quot;honda&quot; } },</span></span>
<span class="line"><span>      &quot;aggs&quot;: {</span></span>
<span class="line"><span>        &quot;avg_price&quot;: { &quot;avg&quot;: { &quot;field&quot;: &quot;price&quot; } }</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>结果如下：</p><p><img src="`+q+`" alt=""></p><h3 id="对filter进行分组聚合-filters" tabindex="-1">对filter进行分组聚合：filters <a class="header-anchor" href="#对filter进行分组聚合-filters" aria-label="Permalink to &quot;对filter进行分组聚合：filters&quot;">​</a></h3><p>设计一个新的例子, 日志系统中，每条日志都是在文本中，包含warning/info等信息。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>PUT /test-agg-logs/_bulk?refresh</span></span>
<span class="line"><span>{ &quot;index&quot; : { &quot;_id&quot; : 1 } }</span></span>
<span class="line"><span>{ &quot;body&quot; : &quot;warning: page could not be rendered&quot; }</span></span>
<span class="line"><span>{ &quot;index&quot; : { &quot;_id&quot; : 2 } }</span></span>
<span class="line"><span>{ &quot;body&quot; : &quot;authentication error&quot; }</span></span>
<span class="line"><span>{ &quot;index&quot; : { &quot;_id&quot; : 3 } }</span></span>
<span class="line"><span>{ &quot;body&quot; : &quot;warning: connection timed out&quot; }</span></span>
<span class="line"><span>{ &quot;index&quot; : { &quot;_id&quot; : 4 } }</span></span>
<span class="line"><span>{ &quot;body&quot; : &quot;info: hello pdai&quot; }</span></span></code></pre></div><p>我们需要对包含不同日志类型的日志进行分组，这就需要filters:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GET /test-agg-logs/_search</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;size&quot;: 0,</span></span>
<span class="line"><span>  &quot;aggs&quot; : {</span></span>
<span class="line"><span>    &quot;messages&quot; : {</span></span>
<span class="line"><span>      &quot;filters&quot; : {</span></span>
<span class="line"><span>        &quot;other_bucket_key&quot;: &quot;other_messages&quot;,</span></span>
<span class="line"><span>        &quot;filters&quot; : {</span></span>
<span class="line"><span>          &quot;infos&quot; :   { &quot;match&quot; : { &quot;body&quot; : &quot;info&quot;   }},</span></span>
<span class="line"><span>          &quot;warnings&quot; : { &quot;match&quot; : { &quot;body&quot; : &quot;warning&quot; }}</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>结果如下：</p><p><img src="`+r+`" alt=""></p><h3 id="对number类型聚合-range" tabindex="-1">对number类型聚合：Range <a class="header-anchor" href="#对number类型聚合-range" aria-label="Permalink to &quot;对number类型聚合：Range&quot;">​</a></h3><p>基于多桶值源的聚合，使用户能够定义一组范围-每个范围代表一个桶。在聚合过程中，将从每个存储区范围中检查从每个文档中提取的值，并“存储”相关/匹配的文档。请注意，此聚合包括from值，但不包括to每个范围的值。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GET /test-agg-cars/_search</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;size&quot;: 0,</span></span>
<span class="line"><span>  &quot;aggs&quot;: {</span></span>
<span class="line"><span>    &quot;price_ranges&quot;: {</span></span>
<span class="line"><span>      &quot;range&quot;: {</span></span>
<span class="line"><span>        &quot;field&quot;: &quot;price&quot;,</span></span>
<span class="line"><span>        &quot;ranges&quot;: [</span></span>
<span class="line"><span>          { &quot;to&quot;: 20000 },</span></span>
<span class="line"><span>          { &quot;from&quot;: 20000, &quot;to&quot;: 40000 },</span></span>
<span class="line"><span>          { &quot;from&quot;: 40000 }</span></span>
<span class="line"><span>        ]</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>结果如下：</p><p><img src="`+g+`" alt=""></p><h3 id="对ip类型聚合-ip-range" tabindex="-1">对IP类型聚合：IP Range <a class="header-anchor" href="#对ip类型聚合-ip-range" aria-label="Permalink to &quot;对IP类型聚合：IP Range&quot;">​</a></h3><p>专用于IP值的范围聚合。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GET /ip_addresses/_search</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;size&quot;: 10,</span></span>
<span class="line"><span>  &quot;aggs&quot;: {</span></span>
<span class="line"><span>    &quot;ip_ranges&quot;: {</span></span>
<span class="line"><span>      &quot;ip_range&quot;: {</span></span>
<span class="line"><span>        &quot;field&quot;: &quot;ip&quot;,</span></span>
<span class="line"><span>        &quot;ranges&quot;: [</span></span>
<span class="line"><span>          { &quot;to&quot;: &quot;10.0.0.5&quot; },</span></span>
<span class="line"><span>          { &quot;from&quot;: &quot;10.0.0.5&quot; }</span></span>
<span class="line"><span>        ]</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>返回</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>  ...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  &quot;aggregations&quot;: {</span></span>
<span class="line"><span>    &quot;ip_ranges&quot;: {</span></span>
<span class="line"><span>      &quot;buckets&quot;: [</span></span>
<span class="line"><span>        {</span></span>
<span class="line"><span>          &quot;key&quot;: &quot;*-10.0.0.5&quot;,</span></span>
<span class="line"><span>          &quot;to&quot;: &quot;10.0.0.5&quot;,</span></span>
<span class="line"><span>          &quot;doc_count&quot;: 10</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        {</span></span>
<span class="line"><span>          &quot;key&quot;: &quot;10.0.0.5-*&quot;,</span></span>
<span class="line"><span>          &quot;from&quot;: &quot;10.0.0.5&quot;,</span></span>
<span class="line"><span>          &quot;doc_count&quot;: 260</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>      ]</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li><strong>CIDR Mask分组</strong></li></ul><p>此外还可以用CIDR Mask分组</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GET /ip_addresses/_search</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;size&quot;: 0,</span></span>
<span class="line"><span>  &quot;aggs&quot;: {</span></span>
<span class="line"><span>    &quot;ip_ranges&quot;: {</span></span>
<span class="line"><span>      &quot;ip_range&quot;: {</span></span>
<span class="line"><span>        &quot;field&quot;: &quot;ip&quot;,</span></span>
<span class="line"><span>        &quot;ranges&quot;: [</span></span>
<span class="line"><span>          { &quot;mask&quot;: &quot;10.0.0.0/25&quot; },</span></span>
<span class="line"><span>          { &quot;mask&quot;: &quot;10.0.0.127/25&quot; }</span></span>
<span class="line"><span>        ]</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>返回</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>  ...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  &quot;aggregations&quot;: {</span></span>
<span class="line"><span>    &quot;ip_ranges&quot;: {</span></span>
<span class="line"><span>      &quot;buckets&quot;: [</span></span>
<span class="line"><span>        {</span></span>
<span class="line"><span>          &quot;key&quot;: &quot;10.0.0.0/25&quot;,</span></span>
<span class="line"><span>          &quot;from&quot;: &quot;10.0.0.0&quot;,</span></span>
<span class="line"><span>          &quot;to&quot;: &quot;10.0.0.128&quot;,</span></span>
<span class="line"><span>          &quot;doc_count&quot;: 128</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        {</span></span>
<span class="line"><span>          &quot;key&quot;: &quot;10.0.0.127/25&quot;,</span></span>
<span class="line"><span>          &quot;from&quot;: &quot;10.0.0.0&quot;,</span></span>
<span class="line"><span>          &quot;to&quot;: &quot;10.0.0.128&quot;,</span></span>
<span class="line"><span>          &quot;doc_count&quot;: 128</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>      ]</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li><strong>增加key显示</strong></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GET /ip_addresses/_search</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;size&quot;: 0,</span></span>
<span class="line"><span>  &quot;aggs&quot;: {</span></span>
<span class="line"><span>    &quot;ip_ranges&quot;: {</span></span>
<span class="line"><span>      &quot;ip_range&quot;: {</span></span>
<span class="line"><span>        &quot;field&quot;: &quot;ip&quot;,</span></span>
<span class="line"><span>        &quot;ranges&quot;: [</span></span>
<span class="line"><span>          { &quot;to&quot;: &quot;10.0.0.5&quot; },</span></span>
<span class="line"><span>          { &quot;from&quot;: &quot;10.0.0.5&quot; }</span></span>
<span class="line"><span>        ],</span></span>
<span class="line"><span>        &quot;keyed&quot;: true // here</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>返回</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>  ...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  &quot;aggregations&quot;: {</span></span>
<span class="line"><span>    &quot;ip_ranges&quot;: {</span></span>
<span class="line"><span>      &quot;buckets&quot;: {</span></span>
<span class="line"><span>        &quot;*-10.0.0.5&quot;: {</span></span>
<span class="line"><span>          &quot;to&quot;: &quot;10.0.0.5&quot;,</span></span>
<span class="line"><span>          &quot;doc_count&quot;: 10</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        &quot;10.0.0.5-*&quot;: {</span></span>
<span class="line"><span>          &quot;from&quot;: &quot;10.0.0.5&quot;,</span></span>
<span class="line"><span>          &quot;doc_count&quot;: 260</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li><strong>自定义key显示</strong></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GET /ip_addresses/_search</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;size&quot;: 0,</span></span>
<span class="line"><span>  &quot;aggs&quot;: {</span></span>
<span class="line"><span>    &quot;ip_ranges&quot;: {</span></span>
<span class="line"><span>      &quot;ip_range&quot;: {</span></span>
<span class="line"><span>        &quot;field&quot;: &quot;ip&quot;,</span></span>
<span class="line"><span>        &quot;ranges&quot;: [</span></span>
<span class="line"><span>          { &quot;key&quot;: &quot;infinity&quot;, &quot;to&quot;: &quot;10.0.0.5&quot; },</span></span>
<span class="line"><span>          { &quot;key&quot;: &quot;and-beyond&quot;, &quot;from&quot;: &quot;10.0.0.5&quot; }</span></span>
<span class="line"><span>        ],</span></span>
<span class="line"><span>        &quot;keyed&quot;: true</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>返回</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>  ...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  &quot;aggregations&quot;: {</span></span>
<span class="line"><span>    &quot;ip_ranges&quot;: {</span></span>
<span class="line"><span>      &quot;buckets&quot;: {</span></span>
<span class="line"><span>        &quot;infinity&quot;: {</span></span>
<span class="line"><span>          &quot;to&quot;: &quot;10.0.0.5&quot;,</span></span>
<span class="line"><span>          &quot;doc_count&quot;: 10</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        &quot;and-beyond&quot;: {</span></span>
<span class="line"><span>          &quot;from&quot;: &quot;10.0.0.5&quot;,</span></span>
<span class="line"><span>          &quot;doc_count&quot;: 260</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="对日期类型聚合-date-range" tabindex="-1">对日期类型聚合：Date Range <a class="header-anchor" href="#对日期类型聚合-date-range" aria-label="Permalink to &quot;对日期类型聚合：Date Range&quot;">​</a></h3><p>专用于日期值的范围聚合。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GET /test-agg-cars/_search</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;size&quot;: 0,</span></span>
<span class="line"><span>  &quot;aggs&quot;: {</span></span>
<span class="line"><span>    &quot;range&quot;: {</span></span>
<span class="line"><span>      &quot;date_range&quot;: {</span></span>
<span class="line"><span>        &quot;field&quot;: &quot;sold&quot;,</span></span>
<span class="line"><span>        &quot;format&quot;: &quot;yyyy-MM&quot;,</span></span>
<span class="line"><span>        &quot;ranges&quot;: [</span></span>
<span class="line"><span>          { &quot;from&quot;: &quot;2014-01-01&quot; },  </span></span>
<span class="line"><span>          { &quot;to&quot;: &quot;2014-12-31&quot; } </span></span>
<span class="line"><span>        ]</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>结果如下：</p><p><img src="`+d+`" alt=""></p><p>此聚合与Range聚合之间的主要区别在于 from和to值可以在<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.12/search-aggregations-bucket-daterange-aggregation.html#date-format-pattern" target="_blank" rel="noreferrer">Date Math表达式在新窗口打开</a>中表示，并且还可以指定日期格式，通过该日期格式将返回from and to响应字段。请注意，此聚合包括from值，但<strong>不包括to每个范围的值</strong>。</p><h3 id="对柱状图功能-histrogram" tabindex="-1">对柱状图功能：Histrogram <a class="header-anchor" href="#对柱状图功能-histrogram" aria-label="Permalink to &quot;对柱状图功能：Histrogram&quot;">​</a></h3><p>直方图 histogram 本质上是就是为柱状图功能设计的。</p><p>创建直方图需要指定一个区间，如果我们要为售价创建一个直方图，可以将间隔设为 20,000。这样做将会在每个 $20,000 档创建一个新桶，然后文档会被分到对应的桶中。</p><p>对于仪表盘来说，我们希望知道每个售价区间内汽车的销量。我们还会想知道每个售价区间内汽车所带来的收入，可以通过对每个区间内已售汽车的售价求和得到。</p><p>可以用 histogram 和一个嵌套的 sum 度量得到我们想要的答案：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GET /test-agg-cars/_search</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>   &quot;size&quot; : 0,</span></span>
<span class="line"><span>   &quot;aggs&quot;:{</span></span>
<span class="line"><span>      &quot;price&quot;:{</span></span>
<span class="line"><span>         &quot;histogram&quot;:{ </span></span>
<span class="line"><span>            &quot;field&quot;: &quot;price.keyword&quot;,</span></span>
<span class="line"><span>            &quot;interval&quot;: 20000</span></span>
<span class="line"><span>         },</span></span>
<span class="line"><span>         &quot;aggs&quot;:{</span></span>
<span class="line"><span>            &quot;revenue&quot;: {</span></span>
<span class="line"><span>               &quot;sum&quot;: { </span></span>
<span class="line"><span>                 &quot;field&quot; : &quot;price&quot;</span></span>
<span class="line"><span>               }</span></span>
<span class="line"><span>             }</span></span>
<span class="line"><span>         }</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>   }</span></span>
<span class="line"><span>}</span></span></code></pre></div><ol><li>histogram 桶要求两个参数：一个数值字段以及一个定义桶大小间隔。</li><li>sum 度量嵌套在每个售价区间内，用来显示每个区间内的总收入。</li></ol><p>如我们所见，查询是围绕 price 聚合构建的，它包含一个 histogram 桶。它要求字段的类型必须是数值型的同时需要设定分组的间隔范围。 间隔设置为 20,000 意味着我们将会得到如 [0-19999, 20000-39999, ...] 这样的区间。</p><p>接着，我们在直方图内定义嵌套的度量，这个 sum 度量，它会对落入某一具体售价区间的文档中 price 字段的值进行求和。 这可以为我们提供每个售价区间的收入，从而可以发现到底是普通家用车赚钱还是奢侈车赚钱。</p><p>响应结果如下：</p><p><img src="`+h+'" alt=""></p><p>结果很容易理解，不过应该注意到直方图的键值是区间的下限。键 0 代表区间 0-19，999 ，键 20000 代表区间 20，000-39，999 ，等等。</p><p><img src="'+b+`" alt=""></p><p>当然，我们可以为任何聚合输出的分类和统计结果创建条形图，而不只是 直方图 桶。让我们以最受欢迎 10 种汽车以及它们的平均售价、标准差这些信息创建一个条形图。 我们会用到 terms 桶和 extended_stats 度量：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GET /test-agg-cars/_search</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;size&quot; : 0,</span></span>
<span class="line"><span>  &quot;aggs&quot;: {</span></span>
<span class="line"><span>    &quot;makes&quot;: {</span></span>
<span class="line"><span>      &quot;terms&quot;: {</span></span>
<span class="line"><span>        &quot;field&quot;: &quot;make.keyword&quot;,</span></span>
<span class="line"><span>        &quot;size&quot;: 10</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>      &quot;aggs&quot;: {</span></span>
<span class="line"><span>        &quot;stats&quot;: {</span></span>
<span class="line"><span>          &quot;extended_stats&quot;: {</span></span>
<span class="line"><span>            &quot;field&quot;: &quot;price&quot;</span></span>
<span class="line"><span>          }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>上述代码会按受欢迎度返回制造商列表以及它们各自的统计信息。我们对其中的 stats.avg 、 stats.count 和 stats.std_deviation 信息特别感兴趣，并用 它们计算出标准差：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>std_err = std_deviation / count</span></span></code></pre></div><p><img src="`+m+'" alt=""></p><p>对应报表：</p><p><img src="'+k+'" alt=""></p><h2 id="参考文章" tabindex="-1">参考文章 <a class="header-anchor" href="#参考文章" aria-label="Permalink to &quot;参考文章&quot;">​</a></h2><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket.html" target="_blank" rel="noreferrer">https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket.html</a></p><p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/%5C_aggregation%5C_test%5C_drive.html" target="_blank" rel="noreferrer">https://www.elastic.co/guide/cn/elasticsearch/guide/current/\\_aggregation\\_test\\_drive.html</a></p><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>',115)]))}const S=n(v,[["render",_]]);export{T as __pageData,S as default};
