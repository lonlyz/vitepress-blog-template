import{_ as a,a as n}from"./chunks/tomcat-x-pipline-5.qZWTzKkM.js";import{_ as p,c as e,ai as t,o as l}from"./chunks/framework.BrYByd3F.js";const i="/vitepress-blog-template/images/db/es/es-agg-pipeline-1.png",b=JSON.parse('{"title":"ES详解 - 聚合：聚合查询之Pipline聚合详解","description":"","frontmatter":{},"headers":[],"relativePath":"db/nosql-es/elasticsearch-x-agg-pipeline.md","filePath":"db/nosql-es/elasticsearch-x-agg-pipeline.md","lastUpdated":1737706346000}'),o={name:"db/nosql-es/elasticsearch-x-agg-pipeline.md"};function u(c,s,q,r,h,g){return l(),e("div",null,s[0]||(s[0]=[t('<h1 id="es详解-聚合-聚合查询之pipline聚合详解" tabindex="-1">ES详解 - 聚合：聚合查询之Pipline聚合详解 <a class="header-anchor" href="#es详解-聚合-聚合查询之pipline聚合详解" aria-label="Permalink to &quot;ES详解 - 聚合：聚合查询之Pipline聚合详解&quot;">​</a></h1><blockquote><p>前文主要讲了 ElasticSearch提供的三种聚合方式之指标聚合（Metric Aggregation)，本文主要讲讲管道聚合（Pipeline Aggregation)。简单而言就是让上一步的聚合结果成为下一个聚合的输入，这就是管道。@pdai</p></blockquote><h2 id="如何理解pipeline聚合" tabindex="-1">如何理解pipeline聚合 <a class="header-anchor" href="#如何理解pipeline聚合" aria-label="Permalink to &quot;如何理解pipeline聚合&quot;">​</a></h2><blockquote><p>如何理解管道聚合呢？最重要的是要站在设计者角度看这个功能的要实现的目的：让上一步的聚合结果成为下一个聚合的输入，这就是管道。</p></blockquote><h3 id="管道机制的常见场景" tabindex="-1">管道机制的常见场景 <a class="header-anchor" href="#管道机制的常见场景" aria-label="Permalink to &quot;管道机制的常见场景&quot;">​</a></h3><blockquote><p>首先回顾下，我们之前在<a href="https://pdai.tech/md/framework/tomcat/tomcat-x-container-pipline.html#%E7%9F%A5%E8%AF%86%E5%87%86%E5%A4%87" target="_blank" rel="noreferrer">Tomcat管道机制</a>中向你介绍的常见的管道机制设计中的应用场景。</p></blockquote><h4 id="责任链模式" tabindex="-1">责任链模式 <a class="header-anchor" href="#责任链模式" aria-label="Permalink to &quot;责任链模式&quot;">​</a></h4><p>管道机制在设计模式上属于责任链模式，如果你不理解，请参看如下文章：</p><p><a href="https://pdai.tech/md/dev-spec/pattern/15_chain.html" target="_blank" rel="noreferrer">责任链模式(Chain of responsibility pattern)</a>: 通过责任链模式, 你可以为某个请求创建一个对象链. 每个对象依序检查此请求并对其进行处理或者将它传给链中的下一个对象。</p><h4 id="filterchain" tabindex="-1">FilterChain <a class="header-anchor" href="#filterchain" aria-label="Permalink to &quot;FilterChain&quot;">​</a></h4><p>在软件开发的常接触的责任链模式是FilterChain，它体现在很多软件设计中：</p><ul><li><strong>比如Spring Security框架中</strong></li></ul><p><img src="'+a+'" alt=""></p><ul><li><strong>比如HttpServletRequest处理的过滤器中</strong></li></ul><p>当一个request过来的时候，需要对这个request做一系列的加工，使用责任链模式可以使每个加工组件化，减少耦合。也可以使用在当一个request过来的时候，需要找到合适的加工方式。当一个加工方式不适合这个request的时候，传递到下一个加工方法，该加工方式再尝试对request加工。</p><p>网上找了图，这里我们后文将通过Tomcat请求处理向你阐述。</p><p><img src="'+n+'" alt=""></p><h3 id="elasticsearch设计管道机制" tabindex="-1">ElasticSearch设计管道机制 <a class="header-anchor" href="#elasticsearch设计管道机制" aria-label="Permalink to &quot;ElasticSearch设计管道机制&quot;">​</a></h3><p>简单而言：让上一步的聚合结果成为下一个聚合的输入，这就是管道。</p><p>接下来，无非就是对不同类型的聚合有接口的支撑，比如：</p><p><img src="'+i+`" alt=""></p><blockquote><p>第一个维度：管道聚合有很多不同<strong>类型</strong>，每种类型都与其他聚合计算不同的信息，但是可以将这些类型分为两类：</p></blockquote><ul><li><strong>父级</strong> 父级聚合的输出提供了一组管道聚合，它可以计算新的存储桶或新的聚合以添加到现有存储桶中。</li><li><strong>兄弟</strong> 同级聚合的输出提供的管道聚合，并且能够计算与该同级聚合处于同一级别的新聚合。</li></ul><blockquote><p>第二个维度：根据<strong>功能设计</strong>的意图</p></blockquote><p>比如前置聚合可能是Bucket聚合，后置的可能是基于Metric聚合，那么它就可以成为一类管道</p><p>进而引出了：<code>xxx bucket</code>(是不是很容易理解了 @pdai)</p><ul><li><strong>Bucket聚合 -&gt; Metric聚合</strong>： bucket聚合的结果，成为下一步metric聚合的输入 <ul><li>Average bucket</li><li>Min bucket</li><li>Max bucket</li><li>Sum bucket</li><li>Stats bucket</li><li>Extended stats bucket</li></ul></li></ul><p>对构建体系而言，理解上面的已经够了，其它的类型不过是锦上添花而言。</p><h2 id="一些例子" tabindex="-1">一些例子 <a class="header-anchor" href="#一些例子" aria-label="Permalink to &quot;一些例子&quot;">​</a></h2><blockquote><p>这里我们通过几个简单的例子看看即可，具体如果需要使用看看文档即可。@pdai</p></blockquote><h3 id="average-bucket-聚合" tabindex="-1">Average bucket 聚合 <a class="header-anchor" href="#average-bucket-聚合" aria-label="Permalink to &quot;Average bucket 聚合&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>POST _search</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;size&quot;: 0,</span></span>
<span class="line"><span>  &quot;aggs&quot;: {</span></span>
<span class="line"><span>    &quot;sales_per_month&quot;: {</span></span>
<span class="line"><span>      &quot;date_histogram&quot;: {</span></span>
<span class="line"><span>        &quot;field&quot;: &quot;date&quot;,</span></span>
<span class="line"><span>        &quot;calendar_interval&quot;: &quot;month&quot;</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>      &quot;aggs&quot;: {</span></span>
<span class="line"><span>        &quot;sales&quot;: {</span></span>
<span class="line"><span>          &quot;sum&quot;: {</span></span>
<span class="line"><span>            &quot;field&quot;: &quot;price&quot;</span></span>
<span class="line"><span>          }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    &quot;avg_monthly_sales&quot;: {</span></span>
<span class="line"><span>// tag::avg-bucket-agg-syntax[]               </span></span>
<span class="line"><span>      &quot;avg_bucket&quot;: {</span></span>
<span class="line"><span>        &quot;buckets_path&quot;: &quot;sales_per_month&gt;sales&quot;,</span></span>
<span class="line"><span>        &quot;gap_policy&quot;: &quot;skip&quot;,</span></span>
<span class="line"><span>        &quot;format&quot;: &quot;#,##0.00;(#,##0.00)&quot;</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>// end::avg-bucket-agg-syntax[]               </span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li>嵌套的bucket聚合：聚合出按月价格的直方图</li><li>Metic聚合：对上面的聚合再求平均值。</li></ul><p><strong>字段类型</strong>：</p><ul><li>buckets_path：指定聚合的名称，支持多级嵌套聚合。</li><li>gap_policy 当管道聚合遇到不存在的值，有点类似于term等聚合的(missing)时所采取的策略，可选择值为：skip、insert_zeros。</li><li>skip：此选项将丢失的数据视为bucket不存在。它将跳过桶并使用下一个可用值继续计算。</li><li>format 用于格式化聚合桶的输出(key)。</li></ul><p>输出结果如下</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;took&quot;: 11,</span></span>
<span class="line"><span>  &quot;timed_out&quot;: false,</span></span>
<span class="line"><span>  &quot;_shards&quot;: ...,</span></span>
<span class="line"><span>  &quot;hits&quot;: ...,</span></span>
<span class="line"><span>  &quot;aggregations&quot;: {</span></span>
<span class="line"><span>    &quot;sales_per_month&quot;: {</span></span>
<span class="line"><span>      &quot;buckets&quot;: [</span></span>
<span class="line"><span>        {</span></span>
<span class="line"><span>          &quot;key_as_string&quot;: &quot;2015/01/01 00:00:00&quot;,</span></span>
<span class="line"><span>          &quot;key&quot;: 1420070400000,</span></span>
<span class="line"><span>          &quot;doc_count&quot;: 3,</span></span>
<span class="line"><span>          &quot;sales&quot;: {</span></span>
<span class="line"><span>            &quot;value&quot;: 550.0</span></span>
<span class="line"><span>          }</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        {</span></span>
<span class="line"><span>          &quot;key_as_string&quot;: &quot;2015/02/01 00:00:00&quot;,</span></span>
<span class="line"><span>          &quot;key&quot;: 1422748800000,</span></span>
<span class="line"><span>          &quot;doc_count&quot;: 2,</span></span>
<span class="line"><span>          &quot;sales&quot;: {</span></span>
<span class="line"><span>            &quot;value&quot;: 60.0</span></span>
<span class="line"><span>          }</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        {</span></span>
<span class="line"><span>          &quot;key_as_string&quot;: &quot;2015/03/01 00:00:00&quot;,</span></span>
<span class="line"><span>          &quot;key&quot;: 1425168000000,</span></span>
<span class="line"><span>          &quot;doc_count&quot;: 2,</span></span>
<span class="line"><span>          &quot;sales&quot;: {</span></span>
<span class="line"><span>            &quot;value&quot;: 375.0</span></span>
<span class="line"><span>          }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>      ]</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    &quot;avg_monthly_sales&quot;: {</span></span>
<span class="line"><span>      &quot;value&quot;: 328.33333333333333,</span></span>
<span class="line"><span>      &quot;value_as_string&quot;: &quot;328.33&quot;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="stats-bucket-聚合" tabindex="-1">Stats bucket 聚合 <a class="header-anchor" href="#stats-bucket-聚合" aria-label="Permalink to &quot;Stats bucket 聚合&quot;">​</a></h3><p>进一步的stat bucket也很容易理解了</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>POST /sales/_search</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;size&quot;: 0,</span></span>
<span class="line"><span>  &quot;aggs&quot;: {</span></span>
<span class="line"><span>    &quot;sales_per_month&quot;: {</span></span>
<span class="line"><span>      &quot;date_histogram&quot;: {</span></span>
<span class="line"><span>        &quot;field&quot;: &quot;date&quot;,</span></span>
<span class="line"><span>        &quot;calendar_interval&quot;: &quot;month&quot;</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>      &quot;aggs&quot;: {</span></span>
<span class="line"><span>        &quot;sales&quot;: {</span></span>
<span class="line"><span>          &quot;sum&quot;: {</span></span>
<span class="line"><span>            &quot;field&quot;: &quot;price&quot;</span></span>
<span class="line"><span>          }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    &quot;stats_monthly_sales&quot;: {</span></span>
<span class="line"><span>      &quot;stats_bucket&quot;: {</span></span>
<span class="line"><span>        &quot;buckets_path&quot;: &quot;sales_per_month&gt;sales&quot; </span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>返回</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>   &quot;took&quot;: 11,</span></span>
<span class="line"><span>   &quot;timed_out&quot;: false,</span></span>
<span class="line"><span>   &quot;_shards&quot;: ...,</span></span>
<span class="line"><span>   &quot;hits&quot;: ...,</span></span>
<span class="line"><span>   &quot;aggregations&quot;: {</span></span>
<span class="line"><span>      &quot;sales_per_month&quot;: {</span></span>
<span class="line"><span>         &quot;buckets&quot;: [</span></span>
<span class="line"><span>            {</span></span>
<span class="line"><span>               &quot;key_as_string&quot;: &quot;2015/01/01 00:00:00&quot;,</span></span>
<span class="line"><span>               &quot;key&quot;: 1420070400000,</span></span>
<span class="line"><span>               &quot;doc_count&quot;: 3,</span></span>
<span class="line"><span>               &quot;sales&quot;: {</span></span>
<span class="line"><span>                  &quot;value&quot;: 550.0</span></span>
<span class="line"><span>               }</span></span>
<span class="line"><span>            },</span></span>
<span class="line"><span>            {</span></span>
<span class="line"><span>               &quot;key_as_string&quot;: &quot;2015/02/01 00:00:00&quot;,</span></span>
<span class="line"><span>               &quot;key&quot;: 1422748800000,</span></span>
<span class="line"><span>               &quot;doc_count&quot;: 2,</span></span>
<span class="line"><span>               &quot;sales&quot;: {</span></span>
<span class="line"><span>                  &quot;value&quot;: 60.0</span></span>
<span class="line"><span>               }</span></span>
<span class="line"><span>            },</span></span>
<span class="line"><span>            {</span></span>
<span class="line"><span>               &quot;key_as_string&quot;: &quot;2015/03/01 00:00:00&quot;,</span></span>
<span class="line"><span>               &quot;key&quot;: 1425168000000,</span></span>
<span class="line"><span>               &quot;doc_count&quot;: 2,</span></span>
<span class="line"><span>               &quot;sales&quot;: {</span></span>
<span class="line"><span>                  &quot;value&quot;: 375.0</span></span>
<span class="line"><span>               }</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>         ]</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>      &quot;stats_monthly_sales&quot;: {</span></span>
<span class="line"><span>         &quot;count&quot;: 3,</span></span>
<span class="line"><span>         &quot;min&quot;: 60.0,</span></span>
<span class="line"><span>         &quot;max&quot;: 550.0,</span></span>
<span class="line"><span>         &quot;avg&quot;: 328.3333333333333,</span></span>
<span class="line"><span>         &quot;sum&quot;: 985.0</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>   }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="参考文章" tabindex="-1">参考文章 <a class="header-anchor" href="#参考文章" aria-label="Permalink to &quot;参考文章&quot;">​</a></h2><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline.html" target="_blank" rel="noreferrer">https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline.html</a></p><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>`,45)]))}const k=p(o,[["render",u]]);export{b as __pageData,k as default};
