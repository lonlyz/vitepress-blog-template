import{_ as a,c as n,ai as p,o as t}from"./chunks/framework.BrYByd3F.js";const e="/vitepress-blog-template/images/db/es/es-dsl-com-2.png",o="/vitepress-blog-template/images/db/es/es-dsl-com-3.png",l="/vitepress-blog-template/images/db/es/es-dsl-dismax-2.png",i="/vitepress-blog-template/images/db/es/es-dsl-dismax-4.png",c="/vitepress-blog-template/images/db/es/es-dsl-dismax-5.png",u="/vitepress-blog-template/images/db/es/es-dsl-dismax-6.png",q="/vitepress-blog-template/images/db/es/es-dsl-dismax-7.png",r="/vitepress-blog-template/images/db/es/es-dsl-dismax-8.png",d="/vitepress-blog-template/images/db/es/es-dsl-dismax-9.png",h="/vitepress-blog-template/images/db/es/es-dsl-dismax-3.png",b="/vitepress-blog-template/images/db/es/es-dsl-dismax-10.png",w=JSON.parse('{"title":"ES详解 - 查询：DSL查询之复合查询详解","description":"","frontmatter":{},"headers":[],"relativePath":"db/nosql-es/elasticsearch-x-dsl-com.md","filePath":"db/nosql-es/elasticsearch-x-dsl-com.md","lastUpdated":1737706346000}'),m={name:"db/nosql-es/elasticsearch-x-dsl-com.md"};function g(_,s,v,k,y,x){return t(),n("div",null,s[0]||(s[0]=[p(`<h1 id="es详解-查询-dsl查询之复合查询详解" tabindex="-1">ES详解 - 查询：DSL查询之复合查询详解 <a class="header-anchor" href="#es详解-查询-dsl查询之复合查询详解" aria-label="Permalink to &quot;ES详解 - 查询：DSL查询之复合查询详解&quot;">​</a></h1><blockquote><p>在查询中会有多种条件组合的查询，在ElasticSearch中叫复合查询。它提供了5种复合查询方式：<strong>bool query(布尔查询)</strong>、<strong>boosting query(提高查询)</strong>、<strong>constant_score（固定分数查询）</strong>、<strong>dis_max(最佳匹配查询）</strong>、<strong>function_score(函数查询）</strong>。@pdai</p></blockquote><h2 id="复合查询引入" tabindex="-1">复合查询引入 <a class="header-anchor" href="#复合查询引入" aria-label="Permalink to &quot;复合查询引入&quot;">​</a></h2><p>在<a href="https://pdai.tech/md/db/nosql-es/elasticsearch-x-usage.html#%E5%A4%9A%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2-bool" target="_blank" rel="noreferrer">前文</a>中，我们使用<code>bool</code>查询来组合多个查询条件。</p><p>比如之前介绍的语句</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GET /bank/_search</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;query&quot;: {</span></span>
<span class="line"><span>    &quot;bool&quot;: {</span></span>
<span class="line"><span>      &quot;must&quot;: [</span></span>
<span class="line"><span>        { &quot;match&quot;: { &quot;age&quot;: &quot;40&quot; } }</span></span>
<span class="line"><span>      ],</span></span>
<span class="line"><span>      &quot;must_not&quot;: [</span></span>
<span class="line"><span>        { &quot;match&quot;: { &quot;state&quot;: &quot;ID&quot; } }</span></span>
<span class="line"><span>      ]</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>这种查询就是本文要介绍的<strong>复合查询</strong>，并且bool查询只是复合查询一种。</p><h2 id="bool-query-布尔查询" tabindex="-1">bool query(布尔查询) <a class="header-anchor" href="#bool-query-布尔查询" aria-label="Permalink to &quot;bool query(布尔查询)&quot;">​</a></h2><blockquote><p>通过布尔逻辑将较小的查询组合成较大的查询。</p></blockquote><h3 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h3><p>Bool查询语法有以下特点</p><ul><li>子查询可以任意顺序出现</li><li>可以嵌套多个查询，包括bool查询</li><li>如果bool查询中没有must条件，should中必须至少满足一条才会返回结果。</li></ul><p>bool查询包含四种操作符，分别是must,should,must_not,filter。他们均是一种数组，数组里面是对应的判断条件。</p><ul><li><code>must</code>： 必须匹配。贡献算分</li><li><code>must_not</code>：过滤子句，必须不能匹配，但不贡献算分</li><li><code>should</code>： 选择性匹配，至少满足一条。贡献算分</li><li><code>filter</code>： 过滤子句，必须匹配，但不贡献算分</li></ul><h3 id="一些例子" tabindex="-1">一些例子 <a class="header-anchor" href="#一些例子" aria-label="Permalink to &quot;一些例子&quot;">​</a></h3><p>看下官方举例</p><ul><li>例子1</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>POST _search</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;query&quot;: {</span></span>
<span class="line"><span>    &quot;bool&quot; : {</span></span>
<span class="line"><span>      &quot;must&quot; : {</span></span>
<span class="line"><span>        &quot;term&quot; : { &quot;user.id&quot; : &quot;kimchy&quot; }</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>      &quot;filter&quot;: {</span></span>
<span class="line"><span>        &quot;term&quot; : { &quot;tags&quot; : &quot;production&quot; }</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>      &quot;must_not&quot; : {</span></span>
<span class="line"><span>        &quot;range&quot; : {</span></span>
<span class="line"><span>          &quot;age&quot; : { &quot;gte&quot; : 10, &quot;lte&quot; : 20 }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>      &quot;should&quot; : [</span></span>
<span class="line"><span>        { &quot;term&quot; : { &quot;tags&quot; : &quot;env1&quot; } },</span></span>
<span class="line"><span>        { &quot;term&quot; : { &quot;tags&quot; : &quot;deployed&quot; } }</span></span>
<span class="line"><span>      ],</span></span>
<span class="line"><span>      &quot;minimum_should_match&quot; : 1,</span></span>
<span class="line"><span>      &quot;boost&quot; : 1.0</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>在filter元素下指定的查询对评分没有影响 , 评分返回为0。分数仅受已指定查询的影响。</p><ul><li>例子2</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GET _search</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;query&quot;: {</span></span>
<span class="line"><span>    &quot;bool&quot;: {</span></span>
<span class="line"><span>      &quot;filter&quot;: {</span></span>
<span class="line"><span>        &quot;term&quot;: {</span></span>
<span class="line"><span>          &quot;status&quot;: &quot;active&quot;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>这个例子查询查询为所有文档分配0分，因为没有指定评分查询。</p><ul><li>例子3</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GET _search</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;query&quot;: {</span></span>
<span class="line"><span>    &quot;bool&quot;: {</span></span>
<span class="line"><span>      &quot;must&quot;: {</span></span>
<span class="line"><span>        &quot;match_all&quot;: {}</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>      &quot;filter&quot;: {</span></span>
<span class="line"><span>        &quot;term&quot;: {</span></span>
<span class="line"><span>          &quot;status&quot;: &quot;active&quot;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>此bool查询具有match_all查询，该查询为所有文档指定1.0分。</p><ul><li>例子4</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GET /_search</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;query&quot;: {</span></span>
<span class="line"><span>    &quot;bool&quot;: {</span></span>
<span class="line"><span>      &quot;should&quot;: [</span></span>
<span class="line"><span>        { &quot;match&quot;: { &quot;name.first&quot;: { &quot;query&quot;: &quot;shay&quot;, &quot;_name&quot;: &quot;first&quot; } } },</span></span>
<span class="line"><span>        { &quot;match&quot;: { &quot;name.last&quot;: { &quot;query&quot;: &quot;banon&quot;, &quot;_name&quot;: &quot;last&quot; } } }</span></span>
<span class="line"><span>      ],</span></span>
<span class="line"><span>      &quot;filter&quot;: {</span></span>
<span class="line"><span>        &quot;terms&quot;: {</span></span>
<span class="line"><span>          &quot;name.last&quot;: [ &quot;banon&quot;, &quot;kimchy&quot; ],</span></span>
<span class="line"><span>          &quot;_name&quot;: &quot;test&quot;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>每个query条件都可以有一个<code>_name</code>属性，用来追踪搜索出的数据到底match了哪个条件。</p><h2 id="boosting-query-提高查询" tabindex="-1">boosting query(提高查询) <a class="header-anchor" href="#boosting-query-提高查询" aria-label="Permalink to &quot;boosting query(提高查询)&quot;">​</a></h2><blockquote><p>不同于bool查询，bool查询中只要一个子查询条件不匹配那么搜索的数据就不会出现。而boosting query则是降低显示的权重/优先级（即score)。</p></blockquote><h3 id="概念-1" tabindex="-1">概念 <a class="header-anchor" href="#概念-1" aria-label="Permalink to &quot;概念&quot;">​</a></h3><p>比如搜索逻辑是 name = &#39;apple&#39; and type =&#39;fruit&#39;，对于只满足部分条件的数据，不是不显示，而是降低显示的优先级（即score)</p><h3 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-label="Permalink to &quot;例子&quot;">​</a></h3><p>首先创建数据</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>POST /test-dsl-boosting/_bulk</span></span>
<span class="line"><span>{ &quot;index&quot;: { &quot;_id&quot;: 1 }}</span></span>
<span class="line"><span>{ &quot;content&quot;:&quot;Apple Mac&quot; }</span></span>
<span class="line"><span>{ &quot;index&quot;: { &quot;_id&quot;: 2 }}</span></span>
<span class="line"><span>{ &quot;content&quot;:&quot;Apple Fruit&quot; }</span></span>
<span class="line"><span>{ &quot;index&quot;: { &quot;_id&quot;: 3 }}</span></span>
<span class="line"><span>{ &quot;content&quot;:&quot;Apple employee like Apple Pie and Apple Juice&quot; }</span></span></code></pre></div><p>对匹配<code>pie</code>的做降级显示处理</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GET /test-dsl-boosting/_search</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;query&quot;: {</span></span>
<span class="line"><span>    &quot;boosting&quot;: {</span></span>
<span class="line"><span>      &quot;positive&quot;: {</span></span>
<span class="line"><span>        &quot;term&quot;: {</span></span>
<span class="line"><span>          &quot;content&quot;: &quot;apple&quot;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>      &quot;negative&quot;: {</span></span>
<span class="line"><span>        &quot;term&quot;: {</span></span>
<span class="line"><span>          &quot;content&quot;: &quot;pie&quot;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>      &quot;negative_boost&quot;: 0.5</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>执行结果如下</p><p><img src="`+e+`" alt=""></p><h2 id="constant-score-固定分数查询" tabindex="-1">constant_score（固定分数查询） <a class="header-anchor" href="#constant-score-固定分数查询" aria-label="Permalink to &quot;constant\\_score（固定分数查询）&quot;">​</a></h2><blockquote><p>查询某个条件时，固定的返回指定的score；显然当不需要计算score时，只需要filter条件即可，因为filter context忽略score。</p></blockquote><h3 id="例子-1" tabindex="-1">例子 <a class="header-anchor" href="#例子-1" aria-label="Permalink to &quot;例子&quot;">​</a></h3><p>首先创建数据</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>POST /test-dsl-constant/_bulk</span></span>
<span class="line"><span>{ &quot;index&quot;: { &quot;_id&quot;: 1 }}</span></span>
<span class="line"><span>{ &quot;content&quot;:&quot;Apple Mac&quot; }</span></span>
<span class="line"><span>{ &quot;index&quot;: { &quot;_id&quot;: 2 }}</span></span>
<span class="line"><span>{ &quot;content&quot;:&quot;Apple Fruit&quot; }</span></span></code></pre></div><p>查询apple</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GET /test-dsl-constant/_search</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;query&quot;: {</span></span>
<span class="line"><span>    &quot;constant_score&quot;: {</span></span>
<span class="line"><span>      &quot;filter&quot;: {</span></span>
<span class="line"><span>        &quot;term&quot;: { &quot;content&quot;: &quot;apple&quot; }</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>      &quot;boost&quot;: 1.2</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>执行结果如下</p><p><img src="`+o+`" alt=""></p><h2 id="dis-max-最佳匹配查询" tabindex="-1">dis_max(最佳匹配查询） <a class="header-anchor" href="#dis-max-最佳匹配查询" aria-label="Permalink to &quot;dis\\_max(最佳匹配查询）&quot;">​</a></h2><blockquote><p>分离最大化查询（Disjunction Max Query）指的是： 将任何与任一查询匹配的文档作为结果返回，但只将最佳匹配的评分作为查询的评分结果返回 。</p></blockquote><h3 id="例子-2" tabindex="-1">例子 <a class="header-anchor" href="#例子-2" aria-label="Permalink to &quot;例子&quot;">​</a></h3><p>假设有个网站允许用户搜索博客的内容，以下面两篇博客内容文档为例：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>POST /test-dsl-dis-max/_bulk</span></span>
<span class="line"><span>{ &quot;index&quot;: { &quot;_id&quot;: 1 }}</span></span>
<span class="line"><span>{&quot;title&quot;: &quot;Quick brown rabbits&quot;,&quot;body&quot;:  &quot;Brown rabbits are commonly seen.&quot;}</span></span>
<span class="line"><span>{ &quot;index&quot;: { &quot;_id&quot;: 2 }}</span></span>
<span class="line"><span>{&quot;title&quot;: &quot;Keeping pets healthy&quot;,&quot;body&quot;:  &quot;My quick brown fox eats rabbits on a regular basis.&quot;}</span></span></code></pre></div><p>用户输入词组 “Brown fox” 然后点击搜索按钮。事先，我们并不知道用户的搜索项是会在 title 还是在 body 字段中被找到，但是，用户很有可能是想搜索相关的词组。用肉眼判断，文档 2 的匹配度更高，因为它同时包括要查找的两个词：</p><p>现在运行以下 bool 查询：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GET /test-dsl-dis-max/_search</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    &quot;query&quot;: {</span></span>
<span class="line"><span>        &quot;bool&quot;: {</span></span>
<span class="line"><span>            &quot;should&quot;: [</span></span>
<span class="line"><span>                { &quot;match&quot;: { &quot;title&quot;: &quot;Brown fox&quot; }},</span></span>
<span class="line"><span>                { &quot;match&quot;: { &quot;body&quot;:  &quot;Brown fox&quot; }}</span></span>
<span class="line"><span>            ]</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p><img src="`+l+`" alt=""></p><p>为了理解导致这样的原因，需要看下如何计算评分的</p><ul><li><strong>should 条件的计算分数</strong></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GET /test-dsl-dis-max/_search</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    &quot;query&quot;: {</span></span>
<span class="line"><span>        &quot;bool&quot;: {</span></span>
<span class="line"><span>            &quot;should&quot;: [</span></span>
<span class="line"><span>                { &quot;match&quot;: { &quot;title&quot;: &quot;Brown fox&quot; }},</span></span>
<span class="line"><span>                { &quot;match&quot;: { &quot;body&quot;:  &quot;Brown fox&quot; }}</span></span>
<span class="line"><span>            ]</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>要计算上述分数，首先要计算match的分数</p><ol><li>第一个match 中 <code>brown的分数</code></li></ol><p>doc 1 分数 = 0.6931471</p><p><img src="`+i+'" alt=""></p><ol start="2"><li>title中没有fox，所以第一个match 中 <code>brown fox 的分数 = brown分数 + 0 = 0.6931471</code></li></ol><p>doc 1 分数 = 0.6931471 + 0 = 0.6931471</p><p><img src="'+c+'" alt=""></p><ol start="3"><li>第二个 match 中 <code>brown分数</code></li></ol><p>doc 1 分数 = 0.21110919</p><p>doc 2 分数 = 0.160443</p><p><img src="'+u+'" alt=""></p><ol start="4"><li>第二个 match 中 <code>fox分数</code></li></ol><p>doc 1 分数 = 0</p><p>doc 2 分数 = 0.60996956</p><p><img src="'+q+'" alt=""></p><ol start="5"><li>所以第二个 match 中 <code>brown fox分数 = brown分数 + fox分数</code></li></ol><p>doc 1 分数 = 0.21110919 + 0 = 0.21110919</p><p>doc 2 分数 = 0.160443 + 0.60996956 = 0.77041256</p><p><img src="'+r+'" alt=""></p><ol start="6"><li>所以整个语句分数， <code>should分数 = 第一个match + 第二个match分数</code></li></ol><p>doc 1 分数 = 0.6931471 + 0.21110919 = 0.90425634</p><p>doc 2 分数 = 0 + 0.77041256 = 0.77041256</p><p><img src="'+d+`" alt=""></p><ul><li><strong>引入了dis_max</strong></li></ul><p>不使用 bool 查询，可以使用 dis_max 即分离 最大化查询（Disjunction Max Query） 。分离（Disjunction）的意思是 或（or） ，这与可以把结合（conjunction）理解成 与（and） 相对应。分离最大化查询（Disjunction Max Query）指的是： 将任何与任一查询匹配的文档作为结果返回，但只将最佳匹配的评分作为查询的评分结果返回 ：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GET /test-dsl-dis-max/_search</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    &quot;query&quot;: {</span></span>
<span class="line"><span>        &quot;dis_max&quot;: {</span></span>
<span class="line"><span>            &quot;queries&quot;: [</span></span>
<span class="line"><span>                { &quot;match&quot;: { &quot;title&quot;: &quot;Brown fox&quot; }},</span></span>
<span class="line"><span>                { &quot;match&quot;: { &quot;body&quot;:  &quot;Brown fox&quot; }}</span></span>
<span class="line"><span>            ],</span></span>
<span class="line"><span>            &quot;tie_breaker&quot;: 0</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p><img src="`+h+`" alt=""></p><p>0.77041256怎么来的呢？ 下文给你解释它如何计算出来的。</p><ul><li><strong>dis_max 条件的计算分数</strong></li></ul><p>分数 = 第一个匹配条件分数 + tie_breaker * 第二个匹配的条件的分数 ...</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GET /test-dsl-dis-max/_search</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    &quot;query&quot;: {</span></span>
<span class="line"><span>        &quot;dis_max&quot;: {</span></span>
<span class="line"><span>            &quot;queries&quot;: [</span></span>
<span class="line"><span>                { &quot;match&quot;: { &quot;title&quot;: &quot;Brown fox&quot; }},</span></span>
<span class="line"><span>                { &quot;match&quot;: { &quot;body&quot;:  &quot;Brown fox&quot; }}</span></span>
<span class="line"><span>            ],</span></span>
<span class="line"><span>            &quot;tie_breaker&quot;: 0</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>doc 1 分数 = 0.6931471 + 0.21110919 * 0 = 0.6931471</p><p>doc 2 分数 = 0.77041256 = 0.77041256</p><p><img src="`+b+`" alt=""></p><p>这样你就能理解通过dis_max将doc 2 置前了， 当然这里如果缺省<code>tie_breaker</code>字段的话默认就是0，你还可以设置它的比例（在0到1之间）来控制排名。（显然值为1时和should查询是一致的）</p><h2 id="function-score-函数查询" tabindex="-1">function_score(函数查询） <a class="header-anchor" href="#function-score-函数查询" aria-label="Permalink to &quot;function\\_score(函数查询）&quot;">​</a></h2><blockquote><p>简而言之就是用自定义function的方式来计算_score。</p></blockquote><p>可以ES有哪些自定义function呢？</p><ul><li><code>script_score</code> 使用自定义的脚本来完全控制分值计算逻辑。如果你需要以上预定义函数之外的功能，可以根据需要通过脚本进行实现。</li><li><code>weight</code> 对每份文档适用一个简单的提升，且该提升不会被归约：当weight为2时，结果为2 * _score。</li><li><code>random_score</code> 使用一致性随机分值计算来对每个用户采用不同的结果排序方式，对相同用户仍然使用相同的排序方式。</li><li><code>field_value_factor</code> 使用文档中某个字段的值来改变_score，比如将受欢迎程度或者投票数量考虑在内。</li><li><code>衰减函数(Decay Function)</code> - <code>linear</code>，<code>exp</code>，<code>gauss</code></li></ul><h3 id="例子-3" tabindex="-1">例子 <a class="header-anchor" href="#例子-3" aria-label="Permalink to &quot;例子&quot;">​</a></h3><p>以最简单的random_score 为例</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GET /_search</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;query&quot;: {</span></span>
<span class="line"><span>    &quot;function_score&quot;: {</span></span>
<span class="line"><span>      &quot;query&quot;: { &quot;match_all&quot;: {} },</span></span>
<span class="line"><span>      &quot;boost&quot;: &quot;5&quot;,</span></span>
<span class="line"><span>      &quot;random_score&quot;: {}, </span></span>
<span class="line"><span>      &quot;boost_mode&quot;: &quot;multiply&quot;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>进一步的，它还可以使用上述function的组合(functions)</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GET /_search</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;query&quot;: {</span></span>
<span class="line"><span>    &quot;function_score&quot;: {</span></span>
<span class="line"><span>      &quot;query&quot;: { &quot;match_all&quot;: {} },</span></span>
<span class="line"><span>      &quot;boost&quot;: &quot;5&quot;, </span></span>
<span class="line"><span>      &quot;functions&quot;: [</span></span>
<span class="line"><span>        {</span></span>
<span class="line"><span>          &quot;filter&quot;: { &quot;match&quot;: { &quot;test&quot;: &quot;bar&quot; } },</span></span>
<span class="line"><span>          &quot;random_score&quot;: {}, </span></span>
<span class="line"><span>          &quot;weight&quot;: 23</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        {</span></span>
<span class="line"><span>          &quot;filter&quot;: { &quot;match&quot;: { &quot;test&quot;: &quot;cat&quot; } },</span></span>
<span class="line"><span>          &quot;weight&quot;: 42</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>      ],</span></span>
<span class="line"><span>      &quot;max_boost&quot;: 42,</span></span>
<span class="line"><span>      &quot;score_mode&quot;: &quot;max&quot;,</span></span>
<span class="line"><span>      &quot;boost_mode&quot;: &quot;multiply&quot;,</span></span>
<span class="line"><span>      &quot;min_score&quot;: 42</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>script_score 可以使用如下方式</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GET /_search</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;query&quot;: {</span></span>
<span class="line"><span>    &quot;function_score&quot;: {</span></span>
<span class="line"><span>      &quot;query&quot;: {</span></span>
<span class="line"><span>        &quot;match&quot;: { &quot;message&quot;: &quot;elasticsearch&quot; }</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>      &quot;script_score&quot;: {</span></span>
<span class="line"><span>        &quot;script&quot;: {</span></span>
<span class="line"><span>          &quot;source&quot;: &quot;Math.log(2 + doc[&#39;my-int&#39;].value)&quot;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>更多相关内容，可以参考<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.12/query-dsl-function-score-query.html" target="_blank" rel="noreferrer">官方文档在新窗口打开</a> PS: 形成体系化认知以后，具体用的时候查询下即可。</p><h2 id="参考文章" tabindex="-1">参考文章 <a class="header-anchor" href="#参考文章" aria-label="Permalink to &quot;参考文章&quot;">​</a></h2><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/compound-queries.html" target="_blank" rel="noreferrer">https://www.elastic.co/guide/en/elasticsearch/reference/current/compound-queries.html</a></p><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-bool-query.html" target="_blank" rel="noreferrer">https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-bool-query.html</a></p><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.12/query-dsl-function-score-query.html" target="_blank" rel="noreferrer">https://www.elastic.co/guide/en/elasticsearch/reference/7.12/query-dsl-function-score-query.html</a></p><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>`,112)]))}const C=a(m,[["render",g]]);export{w as __pageData,C as default};
