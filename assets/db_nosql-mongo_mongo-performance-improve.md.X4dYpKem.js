import{_ as s,c as a,ai as p,o as e}from"./chunks/framework.BrYByd3F.js";const l="/vitepress-blog-template/images/mongo/osa_app_event.png",t="/vitepress-blog-template/images/mongo/osa_app_event2.png",o="/vitepress-blog-template/images/mongo/osa_app_event3.png",i="/vitepress-blog-template/images/mongo/osa_app_event4.png",u="/vitepress-blog-template/images/mongo/osa_app_event5.png",c="/vitepress-blog-template/images/mongo/osa_app_event6.png",f=JSON.parse('{"title":"Mongo进阶 - 性能：查询聚合优化","description":"","frontmatter":{},"headers":[],"relativePath":"db/nosql-mongo/mongo-performance-improve.md","filePath":"db/nosql-mongo/mongo-performance-improve.md","lastUpdated":1737706346000}'),q={name:"db/nosql-mongo/mongo-performance-improve.md"};function r(m,n,d,g,b,h){return e(),a("div",null,n[0]||(n[0]=[p('<h1 id="mongo进阶-性能-查询聚合优化" tabindex="-1">Mongo进阶 - 性能：查询聚合优化 <a class="header-anchor" href="#mongo进阶-性能-查询聚合优化" aria-label="Permalink to &quot;Mongo进阶 - 性能：查询聚合优化&quot;">​</a></h1><blockquote><p>在MongoDB中通过查询聚合语句分析定位慢查询/聚合分析。@pdai</p></blockquote><h2 id="问题描述" tabindex="-1">问题描述 <a class="header-anchor" href="#问题描述" aria-label="Permalink to &quot;问题描述&quot;">​</a></h2><p>执行BI服务的接口， 发现返回一天的记录需要10s左右，这明显是有问题: <img src="'+l+'" alt=""></p><h2 id="问题分析" tabindex="-1">问题分析 <a class="header-anchor" href="#问题分析" aria-label="Permalink to &quot;问题分析&quot;">​</a></h2><h3 id="定位慢查询" tabindex="-1">定位慢查询 <a class="header-anchor" href="#定位慢查询" aria-label="Permalink to &quot;定位慢查询&quot;">​</a></h3><p>为了定位查询，需要查看当前mongo profile的级别, profile的级别有0|1|2，分别代表意思: 0代表关闭，1代表记录慢命令，2代表全部</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>db.getProfilingLevel()</span></span></code></pre></div><p>显示为0， 表示默认下是没有记录的。</p><p>设置profile级别，设置为记录慢查询模式, 所有超过1000ms的查询语句都会被记录下来</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>db.setProfilingLevel(1, 1000)</span></span></code></pre></div><p>再次执行BI一天的查询接口，查看Profile, 发现确实记录了这条慢查询: <img src="'+t+`" alt=""></p><h3 id="分析慢查询语句" tabindex="-1">分析慢查询语句 <a class="header-anchor" href="#分析慢查询语句" aria-label="Permalink to &quot;分析慢查询语句&quot;">​</a></h3><p>通过view document查看慢查询的profile记录</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>    &quot;op&quot; : &quot;command&quot;,</span></span>
<span class="line"><span>    &quot;ns&quot; : &quot;standalone.application_alert&quot;,</span></span>
<span class="line"><span>    &quot;command&quot; : {</span></span>
<span class="line"><span>        &quot;aggregate&quot; : &quot;application_alert&quot;,</span></span>
<span class="line"><span>        &quot;pipeline&quot; : [ </span></span>
<span class="line"><span>            {</span></span>
<span class="line"><span>                &quot;$match&quot; : {</span></span>
<span class="line"><span>                    &quot;factoryId&quot; : &quot;10001&quot;,</span></span>
<span class="line"><span>                    &quot;$and&quot; : [ </span></span>
<span class="line"><span>                        {</span></span>
<span class="line"><span>                            &quot;insertTime&quot; : {</span></span>
<span class="line"><span>                                &quot;$gte&quot; : ISODate(&quot;2018-03-25T16:00:00.000Z&quot;),</span></span>
<span class="line"><span>                                &quot;$lte&quot; : ISODate(&quot;2018-03-26T09:04:20.288Z&quot;)</span></span>
<span class="line"><span>                            }</span></span>
<span class="line"><span>                        }</span></span>
<span class="line"><span>                    ]</span></span>
<span class="line"><span>                }</span></span>
<span class="line"><span>            }, </span></span>
<span class="line"><span>            {</span></span>
<span class="line"><span>                &quot;$project&quot; : {</span></span>
<span class="line"><span>                    &quot;eventType&quot; : 1,</span></span>
<span class="line"><span>                    &quot;date&quot; : {</span></span>
<span class="line"><span>                        &quot;$concat&quot; : [ </span></span>
<span class="line"><span>                            {</span></span>
<span class="line"><span>                                &quot;$substr&quot; : [ </span></span>
<span class="line"><span>                                    {</span></span>
<span class="line"><span>                                        &quot;$year&quot; : [ </span></span>
<span class="line"><span>                                            &quot;$insertTime&quot;</span></span>
<span class="line"><span>                                        ]</span></span>
<span class="line"><span>                                    }, </span></span>
<span class="line"><span>                                    0, </span></span>
<span class="line"><span>                                    4</span></span>
<span class="line"><span>                                ]</span></span>
<span class="line"><span>                            }, </span></span>
<span class="line"><span>                            &quot;-&quot;, </span></span>
<span class="line"><span>                            {</span></span>
<span class="line"><span>                                &quot;$substr&quot; : [ </span></span>
<span class="line"><span>                                    {</span></span>
<span class="line"><span>                                        &quot;$month&quot; : [ </span></span>
<span class="line"><span>                                            &quot;$insertTime&quot;</span></span>
<span class="line"><span>                                        ]</span></span>
<span class="line"><span>                                    }, </span></span>
<span class="line"><span>                                    0, </span></span>
<span class="line"><span>                                    2</span></span>
<span class="line"><span>                                ]</span></span>
<span class="line"><span>                            }, </span></span>
<span class="line"><span>                            &quot;-&quot;, </span></span>
<span class="line"><span>                            {</span></span>
<span class="line"><span>                                &quot;$substr&quot; : [ </span></span>
<span class="line"><span>                                    {</span></span>
<span class="line"><span>                                        &quot;$dayOfMonth&quot; : [ </span></span>
<span class="line"><span>                                            &quot;$insertTime&quot;</span></span>
<span class="line"><span>                                        ]</span></span>
<span class="line"><span>                                    }, </span></span>
<span class="line"><span>                                    0, </span></span>
<span class="line"><span>                                    2</span></span>
<span class="line"><span>                                ]</span></span>
<span class="line"><span>                            }</span></span>
<span class="line"><span>                        ]</span></span>
<span class="line"><span>                    }</span></span>
<span class="line"><span>                }</span></span>
<span class="line"><span>            }, </span></span>
<span class="line"><span>            {</span></span>
<span class="line"><span>                &quot;$group&quot; : {</span></span>
<span class="line"><span>                    &quot;_id&quot; : {</span></span>
<span class="line"><span>                        &quot;date&quot; : &quot;$date&quot;,</span></span>
<span class="line"><span>                        &quot;eventType&quot; : &quot;$eventType&quot;</span></span>
<span class="line"><span>                    },</span></span>
<span class="line"><span>                    &quot;count&quot; : {</span></span>
<span class="line"><span>                        &quot;$sum&quot; : 1</span></span>
<span class="line"><span>                    }</span></span>
<span class="line"><span>                }</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        ]</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    &quot;keysExamined&quot; : 0,</span></span>
<span class="line"><span>    &quot;docsExamined&quot; : 2636052,</span></span>
<span class="line"><span>    &quot;numYield&quot; : 20651,</span></span>
<span class="line"><span>    &quot;locks&quot; : {</span></span>
<span class="line"><span>        &quot;Global&quot; : {</span></span>
<span class="line"><span>            &quot;acquireCount&quot; : {</span></span>
<span class="line"><span>                &quot;r&quot; : NumberLong(41310)</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        &quot;Database&quot; : {</span></span>
<span class="line"><span>            &quot;acquireCount&quot; : {</span></span>
<span class="line"><span>                &quot;r&quot; : NumberLong(20655)</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        &quot;Collection&quot; : {</span></span>
<span class="line"><span>            &quot;acquireCount&quot; : {</span></span>
<span class="line"><span>                &quot;r&quot; : NumberLong(20654)</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    &quot;nreturned&quot; : 0,</span></span>
<span class="line"><span>    &quot;responseLength&quot; : 196,</span></span>
<span class="line"><span>    &quot;protocol&quot; : &quot;op_query&quot;,</span></span>
<span class="line"><span>    &quot;millis&quot; : 9484,</span></span>
<span class="line"><span>    &quot;planSummary&quot; : &quot;COLLSCAN&quot;,</span></span>
<span class="line"><span>    &quot;ts&quot; : ISODate(&quot;2018-03-26T08:44:51.322Z&quot;),</span></span>
<span class="line"><span>    &quot;client&quot; : &quot;10.11.0.118&quot;,</span></span>
<span class="line"><span>    &quot;allUsers&quot; : [ </span></span>
<span class="line"><span>        {</span></span>
<span class="line"><span>            &quot;user&quot; : &quot;standalone&quot;,</span></span>
<span class="line"><span>            &quot;db&quot; : &quot;standalone&quot;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    ],</span></span>
<span class="line"><span>    &quot;user&quot; : &quot;standalone@standalone&quot;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>从上面profile中可以看到我们执行的BI　查询接口对应到Mongo执行了一个pipleline:</p><ul><li>第一步: match 工厂ID是10001的记录，时间段是当前一天</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>     {</span></span>
<span class="line"><span>            &quot;$match&quot; : {</span></span>
<span class="line"><span>                &quot;factoryId&quot; : &quot;10001&quot;,</span></span>
<span class="line"><span>                &quot;$and&quot; : [ </span></span>
<span class="line"><span>                    {</span></span>
<span class="line"><span>                        &quot;insertTime&quot; : {</span></span>
<span class="line"><span>                            &quot;$gte&quot; : ISODate(&quot;2018-03-25T16:00:00.000Z&quot;),</span></span>
<span class="line"><span>                            &quot;$lte&quot; : ISODate(&quot;2018-03-26T09:04:20.288Z&quot;)</span></span>
<span class="line"><span>                        }</span></span>
<span class="line"><span>                    }</span></span>
<span class="line"><span>                ]</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        },</span></span></code></pre></div><ul><li>第二步: 字段映射，project:</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>          {</span></span>
<span class="line"><span>                &quot;$project&quot; : {</span></span>
<span class="line"><span>                    &quot;eventType&quot; : 1,</span></span>
<span class="line"><span>                    &quot;date&quot; : {</span></span>
<span class="line"><span>                        &quot;$concat&quot; : [ </span></span>
<span class="line"><span>                            {</span></span>
<span class="line"><span>                                &quot;$substr&quot; : [ </span></span>
<span class="line"><span>                                    {</span></span>
<span class="line"><span>                                        &quot;$year&quot; : [ </span></span>
<span class="line"><span>                                            &quot;$insertTime&quot;</span></span>
<span class="line"><span>                                        ]</span></span>
<span class="line"><span>                                    }, </span></span>
<span class="line"><span>                                    0, </span></span>
<span class="line"><span>                                    4</span></span>
<span class="line"><span>                                ]</span></span>
<span class="line"><span>                            }, </span></span>
<span class="line"><span>                            &quot;-&quot;, </span></span>
<span class="line"><span>                            {</span></span>
<span class="line"><span>                                &quot;$substr&quot; : [ </span></span>
<span class="line"><span>                                    {</span></span>
<span class="line"><span>                                        &quot;$month&quot; : [ </span></span>
<span class="line"><span>                                            &quot;$insertTime&quot;</span></span>
<span class="line"><span>                                        ]</span></span>
<span class="line"><span>                                    }, </span></span>
<span class="line"><span>                                    0, </span></span>
<span class="line"><span>                                    2</span></span>
<span class="line"><span>                                ]</span></span>
<span class="line"><span>                            }, </span></span>
<span class="line"><span>                            &quot;-&quot;, </span></span>
<span class="line"><span>                            {</span></span>
<span class="line"><span>                                &quot;$substr&quot; : [ </span></span>
<span class="line"><span>                                    {</span></span>
<span class="line"><span>                                        &quot;$dayOfMonth&quot; : [ </span></span>
<span class="line"><span>                                            &quot;$insertTime&quot;</span></span>
<span class="line"><span>                                        ]</span></span>
<span class="line"><span>                                    }, </span></span>
<span class="line"><span>                                    0, </span></span>
<span class="line"><span>                                    2</span></span>
<span class="line"><span>                                ]</span></span>
<span class="line"><span>                            }</span></span>
<span class="line"><span>                        ]</span></span>
<span class="line"><span>                    }</span></span>
<span class="line"><span>                }</span></span>
<span class="line"><span>            },</span></span></code></pre></div><p>可以看到除了对event_type做了简单的project外，还对insertTime字段做了拼接，拼接为yyyy-MM-dd格式，并且project为date字段。</p><ul><li>第三步: group操作</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>            {</span></span>
<span class="line"><span>                &quot;$group&quot; : {</span></span>
<span class="line"><span>                    &quot;_id&quot; : {</span></span>
<span class="line"><span>                        &quot;date&quot; : &quot;$date&quot;,</span></span>
<span class="line"><span>                        &quot;eventType&quot; : &quot;$eventType&quot;</span></span>
<span class="line"><span>                    },</span></span>
<span class="line"><span>                    &quot;count&quot; : {</span></span>
<span class="line"><span>                        &quot;$sum&quot; : 1</span></span>
<span class="line"><span>                    }</span></span>
<span class="line"><span>                }</span></span></code></pre></div><p>对#2中的date和event_type进行group，统计不同日期和事件类型所对应的事件数量(count).</p><p>对应的其它字段:</p><ul><li>Mills: 花了9484毫秒返回查询结果</li><li>ts: 命令执行时间</li><li>info: 命令的内容</li><li>query: 代表查询</li><li>ns: standalone.application_alert 代表查询的库与集合</li><li>nreturned: 返回记录数及用时</li><li>reslen: 返回的结果集大小，byte数</li><li>nscanned: 扫描记录数量</li></ul><p>如果发现9484毫秒时间比较长，那么就需要作优化。</p><p>通常来说，经验上可以对这些指标做参考:</p><ul><li>比如nscanned数很大，或者接近记录总数，那么可能没有用到索引查询。</li><li>reslen很大，有可能返回没必要的字段。</li><li>nreturned很大，那么有可能查询的时候没有加限制。</li></ul><h3 id="查看db-server-collection的状态" tabindex="-1">查看DB/Server/Collection的状态 <a class="header-anchor" href="#查看db-server-collection的状态" aria-label="Permalink to &quot;查看DB/Server/Collection的状态&quot;">​</a></h3><ul><li>DB status</li></ul><p><img src="`+o+`" alt=""></p><ul><li>查看Server状态</li></ul><blockquote><p>由于server 状态指标众多，我这边只列出来一部分。</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>    &quot;host&quot; : &quot;OPASTORMON&quot;, #主机名 </span></span>
<span class="line"><span>    &quot;version&quot; : &quot;3.4.1&quot;, #版本号</span></span>
<span class="line"><span>    &quot;process&quot; : &quot;mongod&quot;, #进程名  </span></span>
<span class="line"><span>    &quot;pid&quot; : NumberLong(1462), #进程ID  </span></span>
<span class="line"><span>    &quot;uptime&quot; : 10111875.0, #运行时间 </span></span>
<span class="line"><span>    &quot;uptimeMillis&quot; : NumberLong(10111875602), #运行时间 </span></span>
<span class="line"><span>    &quot;uptimeEstimate&quot; : NumberLong(10111875), #运行时间 </span></span>
<span class="line"><span>    &quot;localTime&quot; : ISODate(&quot;2018-03-26T09:14:13.679Z&quot;), #当前时间 </span></span>
<span class="line"><span>    &quot;asserts&quot; : {</span></span>
<span class="line"><span>        &quot;regular&quot; : 0,</span></span>
<span class="line"><span>        &quot;warning&quot; : 0,</span></span>
<span class="line"><span>        &quot;msg&quot; : 0,</span></span>
<span class="line"><span>        &quot;user&quot; : 26549,</span></span>
<span class="line"><span>        &quot;rollovers&quot; : 0</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    &quot;connections&quot; : {</span></span>
<span class="line"><span>        &quot;current&quot; : 104, #当前链接数  </span></span>
<span class="line"><span>        &quot;available&quot; : 715, #可用链接数</span></span>
<span class="line"><span>        &quot;totalCreated&quot; : 11275</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    &quot;extra_info&quot; : {</span></span>
<span class="line"><span>        &quot;note&quot; : &quot;fields vary by platform&quot;,</span></span>
<span class="line"><span>        &quot;page_faults&quot; : 49</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    &quot;globalLock&quot; : {</span></span>
<span class="line"><span>        &quot;totalTime&quot; : NumberLong(10111875549000), #总运行时间(ns)</span></span>
<span class="line"><span>        &quot;currentQueue&quot; : {</span></span>
<span class="line"><span>            &quot;total&quot; : 0, #当前需要执行的队列</span></span>
<span class="line"><span>            &quot;readers&quot; : 0, #读队列</span></span>
<span class="line"><span>            &quot;writers&quot; : 0 #写队列</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        &quot;activeClients&quot; : {</span></span>
<span class="line"><span>            &quot;total&quot; : 110, #当前客户端执行的链接数  </span></span>
<span class="line"><span>            &quot;readers&quot; : 0, #读链接数  </span></span>
<span class="line"><span>            &quot;writers&quot; : 0 #写链接数 </span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    &quot;locks&quot; : {</span></span>
<span class="line"><span>        &quot;Global&quot; : {</span></span>
<span class="line"><span>            &quot;acquireCount&quot; : {</span></span>
<span class="line"><span>                &quot;r&quot; : NumberLong(8457368136),</span></span>
<span class="line"><span>                &quot;w&quot; : NumberLong(1025512487),</span></span>
<span class="line"><span>                &quot;W&quot; : NumberLong(7)</span></span>
<span class="line"><span>            },</span></span>
<span class="line"><span>            &quot;acquireWaitCount&quot; : {</span></span>
<span class="line"><span>                &quot;r&quot; : NumberLong(2)</span></span>
<span class="line"><span>            },</span></span>
<span class="line"><span>            &quot;timeAcquiringMicros&quot; : {</span></span>
<span class="line"><span>                &quot;r&quot; : NumberLong(94731)</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        &quot;Database&quot; : {</span></span>
<span class="line"><span>            &quot;acquireCount&quot; : {</span></span>
<span class="line"><span>                &quot;r&quot; : NumberLong(3715927334),</span></span>
<span class="line"><span>                &quot;w&quot; : NumberLong(1025512452),</span></span>
<span class="line"><span>                &quot;R&quot; : NumberLong(194),</span></span>
<span class="line"><span>                &quot;W&quot; : NumberLong(69)</span></span>
<span class="line"><span>            },</span></span>
<span class="line"><span>            &quot;acquireWaitCount&quot; : {</span></span>
<span class="line"><span>                &quot;r&quot; : NumberLong(13),</span></span>
<span class="line"><span>                &quot;w&quot; : NumberLong(5),</span></span>
<span class="line"><span>                &quot;R&quot; : NumberLong(6),</span></span>
<span class="line"><span>                &quot;W&quot; : NumberLong(3)</span></span>
<span class="line"><span>            },</span></span>
<span class="line"><span>            &quot;timeAcquiringMicros&quot; : {</span></span>
<span class="line"><span>                &quot;r&quot; : NumberLong(530972),</span></span>
<span class="line"><span>                &quot;w&quot; : NumberLong(426173),</span></span>
<span class="line"><span>                &quot;R&quot; : NumberLong(3207),</span></span>
<span class="line"><span>                &quot;W&quot; : NumberLong(1321)</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        &quot;Collection&quot; : {</span></span>
<span class="line"><span>            &quot;acquireCount&quot; : {</span></span>
<span class="line"><span>                &quot;r&quot; : NumberLong(3715046899),</span></span>
<span class="line"><span>                &quot;w&quot; : NumberLong(1025512453)</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        &quot;Metadata&quot; : {</span></span>
<span class="line"><span>            &quot;acquireCount&quot; : {</span></span>
<span class="line"><span>                &quot;w&quot; : NumberLong(1),</span></span>
<span class="line"><span>                &quot;W&quot; : NumberLong(3)</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    &quot;network&quot; : {</span></span>
<span class="line"><span>        &quot;bytesIn&quot; : NumberLong(373939915493), #输入数据(byte)</span></span>
<span class="line"><span>        &quot;bytesOut&quot; : NumberLong(961227224728), #输出数据(byte)</span></span>
<span class="line"><span>        &quot;physicalBytesIn&quot; : NumberLong(373939915493),#物理输入数据(byte)</span></span>
<span class="line"><span>        &quot;physicalBytesOut&quot; : NumberLong(961054421482),#物理输入数据(byte)</span></span>
<span class="line"><span>        &quot;numRequests&quot; : NumberLong(3142377739) #请求数  </span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    &quot;opLatencies&quot; : {</span></span>
<span class="line"><span>        &quot;reads&quot; : {</span></span>
<span class="line"><span>            &quot;latency&quot; : NumberLong(3270742192035),</span></span>
<span class="line"><span>            &quot;ops&quot; : NumberLong(540111914)</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        &quot;writes&quot; : {</span></span>
<span class="line"><span>            &quot;latency&quot; : NumberLong(261946981235),</span></span>
<span class="line"><span>            &quot;ops&quot; : NumberLong(1024301418)</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        &quot;commands&quot; : {</span></span>
<span class="line"><span>            &quot;latency&quot; : NumberLong(458086641),</span></span>
<span class="line"><span>            &quot;ops&quot; : NumberLong(6776702)</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    &quot;opcounters&quot; : {</span></span>
<span class="line"><span>        &quot;insert&quot; : 6846448, #插入操作数  </span></span>
<span class="line"><span>        &quot;query&quot; : 248443106, #查询操作数</span></span>
<span class="line"><span>        &quot;update&quot; : 1018594976, #更新操作数  </span></span>
<span class="line"><span>        &quot;delete&quot; : 1830, #删除操作数</span></span>
<span class="line"><span>        &quot;getmore&quot; : 162213, #获取更多的操作数</span></span>
<span class="line"><span>        &quot;command&quot; : 298306448 #其他命令操作数</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    &quot;opcountersRepl&quot; : {</span></span>
<span class="line"><span>        &quot;insert&quot; : 0,</span></span>
<span class="line"><span>        &quot;query&quot; : 0,</span></span>
<span class="line"><span>        &quot;update&quot; : 0,</span></span>
<span class="line"><span>        &quot;delete&quot; : 0,</span></span>
<span class="line"><span>        &quot;getmore&quot; : 0,</span></span>
<span class="line"><span>        &quot;command&quot; : 0</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    &quot;storageEngine&quot; : {</span></span>
<span class="line"><span>        &quot;name&quot; : &quot;wiredTiger&quot;,</span></span>
<span class="line"><span>        &quot;supportsCommittedReads&quot; : true,</span></span>
<span class="line"><span>        &quot;readOnly&quot; : false,</span></span>
<span class="line"><span>        &quot;persistent&quot; : true</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    &quot;tcmalloc&quot; : {</span></span>
<span class="line"><span>        &quot;generic&quot; : {</span></span>
<span class="line"><span>            &quot;current_allocated_bytes&quot; : NumberLong(3819325752),</span></span>
<span class="line"><span>            &quot;heap_size&quot; : NumberLong(6959509504)</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        &quot;tcmalloc&quot; : {</span></span>
<span class="line"><span>            &quot;pageheap_free_bytes&quot; : 199692288,</span></span>
<span class="line"><span>            &quot;pageheap_unmapped_bytes&quot; : NumberLong(2738442240),</span></span>
<span class="line"><span>            &quot;max_total_thread_cache_bytes&quot; : NumberLong(1073741824),</span></span>
<span class="line"><span>            &quot;current_total_thread_cache_bytes&quot; : 35895120,</span></span>
<span class="line"><span>            &quot;total_free_bytes&quot; : 202049224,</span></span>
<span class="line"><span>            &quot;central_cache_free_bytes&quot; : 165650360,</span></span>
<span class="line"><span>            &quot;transfer_cache_free_bytes&quot; : 503744,</span></span>
<span class="line"><span>            &quot;thread_cache_free_bytes&quot; : 35895120,</span></span>
<span class="line"><span>            &quot;aggressive_memory_decommit&quot; : 0,</span></span>
<span class="line"><span>            &quot;formattedString&quot; : &quot;------------------------------------------------\\nMALLOC:     3819325752 ( 3642.4 MiB) Bytes in use by application\\nMALLOC: +    199692288 (  190.4 MiB) Bytes in page heap freelist\\nMALLOC: +    165650360 (  158.0 MiB) Bytes in central cache freelist\\nMALLOC: +       503744 (    0.5 MiB) Bytes in transfer cache freelist\\nMALLOC: +     35895120 (   34.2 MiB) Bytes in thread cache freelists\\nMALLOC: +     40001728 (   38.1 MiB) Bytes in malloc metadata\\nMALLOC:   ------------\\nMALLOC: =   4261068992 ( 4063.7 MiB) Actual memory used (physical + swap)\\nMALLOC: +   2738442240 ( 2611.6 MiB) Bytes released to OS (aka unmapped)\\nMALLOC:   ------------\\nMALLOC: =   6999511232 ( 6675.3 MiB) Virtual address space used\\nMALLOC:\\nMALLOC:         521339              Spans in use\\nMALLOC:            115              Thread heaps in use\\nMALLOC:           4096              Tcmalloc page size\\n------------------------------------------------\\nCall ReleaseFreeMemory() to release freelist memory to the OS (via madvise()).\\nBytes released to the OS take up virtual address space but no physical memory.\\n&quot;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    &quot;mem&quot; : {</span></span>
<span class="line"><span>        &quot;bits&quot; : 64, #64位系统  </span></span>
<span class="line"><span>        &quot;resident&quot; : 4103, #占有物理内存数  </span></span>
<span class="line"><span>        &quot;virtual&quot; : 7045, #占有虚拟内存  </span></span>
<span class="line"><span>        &quot;supported&quot; : true, #是否支持扩展内存  </span></span>
<span class="line"><span>        &quot;mapped&quot; : 0,</span></span>
<span class="line"><span>        &quot;mappedWithJournal&quot; : 0</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    &quot;ok&quot; : 1.0</span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li>查看application_alert这个collection的状态</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>    &quot;ns&quot; : &quot;standalone.application_alert&quot;,</span></span>
<span class="line"><span>    &quot;size&quot; : 783852548,</span></span>
<span class="line"><span>    &quot;count&quot; : 2638262,</span></span>
<span class="line"><span>    &quot;avgObjSize&quot; : 297,</span></span>
<span class="line"><span>    &quot;storageSize&quot; : 189296640,</span></span>
<span class="line"><span>    &quot;capped&quot; : false,</span></span>
<span class="line"><span>    &quot;wiredTiger&quot; : {</span></span>
<span class="line"><span>        &quot;metadata&quot; : {</span></span>
<span class="line"><span>            &quot;formatVersion&quot; : 1</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        &quot;creationString&quot; : &quot;allocation_size=4KB,app_metadata=(formatVersion=1),block_allocation=best,block_compressor=snappy,cache_resident=false,checksum=on,colgroups=,collator=,columns=,dictionary=0,encryption=(keyid=,name=),exclusive=false,extractor=,format=btree,huffman_key=,huffman_value=,ignore_in_memory_cache_size=false,immutable=false,internal_item_max=0,internal_key_max=0,internal_key_truncate=true,internal_page_max=4KB,key_format=q,key_gap=10,leaf_item_max=0,leaf_key_max=0,leaf_page_max=32KB,leaf_value_max=64MB,log=(enabled=true),lsm=(auto_throttle=true,bloom=true,bloom_bit_count=16,bloom_config=,bloom_hash_count=8,bloom_oldest=false,chunk_count_limit=0,chunk_max=5GB,chunk_size=10MB,merge_max=15,merge_min=0),memory_page_max=10m,os_cache_dirty_max=0,os_cache_max=0,prefix_compression=false,prefix_compression_min=4,source=,split_deepen_min_child=0,split_deepen_per_child=0,split_pct=90,type=file,value_format=u&quot;,</span></span>
<span class="line"><span>        &quot;type&quot; : &quot;file&quot;,</span></span>
<span class="line"><span>        &quot;uri&quot; : &quot;statistics:table:collection-4-6040851502998278747&quot;,</span></span>
<span class="line"><span>        &quot;LSM&quot; : {</span></span>
<span class="line"><span>            &quot;bloom filter false positives&quot; : 0,</span></span>
<span class="line"><span>            &quot;bloom filter hits&quot; : 0,</span></span>
<span class="line"><span>            &quot;bloom filter misses&quot; : 0,</span></span>
<span class="line"><span>            &quot;bloom filter pages evicted from cache&quot; : 0,</span></span>
<span class="line"><span>            &quot;bloom filter pages read into cache&quot; : 0,</span></span>
<span class="line"><span>            &quot;bloom filters in the LSM tree&quot; : 0,</span></span>
<span class="line"><span>            &quot;chunks in the LSM tree&quot; : 0,</span></span>
<span class="line"><span>            &quot;highest merge generation in the LSM tree&quot; : 0,</span></span>
<span class="line"><span>            &quot;queries that could have benefited from a Bloom filter that did not exist&quot; : 0,</span></span>
<span class="line"><span>            &quot;sleep for LSM checkpoint throttle&quot; : 0,</span></span>
<span class="line"><span>            &quot;sleep for LSM merge throttle&quot; : 0,</span></span>
<span class="line"><span>            &quot;total size of bloom filters&quot; : 0</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        &quot;block-manager&quot; : {</span></span>
<span class="line"><span>            &quot;allocations requiring file extension&quot; : 31543,</span></span>
<span class="line"><span>            &quot;blocks allocated&quot; : 346110,</span></span>
<span class="line"><span>            &quot;blocks freed&quot; : 124238,</span></span>
<span class="line"><span>            &quot;checkpoint size&quot; : 189259776,</span></span>
<span class="line"><span>            &quot;file allocation unit size&quot; : 4096,</span></span>
<span class="line"><span>            &quot;file bytes available for reuse&quot; : 20480,</span></span>
<span class="line"><span>            &quot;file magic number&quot; : 120897,</span></span>
<span class="line"><span>            &quot;file major version number&quot; : 1,</span></span>
<span class="line"><span>            &quot;file size in bytes&quot; : 189296640,</span></span>
<span class="line"><span>            &quot;minor version number&quot; : 0</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        &quot;btree&quot; : {</span></span>
<span class="line"><span>            &quot;btree checkpoint generation&quot; : 165242,</span></span>
<span class="line"><span>            &quot;column-store fixed-size leaf pages&quot; : 0,</span></span>
<span class="line"><span>            &quot;column-store internal pages&quot; : 0,</span></span>
<span class="line"><span>            &quot;column-store variable-size RLE encoded values&quot; : 0,</span></span>
<span class="line"><span>            &quot;column-store variable-size deleted values&quot; : 0,</span></span>
<span class="line"><span>            &quot;column-store variable-size leaf pages&quot; : 0,</span></span>
<span class="line"><span>            &quot;fixed-record size&quot; : 0,</span></span>
<span class="line"><span>            &quot;maximum internal page key size&quot; : 368,</span></span>
<span class="line"><span>            &quot;maximum internal page size&quot; : 4096,</span></span>
<span class="line"><span>            &quot;maximum leaf page key size&quot; : 2867,</span></span>
<span class="line"><span>            &quot;maximum leaf page size&quot; : 32768,</span></span>
<span class="line"><span>            &quot;maximum leaf page value size&quot; : 67108864,</span></span>
<span class="line"><span>            &quot;maximum tree depth&quot; : 3,</span></span>
<span class="line"><span>            &quot;number of key/value pairs&quot; : 0,</span></span>
<span class="line"><span>            &quot;overflow pages&quot; : 0,</span></span>
<span class="line"><span>            &quot;pages rewritten by compaction&quot; : 0,</span></span>
<span class="line"><span>            &quot;row-store internal pages&quot; : 0,</span></span>
<span class="line"><span>            &quot;row-store leaf pages&quot; : 0</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        &quot;cache&quot; : {</span></span>
<span class="line"><span>            &quot;bytes currently in the cache&quot; : 1014702364,</span></span>
<span class="line"><span>            &quot;bytes read into cache&quot; : 0,</span></span>
<span class="line"><span>            &quot;bytes written from cache&quot; : 1888143292.0,</span></span>
<span class="line"><span>            &quot;checkpoint blocked page eviction&quot; : 0,</span></span>
<span class="line"><span>            &quot;data source pages selected for eviction unable to be evicted&quot; : 0,</span></span>
<span class="line"><span>            &quot;hazard pointer blocked page eviction&quot; : 0,</span></span>
<span class="line"><span>            &quot;in-memory page passed criteria to be split&quot; : 224,</span></span>
<span class="line"><span>            &quot;in-memory page splits&quot; : 112,</span></span>
<span class="line"><span>            &quot;internal pages evicted&quot; : 0,</span></span>
<span class="line"><span>            &quot;internal pages split during eviction&quot; : 0,</span></span>
<span class="line"><span>            &quot;leaf pages split during eviction&quot; : 0,</span></span>
<span class="line"><span>            &quot;modified pages evicted&quot; : 2,</span></span>
<span class="line"><span>            &quot;overflow pages read into cache&quot; : 0,</span></span>
<span class="line"><span>            &quot;overflow values cached in memory&quot; : 0,</span></span>
<span class="line"><span>            &quot;page split during eviction deepened the tree&quot; : 0,</span></span>
<span class="line"><span>            &quot;page written requiring lookaside records&quot; : 0,</span></span>
<span class="line"><span>            &quot;pages read into cache&quot; : 0,</span></span>
<span class="line"><span>            &quot;pages read into cache requiring lookaside entries&quot; : 0,</span></span>
<span class="line"><span>            &quot;pages requested from the cache&quot; : 49191856,</span></span>
<span class="line"><span>            &quot;pages written from cache&quot; : 217176,</span></span>
<span class="line"><span>            &quot;pages written requiring in-memory restoration&quot; : 0,</span></span>
<span class="line"><span>            &quot;unmodified pages evicted&quot; : 0</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        &quot;cache_walk&quot; : {</span></span>
<span class="line"><span>            &quot;Average difference between current eviction generation when the page was last considered&quot; : 0,</span></span>
<span class="line"><span>            &quot;Average on-disk page image size seen&quot; : 0,</span></span>
<span class="line"><span>            &quot;Clean pages currently in cache&quot; : 0,</span></span>
<span class="line"><span>            &quot;Current eviction generation&quot; : 0,</span></span>
<span class="line"><span>            &quot;Dirty pages currently in cache&quot; : 0,</span></span>
<span class="line"><span>            &quot;Entries in the root page&quot; : 0,</span></span>
<span class="line"><span>            &quot;Internal pages currently in cache&quot; : 0,</span></span>
<span class="line"><span>            &quot;Leaf pages currently in cache&quot; : 0,</span></span>
<span class="line"><span>            &quot;Maximum difference between current eviction generation when the page was last considered&quot; : 0,</span></span>
<span class="line"><span>            &quot;Maximum page size seen&quot; : 0,</span></span>
<span class="line"><span>            &quot;Minimum on-disk page image size seen&quot; : 0,</span></span>
<span class="line"><span>            &quot;On-disk page image sizes smaller than a single allocation unit&quot; : 0,</span></span>
<span class="line"><span>            &quot;Pages created in memory and never written&quot; : 0,</span></span>
<span class="line"><span>            &quot;Pages currently queued for eviction&quot; : 0,</span></span>
<span class="line"><span>            &quot;Pages that could not be queued for eviction&quot; : 0,</span></span>
<span class="line"><span>            &quot;Refs skipped during cache traversal&quot; : 0,</span></span>
<span class="line"><span>            &quot;Size of the root page&quot; : 0,</span></span>
<span class="line"><span>            &quot;Total number of pages currently in cache&quot; : 0</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        &quot;compression&quot; : {</span></span>
<span class="line"><span>            &quot;compressed pages read&quot; : 0,</span></span>
<span class="line"><span>            &quot;compressed pages written&quot; : 83604,</span></span>
<span class="line"><span>            &quot;page written failed to compress&quot; : 0,</span></span>
<span class="line"><span>            &quot;page written was too small to compress&quot; : 133572,</span></span>
<span class="line"><span>            &quot;raw compression call failed, additional data available&quot; : 0,</span></span>
<span class="line"><span>            &quot;raw compression call failed, no additional data available&quot; : 0,</span></span>
<span class="line"><span>            &quot;raw compression call succeeded&quot; : 0</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        &quot;cursor&quot; : {</span></span>
<span class="line"><span>            &quot;bulk-loaded cursor-insert calls&quot; : 0,</span></span>
<span class="line"><span>            &quot;create calls&quot; : 78758,</span></span>
<span class="line"><span>            &quot;cursor-insert key and value bytes inserted&quot; : 795578636,</span></span>
<span class="line"><span>            &quot;cursor-remove key bytes removed&quot; : 8857,</span></span>
<span class="line"><span>            &quot;cursor-update value bytes updated&quot; : 0,</span></span>
<span class="line"><span>            &quot;insert calls&quot; : 2642785,</span></span>
<span class="line"><span>            &quot;next calls&quot; : 5850718215.0,</span></span>
<span class="line"><span>            &quot;prev calls&quot; : 3,</span></span>
<span class="line"><span>            &quot;remove calls&quot; : 4460,</span></span>
<span class="line"><span>            &quot;reset calls&quot; : 48942545,</span></span>
<span class="line"><span>            &quot;restarted searches&quot; : 0,</span></span>
<span class="line"><span>            &quot;search calls&quot; : 10229,</span></span>
<span class="line"><span>            &quot;search near calls&quot; : 46285468,</span></span>
<span class="line"><span>            &quot;truncate calls&quot; : 0,</span></span>
<span class="line"><span>            &quot;update calls&quot; : 0</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        &quot;reconciliation&quot; : {</span></span>
<span class="line"><span>            &quot;dictionary matches&quot; : 0,</span></span>
<span class="line"><span>            &quot;fast-path pages deleted&quot; : 0,</span></span>
<span class="line"><span>            &quot;internal page key bytes discarded using suffix compression&quot; : 7946666,</span></span>
<span class="line"><span>            &quot;internal page multi-block writes&quot; : 60010,</span></span>
<span class="line"><span>            &quot;internal-page overflow keys&quot; : 0,</span></span>
<span class="line"><span>            &quot;leaf page key bytes discarded using prefix compression&quot; : 0,</span></span>
<span class="line"><span>            &quot;leaf page multi-block writes&quot; : 64250,</span></span>
<span class="line"><span>            &quot;leaf-page overflow keys&quot; : 0,</span></span>
<span class="line"><span>            &quot;maximum blocks required for a page&quot; : 253,</span></span>
<span class="line"><span>            &quot;overflow values written&quot; : 0,</span></span>
<span class="line"><span>            &quot;page checksum matches&quot; : 10496129,</span></span>
<span class="line"><span>            &quot;page reconciliation calls&quot; : 189077,</span></span>
<span class="line"><span>            &quot;page reconciliation calls for eviction&quot; : 1,</span></span>
<span class="line"><span>            &quot;pages deleted&quot; : 7</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        &quot;session&quot; : {</span></span>
<span class="line"><span>            &quot;object compaction&quot; : 0,</span></span>
<span class="line"><span>            &quot;open cursor count&quot; : 35</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>        &quot;transaction&quot; : {</span></span>
<span class="line"><span>            &quot;update conflicts&quot; : 0</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    &quot;nindexes&quot; : 1,</span></span>
<span class="line"><span>    &quot;totalIndexSize&quot; : 24420352,</span></span>
<span class="line"><span>    &quot;indexSizes&quot; : {</span></span>
<span class="line"><span>        &quot;_id_&quot; : 24420352</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    &quot;ok&quot; : 1.0</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="性能优化" tabindex="-1">性能优化 <a class="header-anchor" href="#性能优化" aria-label="Permalink to &quot;性能优化&quot;">​</a></h2><h3 id="性能优化-索引" tabindex="-1">性能优化 - 索引 <a class="header-anchor" href="#性能优化-索引" aria-label="Permalink to &quot;性能优化 - 索引&quot;">​</a></h3><p>通过上述的指标，需要优化的话，第一考虑的是查看是否对该collection创建了索引:</p><ul><li>查看是否有相关索引</li></ul><p><img src="`+i+`" alt=""></p><ul><li>增加相关字段的搜索索引 发现只有对id的索引，所以接下来对application_alert创建event_type和factory_id，timeStamp字段的索引</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>db.application_alert.ensureIndex({&quot;insertTime&quot;: 1, &quot;eventType&quot;: 1});</span></span>
<span class="line"><span>db.application_alert.ensureIndex({&quot;insertTime&quot;: 1});</span></span>
<span class="line"><span>db.application_alert.ensureIndex({&quot;eventType&quot;: 1});</span></span>
<span class="line"><span>db.application_alert.ensureIndex({&quot;factoryId&quot;: 1});</span></span></code></pre></div><p>查看增加index后查询一天的数据聚合需要424ms, 基本可以接受。</p><p><img src="`+u+'" alt=""></p><ul><li>查询20天，看时间仍然需要20s</li></ul><p><img src="'+c+'" alt=""></p><ul><li>通过增加索引小结 到这里我们基本可以看到添加查询index对BI接口的影响，索引的添加只是解决了针对索引字段查询的效率，但是并不能解决查询之后数据的聚合问题。对一天而言由于数据量的少，查询速度提升显著，但是对大量数据做聚合仍然不合适。</li></ul><p>我们通过增加索引解决了什么问题?</p><blockquote><p>在没有索引的前提下，找出100万条{eventType: &quot;abnormal&quot;}需要多少时间? 全表扫描COLLSCAN从700w条数据中找出600w条，跟从1亿条数据中找出600w条显然是两个概念。命中索引IXSCAN，这个差异就会小很多，几乎可以忽略。索引的添加只是解决了针对索引字段查询的效率，但是并不能解决查询之后数据的聚合问题。顺便应该提一下看效率是否有差异应该看执行计划，不要看执行时间，时间是不准确的。</p></blockquote><h3 id="性能优化-聚合大量数据" tabindex="-1">性能优化 - 聚合大量数据 <a class="header-anchor" href="#性能优化-聚合大量数据" aria-label="Permalink to &quot;性能优化 - 聚合大量数据&quot;">​</a></h3><blockquote><p>那问题是，如何解决这种查询聚合大量数据的问题呢?</p></blockquote><p>首先要说明的一个问题是，对于OLAP型的操作，期望不应该太高。毕竟是对于大量数据的操作，光从IO就已经远超通常的OLTP操作，所以要求达到OLTP操作的速度和并发是不现实的，也是没有意义的。但并不是说一点优化空间也没有。</p><p>这样优化之后预计在可以提升一部分查询性能，但是并不能解决。原因开头说了，对OLAP就不能期望这么高。如果你真有这方面的需求，就应该从源头入手，考虑:</p><ul><li>每次info字段有更新或插入时就做好计数</li><li>每隔一段时间做一次完整的统计，缓存统计结果，查询的时候直接展现给用户</li></ul><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><p>小结如下:</p><ul><li><p><code>慢查询定位</code>: 通过Profile分析慢查询</p></li><li><p><code>对于查询优化</code>: 通过添加相应索引提升查询速度；</p></li><li><p><code>对于聚合大数据方案</code>: 首先要说明的一个问题是，对于OLAP型的操作，期望不应该太高。毕竟是对于大量数据的操作，光从IO就已经远超通常的OLTP操作，所以要求达到OLTP操作的速度和并发是不现实的，也是没有意义的。但并不是说一点优化空间也没有。</p></li></ul><p>这样优化之后预计在可以提升一部分查询性能，但是并不能解决。原因开头说了，对OLAP就不能期望这么高，应该从源头入手，考虑:</p><ul><li>每次eventType字段和insertTime有更新或插入时就做好计数</li><li>每隔一段时间做一次完整的统计，缓存统计结果，查询的时候直接展现给用户</li></ul><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>',62)]))}const v=s(q,[["render",r]]);export{f as __pageData,v as default};
