import{_ as t}from"./chunks/db-redis-ds-1.Dd_46qsR.js";import{_ as a,c as n,ai as e,o as l}from"./chunks/framework.BrYByd3F.js";const p="/vitepress-blog-template/images/db/redis/db-redis-ds-3.png",r="/vitepress-blog-template/images/db/redis/db-redis-ds-5.png",i="/vitepress-blog-template/images/db/redis/db-redis-ds-7.png",o="/vitepress-blog-template/images/db/redis/db-redis-ds-4.png",d="/vitepress-blog-template/images/db/redis/db-redis-ds-8.png",S=JSON.parse('{"title":"Redis入门 - 数据类型：5种基础数据类型详解","description":"","frontmatter":{},"headers":[],"relativePath":"db/nosql-redis/db-redis-data-types.md","filePath":"db/nosql-redis/db-redis-data-types.md","lastUpdated":1737706346000}'),h={name:"db/nosql-redis/db-redis-data-types.md"};function u(c,s,g,b,m,q){return l(),n("div",null,s[0]||(s[0]=[e('<h1 id="redis入门-数据类型-5种基础数据类型详解" tabindex="-1">Redis入门 - 数据类型：5种基础数据类型详解 <a class="header-anchor" href="#redis入门-数据类型-5种基础数据类型详解" aria-label="Permalink to &quot;Redis入门 - 数据类型：5种基础数据类型详解&quot;">​</a></h1><blockquote><p>Redis所有的key（键）都是字符串。我们在谈基础数据结构时，讨论的是存储值的数据类型，主要包括常见的5种数据类型，分别是：String、List、Set、Zset、Hash</p></blockquote><h2 id="redis数据结构简介" tabindex="-1">Redis数据结构简介 <a class="header-anchor" href="#redis数据结构简介" aria-label="Permalink to &quot;Redis数据结构简介&quot;">​</a></h2><blockquote><p>Redis基础文章非常多，关于基础数据结构类型，我推荐你先看下<a href="https://redis.io/topics/data-types" target="_blank" rel="noreferrer">官方网站内容在新窗口打开</a>，然后再看下面的小结</p></blockquote><p>首先对redis来说，所有的key（键）都是字符串。我们在谈基础数据结构时，讨论的是存储值的数据类型，主要包括常见的5种数据类型，分别是：String、List、Set、Zset、Hash。</p><p><img src="'+t+'" alt="error.图片加载失败"></p><table tabindex="0"><thead><tr><th>结构类型</th><th>结构存储的值</th><th>结构的读写能力</th></tr></thead><tbody><tr><td><strong>String字符串</strong></td><td>可以是字符串、整数或浮点数</td><td>对整个字符串或字符串的一部分进行操作；对整数或浮点数进行自增或自减操作；</td></tr><tr><td><strong>List列表</strong></td><td>一个链表，链表上的每个节点都包含一个字符串</td><td>对链表的两端进行push和pop操作，读取单个或多个元素；根据值查找或删除元素；</td></tr><tr><td><strong>Set集合</strong></td><td>包含字符串的无序集合</td><td>字符串的集合，包含基础的方法有看是否存在添加、获取、删除；还包含计算交集、并集、差集等</td></tr><tr><td><strong>Hash散列</strong></td><td>包含键值对的无序散列表</td><td>包含方法有添加、获取、删除单个元素</td></tr><tr><td><strong>Zset有序集合</strong></td><td>和散列一样，用于存储键值对</td><td>字符串成员与浮点数分数之间的有序映射；元素的排列顺序由分数的大小决定；包含方法有添加、获取、删除单个元素以及根据分值范围或成员来获取元素</td></tr></tbody></table><h2 id="基础数据结构详解" tabindex="-1">基础数据结构详解 <a class="header-anchor" href="#基础数据结构详解" aria-label="Permalink to &quot;基础数据结构详解&quot;">​</a></h2><blockquote><p>内容其实比较简单，我觉得理解的重点在于这个结构怎么用，能够用来做什么？所以我在梳理时，围绕<strong>图例</strong>，<strong>命令</strong>，<strong>执行</strong>和<strong>场景</strong>来阐述。@pdai</p></blockquote><h3 id="string字符串" tabindex="-1">String字符串 <a class="header-anchor" href="#string字符串" aria-label="Permalink to &quot;String字符串&quot;">​</a></h3><blockquote><p>String是redis中最基本的数据类型，一个key对应一个value。</p></blockquote><p>String类型是二进制安全的，意思是 redis 的 string 可以包含任何数据。如数字，字符串，jpg图片或者序列化的对象。</p><ul><li><strong>图例</strong></li></ul><p>下图是一个String类型的实例，其中键为hello，值为world</p><p><img src="'+p+`" alt="error.图片加载失败"></p><ul><li><strong>命令使用</strong></li></ul><table tabindex="0"><thead><tr><th>命令</th><th>简述</th><th>使用</th></tr></thead><tbody><tr><td>GET</td><td>获取存储在给定键中的值</td><td>GET name</td></tr><tr><td>SET</td><td>设置存储在给定键中的值</td><td>SET name value</td></tr><tr><td>DEL</td><td>删除存储在给定键中的值</td><td>DEL name</td></tr><tr><td>INCR</td><td>将键存储的值加1</td><td>INCR key</td></tr><tr><td>DECR</td><td>将键存储的值减1</td><td>DECR key</td></tr><tr><td>INCRBY</td><td>将键存储的值加上整数</td><td>INCRBY key amount</td></tr><tr><td>DECRBY</td><td>将键存储的值减去整数</td><td>DECRBY key amount</td></tr></tbody></table><ul><li><strong>命令执行</strong></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>127.0.0.1:6379&gt; set hello world</span></span>
<span class="line"><span>OK</span></span>
<span class="line"><span>127.0.0.1:6379&gt; get hello</span></span>
<span class="line"><span>&quot;world&quot;</span></span>
<span class="line"><span>127.0.0.1:6379&gt; del hello</span></span>
<span class="line"><span>(integer) 1</span></span>
<span class="line"><span>127.0.0.1:6379&gt; get hello</span></span>
<span class="line"><span>(nil)</span></span>
<span class="line"><span>127.0.0.1:6379&gt; set counter 2</span></span>
<span class="line"><span>OK</span></span>
<span class="line"><span>127.0.0.1:6379&gt; get counter</span></span>
<span class="line"><span>&quot;2&quot;</span></span>
<span class="line"><span>127.0.0.1:6379&gt; incr counter</span></span>
<span class="line"><span>(integer) 3</span></span>
<span class="line"><span>127.0.0.1:6379&gt; get counter</span></span>
<span class="line"><span>&quot;3&quot;</span></span>
<span class="line"><span>127.0.0.1:6379&gt; incrby counter 100</span></span>
<span class="line"><span>(integer) 103</span></span>
<span class="line"><span>127.0.0.1:6379&gt; get counter</span></span>
<span class="line"><span>&quot;103&quot;</span></span>
<span class="line"><span>127.0.0.1:6379&gt; decr counter</span></span>
<span class="line"><span>(integer) 102</span></span>
<span class="line"><span>127.0.0.1:6379&gt; get counter</span></span>
<span class="line"><span>&quot;102&quot;</span></span></code></pre></div><ul><li><strong>实战场景</strong><ul><li><strong>缓存</strong>： 经典使用场景，把常用信息，字符串，图片或者视频等信息放到redis中，redis作为缓存层，mysql做持久化层，降低mysql的读写压力。</li><li><strong>计数器</strong>：redis是单线程模型，一个命令执行完才会执行下一个，同时数据可以一步落地到其他的数据源。</li><li><strong>session</strong>：常见方案spring session + redis实现session共享，</li></ul></li></ul><h3 id="list列表" tabindex="-1">List列表 <a class="header-anchor" href="#list列表" aria-label="Permalink to &quot;List列表&quot;">​</a></h3><blockquote><p>Redis中的List其实就是链表（Redis用双端链表实现List）。</p></blockquote><p>使用List结构，我们可以轻松地实现最新消息排队功能（比如新浪微博的TimeLine）。List的另一个应用就是消息队列，可以利用List的 PUSH 操作，将任务存放在List中，然后工作线程再用 POP 操作将任务取出进行执行。</p><ul><li><strong>图例</strong></li></ul><p><img src="`+r+`" alt="error.图片加载失败"></p><ul><li><strong>命令使用</strong></li></ul><table tabindex="0"><thead><tr><th>命令</th><th>简述</th><th>使用</th></tr></thead><tbody><tr><td>RPUSH</td><td>将给定值推入到列表右端</td><td>RPUSH key value</td></tr><tr><td>LPUSH</td><td>将给定值推入到列表左端</td><td>LPUSH key value</td></tr><tr><td>RPOP</td><td>从列表的右端弹出一个值，并返回被弹出的值</td><td>RPOP key</td></tr><tr><td>LPOP</td><td>从列表的左端弹出一个值，并返回被弹出的值</td><td>LPOP key</td></tr><tr><td>LRANGE</td><td>获取列表在给定范围上的所有值</td><td>LRANGE key 0 -1</td></tr><tr><td>LINDEX</td><td>通过索引获取列表中的元素。你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。</td><td>LINDEX key index</td></tr></tbody></table><ul><li><p>使用列表的技巧</p><ul><li>lpush+lpop=Stack(栈)</li><li>lpush+rpop=Queue（队列）</li><li>lpush+ltrim=Capped Collection（有限集合）</li><li>lpush+brpop=Message Queue（消息队列）</li></ul></li><li><p><strong>命令执行</strong></p></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>127.0.0.1:6379&gt; lpush mylist 1 2 ll ls mem</span></span>
<span class="line"><span>(integer) 5</span></span>
<span class="line"><span>127.0.0.1:6379&gt; lrange mylist 0 -1</span></span>
<span class="line"><span>1) &quot;mem&quot;</span></span>
<span class="line"><span>2) &quot;ls&quot;</span></span>
<span class="line"><span>3) &quot;ll&quot;</span></span>
<span class="line"><span>4) &quot;2&quot;</span></span>
<span class="line"><span>5) &quot;1&quot;</span></span>
<span class="line"><span>127.0.0.1:6379&gt; lindex mylist -1</span></span>
<span class="line"><span>&quot;1&quot;</span></span>
<span class="line"><span>127.0.0.1:6379&gt; lindex mylist 10        # index不在 mylist 的区间范围内</span></span>
<span class="line"><span>(nil)</span></span></code></pre></div><ul><li><strong>实战场景</strong><ul><li><strong>微博TimeLine</strong>: 有人发布微博，用lpush加入时间轴，展示新的列表信息。</li><li><strong>消息队列</strong></li></ul></li></ul><h3 id="set集合" tabindex="-1">Set集合 <a class="header-anchor" href="#set集合" aria-label="Permalink to &quot;Set集合&quot;">​</a></h3><blockquote><p>Redis 的 Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。</p></blockquote><p>Redis 中集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</p><ul><li><strong>图例</strong></li></ul><p><img src="`+i+`" alt="error.图片加载失败"></p><ul><li><strong>命令使用</strong></li></ul><table tabindex="0"><thead><tr><th>命令</th><th>简述</th><th>使用</th></tr></thead><tbody><tr><td>SADD</td><td>向集合添加一个或多个成员</td><td>SADD key value</td></tr><tr><td>SCARD</td><td>获取集合的成员数</td><td>SCARD key</td></tr><tr><td>SMEMBERS</td><td>返回集合中的所有成员</td><td>SMEMBERS key member</td></tr><tr><td>SISMEMBER</td><td>判断 member 元素是否是集合 key 的成员</td><td>SISMEMBER key member</td></tr></tbody></table><p>其它一些集合操作，请参考这里<a href="https://www.runoob.com/redis/redis-sets.html" target="_blank" rel="noreferrer">https://www.runoob.com/redis/redis-sets.html</a></p><ul><li><strong>命令执行</strong></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>127.0.0.1:6379&gt; sadd myset hao hao1 xiaohao hao</span></span>
<span class="line"><span>(integer) 3</span></span>
<span class="line"><span>127.0.0.1:6379&gt; smembers myset</span></span>
<span class="line"><span>1) &quot;xiaohao&quot;</span></span>
<span class="line"><span>2) &quot;hao1&quot;</span></span>
<span class="line"><span>3) &quot;hao&quot;</span></span>
<span class="line"><span>127.0.0.1:6379&gt; sismember myset hao</span></span>
<span class="line"><span>(integer) 1</span></span></code></pre></div><ul><li><strong>实战场景</strong><ul><li><strong>标签</strong>（tag）,给用户添加标签，或者用户给消息添加标签，这样有同一标签或者类似标签的可以给推荐关注的事或者关注的人。</li><li><strong>点赞，或点踩，收藏等</strong>，可以放到set中实现</li></ul></li></ul><h3 id="hash散列" tabindex="-1">Hash散列 <a class="header-anchor" href="#hash散列" aria-label="Permalink to &quot;Hash散列&quot;">​</a></h3><blockquote><p>Redis hash 是一个 string 类型的 field（字段） 和 value（值） 的映射表，hash 特别适合用于存储对象。</p></blockquote><ul><li><strong>图例</strong></li></ul><p><img src="`+o+`" alt="error.图片加载失败"></p><ul><li><strong>命令使用</strong></li></ul><table tabindex="0"><thead><tr><th>命令</th><th>简述</th><th>使用</th></tr></thead><tbody><tr><td>HSET</td><td>添加键值对</td><td>HSET hash-key sub-key1 value1</td></tr><tr><td>HGET</td><td>获取指定散列键的值</td><td>HGET hash-key key1</td></tr><tr><td>HGETALL</td><td>获取散列中包含的所有键值对</td><td>HGETALL hash-key</td></tr><tr><td>HDEL</td><td>如果给定键存在于散列中，那么就移除这个键</td><td>HDEL hash-key sub-key1</td></tr></tbody></table><ul><li><strong>命令执行</strong></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>127.0.0.1:6379&gt; hset user name1 hao</span></span>
<span class="line"><span>(integer) 1</span></span>
<span class="line"><span>127.0.0.1:6379&gt; hset user email1 hao@163.com</span></span>
<span class="line"><span>(integer) 1</span></span>
<span class="line"><span>127.0.0.1:6379&gt; hgetall user</span></span>
<span class="line"><span>1) &quot;name1&quot;</span></span>
<span class="line"><span>2) &quot;hao&quot;</span></span>
<span class="line"><span>3) &quot;email1&quot;</span></span>
<span class="line"><span>4) &quot;hao@163.com&quot;</span></span>
<span class="line"><span>127.0.0.1:6379&gt; hget user user</span></span>
<span class="line"><span>(nil)</span></span>
<span class="line"><span>127.0.0.1:6379&gt; hget user name1</span></span>
<span class="line"><span>&quot;hao&quot;</span></span>
<span class="line"><span>127.0.0.1:6379&gt; hset user name2 xiaohao</span></span>
<span class="line"><span>(integer) 1</span></span>
<span class="line"><span>127.0.0.1:6379&gt; hset user email2 xiaohao@163.com</span></span>
<span class="line"><span>(integer) 1</span></span>
<span class="line"><span>127.0.0.1:6379&gt; hgetall user</span></span>
<span class="line"><span>1) &quot;name1&quot;</span></span>
<span class="line"><span>2) &quot;hao&quot;</span></span>
<span class="line"><span>3) &quot;email1&quot;</span></span>
<span class="line"><span>4) &quot;hao@163.com&quot;</span></span>
<span class="line"><span>5) &quot;name2&quot;</span></span>
<span class="line"><span>6) &quot;xiaohao&quot;</span></span>
<span class="line"><span>7) &quot;email2&quot;</span></span>
<span class="line"><span>8) &quot;xiaohao@163.com&quot;</span></span></code></pre></div><ul><li><strong>实战场景</strong><ul><li><strong>缓存</strong>： 能直观，相比string更节省空间，的维护缓存信息，如用户信息，视频信息等。</li></ul></li></ul><h3 id="zset有序集合" tabindex="-1">Zset有序集合 <a class="header-anchor" href="#zset有序集合" aria-label="Permalink to &quot;Zset有序集合&quot;">​</a></h3><blockquote><p>Redis 有序集合和集合一样也是 string 类型元素的集合,且不允许重复的成员。不同的是每个元素都会关联一个 double 类型的分数。redis 正是通过分数来为集合中的成员进行从小到大的排序。</p></blockquote><p>有序集合的成员是唯一的, 但分数(score)却可以重复。有序集合是通过两种数据结构实现：</p><ol><li><strong>压缩列表(ziplist)</strong>: ziplist是为了提高存储效率而设计的一种特殊编码的双向链表。它可以存储字符串或者整数，存储整数时是采用整数的二进制而不是字符串形式存储。它能在O(1)的时间复杂度下完成list两端的push和pop操作。但是因为每次操作都需要重新分配ziplist的内存，所以实际复杂度和ziplist的内存使用量相关</li><li><strong>跳跃表（zSkiplist)</strong>: 跳跃表的性能可以保证在查找，删除，添加等操作的时候在对数期望时间内完成，这个性能是可以和平衡树来相比较的，而且在实现方面比平衡树要优雅，这是采用跳跃表的主要原因。跳跃表的复杂度是O(log(n))。</li></ol><ul><li><strong>图例</strong></li></ul><p><img src="`+d+`" alt="error.图片加载失败"></p><ul><li><strong>命令使用</strong></li></ul><table tabindex="0"><thead><tr><th>命令</th><th>简述</th><th>使用</th></tr></thead><tbody><tr><td>ZADD</td><td>将一个带有给定分值的成员添加到有序集合里面</td><td>ZADD zset-key 178 member1</td></tr><tr><td>ZRANGE</td><td>根据元素在有序集合中所处的位置，从有序集合中获取多个元素</td><td>ZRANGE zset-key 0-1 withccores</td></tr><tr><td>ZREM</td><td>如果给定元素成员存在于有序集合中，那么就移除这个元素</td><td>ZREM zset-key member1</td></tr></tbody></table><p>更多命令请参考这里 <a href="https://www.runoob.com/redis/redis-sorted-sets.html" target="_blank" rel="noreferrer">https://www.runoob.com/redis/redis-sorted-sets.html</a></p><ul><li><strong>命令执行</strong></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>127.0.0.1:6379&gt; zadd myscoreset 100 hao 90 xiaohao</span></span>
<span class="line"><span>(integer) 2</span></span>
<span class="line"><span>127.0.0.1:6379&gt; ZRANGE myscoreset 0 -1</span></span>
<span class="line"><span>1) &quot;xiaohao&quot;</span></span>
<span class="line"><span>2) &quot;hao&quot;</span></span>
<span class="line"><span>127.0.0.1:6379&gt; ZSCORE myscoreset hao</span></span>
<span class="line"><span>&quot;100&quot;</span></span></code></pre></div><ul><li><strong>实战场景</strong><ul><li><strong>排行榜</strong>：有序集合经典使用场景。例如小说视频等网站需要对用户上传的小说视频做排行榜，榜单可以按照用户关注数，更新时间，字数等打分，做排行。</li></ul></li></ul><h2 id="参考文章" tabindex="-1">参考文章 <a class="header-anchor" href="#参考文章" aria-label="Permalink to &quot;参考文章&quot;">​</a></h2><ul><li><a href="http://ddrv.cn/a/260579" target="_blank" rel="noreferrer">http://ddrv.cn/a/260579</a></li><li><a href="https://www.cnblogs.com/haoprogrammer/p/11065461.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/haoprogrammer/p/11065461.html</a></li><li><a href="https://www.pianshen.com/article/6479421770/" target="_blank" rel="noreferrer">https://www.pianshen.com/article/6479421770/</a></li><li><a href="https://www.runoob.com/redis/redis-sorted-sets.html" target="_blank" rel="noreferrer">https://www.runoob.com/redis/redis-sorted-sets.html</a></li></ul><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>`,65)]))}const _=a(h,[["render",u]]);export{S as __pageData,_ as default};
