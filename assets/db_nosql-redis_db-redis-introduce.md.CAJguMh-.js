import{_ as i,c as a,ai as r,o as t}from"./chunks/framework.BrYByd3F.js";const c=JSON.parse('{"title":"Redis入门 - Redis概念和基础","description":"","frontmatter":{},"headers":[],"relativePath":"db/nosql-redis/db-redis-introduce.md","filePath":"db/nosql-redis/db-redis-introduce.md","lastUpdated":1737706346000}'),s={name:"db/nosql-redis/db-redis-introduce.md"};function l(o,e,d,n,h,p){return t(),a("div",null,e[0]||(e[0]=[r('<h1 id="redis入门-redis概念和基础" tabindex="-1">Redis入门 - Redis概念和基础 <a class="header-anchor" href="#redis入门-redis概念和基础" aria-label="Permalink to &quot;Redis入门 - Redis概念和基础&quot;">​</a></h1><blockquote><p>Redis是一种支持key-value等多种数据结构的存储系统。可用于缓存，事件发布或订阅，高速队列等场景。支持网络，提供字符串，哈希，列表，队列，集合结构直接存取，基于内存，可持久化。</p></blockquote><h2 id="什么是redis" tabindex="-1">什么是Redis <a class="header-anchor" href="#什么是redis" aria-label="Permalink to &quot;什么是Redis&quot;">​</a></h2><p>Redis是一款内存高速缓存数据库。Redis全称为：<strong>Remote Dictionary Server</strong>（远程数据服务），使用C语言编写，Redis是一个key-value存储系统（键值存储系统），支持丰富的数据类型，如：String、list、set、zset、hash。</p><p>Redis是一种支持key-value等多种数据结构的存储系统。可用于缓存，事件发布或订阅，高速队列等场景。支持网络，提供字符串，哈希，列表，队列，集合结构直接存取，基于内存，可持久化。</p><h3 id="官方资料" tabindex="-1">官方资料 <a class="header-anchor" href="#官方资料" aria-label="Permalink to &quot;官方资料&quot;">​</a></h3><p>Redis官网:<a href="http://redis.io/" target="_blank" rel="noreferrer">http://redis.io/</a></p><p>Redis官方文档:<a href="http://redis.io/documentation" target="_blank" rel="noreferrer">http://redis.io/documentation</a></p><p>Redis教程:<a href="http://www.w3cschool.cn/redis/redis-intro.html" target="_blank" rel="noreferrer">http://www.w3cschool.cn/redis/redis-intro.html</a></p><p>Redis下载:<a href="http://redis.io/download" target="_blank" rel="noreferrer">http://redis.io/download</a></p><h2 id="为什么要使用redis" tabindex="-1">为什么要使用Redis <a class="header-anchor" href="#为什么要使用redis" aria-label="Permalink to &quot;为什么要使用Redis&quot;">​</a></h2><blockquote><p>一个产品的使用场景肯定是需要根据产品的特性，先列举一下Redis的特点：</p></blockquote><ul><li><strong>读写性能优异</strong><ul><li>Redis能读的速度是110000次/s,写的速度是81000次/s （测试条件见下一节）。</li></ul></li><li><strong>数据类型丰富</strong><ul><li>Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</li></ul></li><li><strong>原子性</strong><ul><li>Redis的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行。</li></ul></li><li><strong>丰富的特性</strong><ul><li>Redis支持 publish/subscribe, 通知, key 过期等特性。</li></ul></li><li><strong>持久化</strong><ul><li>Redis支持RDB, AOF等持久化方式</li></ul></li><li><strong>发布订阅</strong><ul><li>Redis支持发布/订阅模式</li></ul></li><li><strong>分布式</strong><ul><li>Redis Cluster</li></ul></li></ul><p>（PS: 具体再结合下面的使用场景理解下）</p><blockquote><p>下面是官方的bench-mark根据如下条件获得的性能测试（<strong>读的速度是110000次/s,写的速度是81000次/s</strong>）</p></blockquote><ul><li>测试完成了50个并发执行100000个请求。</li><li>设置和获取的值是一个256字节字符串。</li><li>Linux box是运行Linux 2.6,这是X3320 Xeon 2.5 ghz。</li><li>文本执行使用loopback接口(127.0.0.1)。</li></ul><h2 id="redis的使用场景" tabindex="-1">Redis的使用场景 <a class="header-anchor" href="#redis的使用场景" aria-label="Permalink to &quot;Redis的使用场景&quot;">​</a></h2><blockquote><p>redis应用场景总结redis平时我们用到的地方蛮多的，下面就了解的应用场景做个总结：</p></blockquote><h3 id="热点数据的缓存" tabindex="-1">热点数据的缓存 <a class="header-anchor" href="#热点数据的缓存" aria-label="Permalink to &quot;热点数据的缓存&quot;">​</a></h3><p>缓存是Redis最常见的应用场景，之所有这么使用，主要是因为Redis读写性能优异。而且逐渐有取代memcached，成为首选服务端缓存的组件。而且，Redis内部是支持事务的，在使用时候能有效保证数据的一致性。</p><p>作为缓存使用时，一般有两种方式保存数据：</p><ul><li>读取前，先去读Redis，如果没有数据，读取数据库，将数据拉入Redis。</li><li>插入数据时，同时写入Redis。</li></ul><p>方案一：实施起来简单，但是有两个需要注意的地方：</p><ul><li>避免缓存击穿。（数据库没有就需要命中的数据，导致Redis一直没有数据，而一直命中数据库。）</li><li>数据的实时性相对会差一点。</li></ul><p>方案二：数据实时性强，但是开发时不便于统一处理。</p><p>当然，两种方式根据实际情况来适用。如：方案一适用于对于数据实时性要求不是特别高的场景。方案二适用于字典表、数据量不大的数据存储。</p><h3 id="限时业务的运用" tabindex="-1">限时业务的运用 <a class="header-anchor" href="#限时业务的运用" aria-label="Permalink to &quot;限时业务的运用&quot;">​</a></h3><p>redis中可以使用expire命令设置一个键的生存时间，到时间后redis会删除它。利用这一特性可以运用在限时的优惠活动信息、手机验证码等业务场景。</p><h3 id="计数器相关问题" tabindex="-1">计数器相关问题 <a class="header-anchor" href="#计数器相关问题" aria-label="Permalink to &quot;计数器相关问题&quot;">​</a></h3><p>redis由于incrby命令可以实现原子性的递增，所以可以运用于高并发的秒杀活动、分布式序列号的生成、具体业务还体现在比如限制一个手机号发多少条短信、一个接口一分钟限制多少请求、一个接口一天限制调用多少次等等。</p><h3 id="分布式锁" tabindex="-1">分布式锁 <a class="header-anchor" href="#分布式锁" aria-label="Permalink to &quot;分布式锁&quot;">​</a></h3><p>这个主要利用redis的setnx命令进行，setnx：&quot;set if not exists&quot;就是如果不存在则成功设置缓存同时返回1，否则返回0 ，这个特性在很多后台中都有所运用，因为我们服务器是集群的，定时任务可能在两台机器上都会运行，所以在定时任务中首先 通过setnx设置一个lock， 如果成功设置则执行，如果没有成功设置，则表明该定时任务已执行。 当然结合具体业务，我们可以给这个lock加一个过期时间，比如说30分钟执行一次的定时任务，那么这个过期时间设置为小于30分钟的一个时间就可以，这个与定时任务的周期以及定时任务执行消耗时间相关。</p><p>在分布式锁的场景中，主要用在比如秒杀系统等。</p><h3 id="延时操作" tabindex="-1">延时操作 <a class="header-anchor" href="#延时操作" aria-label="Permalink to &quot;延时操作&quot;">​</a></h3><p>比如在订单生产后我们占用了库存，10分钟后去检验用户是否真正购买，如果没有购买将该单据设置无效，同时还原库存。 由于redis自2.8.0之后版本提供Keyspace Notifications功能，允许客户订阅Pub/Sub频道，以便以某种方式接收影响Redis数据集的事件。 所以我们对于上面的需求就可以用以下解决方案，我们在订单生产时，设置一个key，同时设置10分钟后过期， 我们在后台实现一个监听器，监听key的实效，监听到key失效时将后续逻辑加上。</p><p>当然我们也可以利用rabbitmq、activemq等消息中间件的延迟队列服务实现该需求。</p><h3 id="排行榜相关问题" tabindex="-1">排行榜相关问题 <a class="header-anchor" href="#排行榜相关问题" aria-label="Permalink to &quot;排行榜相关问题&quot;">​</a></h3><p>关系型数据库在排行榜方面查询速度普遍偏慢，所以可以借助redis的SortedSet进行热点数据的排序。</p><p>比如点赞排行榜，做一个SortedSet, 然后以用户的openid作为上面的username, 以用户的点赞数作为上面的score, 然后针对每个用户做一个hash, 通过zrangebyscore就可以按照点赞数获取排行榜，然后再根据username获取用户的hash信息，这个当时在实际运用中性能体验也蛮不错的。</p><h3 id="点赞、好友等相互关系的存储" tabindex="-1">点赞、好友等相互关系的存储 <a class="header-anchor" href="#点赞、好友等相互关系的存储" aria-label="Permalink to &quot;点赞、好友等相互关系的存储&quot;">​</a></h3><p>Redis 利用集合的一些命令，比如求交集、并集、差集等。</p><p>在微博应用中，每个用户关注的人存在一个集合中，就很容易实现求两个人的共同好友功能。</p><h3 id="简单队列" tabindex="-1">简单队列 <a class="header-anchor" href="#简单队列" aria-label="Permalink to &quot;简单队列&quot;">​</a></h3><p>由于Redis有list push和list pop这样的命令，所以能够很方便的执行队列操作。</p><h2 id="参考文章" tabindex="-1">参考文章 <a class="header-anchor" href="#参考文章" aria-label="Permalink to &quot;参考文章&quot;">​</a></h2><ul><li><a href="https://baike.baidu.com/item/Redis/6549233?fr=aladdin" target="_blank" rel="noreferrer">https://baike.baidu.com/item/Redis/6549233?fr=aladdin</a></li><li><a href="https://zhuanlan.zhihu.com/p/29665317" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/29665317</a></li><li><a href="https://www.jianshu.com/p/40dbc78711c8" target="_blank" rel="noreferrer">https://www.jianshu.com/p/40dbc78711c8</a></li></ul><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>',47)]))}const b=i(s,[["render",l]]);export{c as __pageData,b as default};
