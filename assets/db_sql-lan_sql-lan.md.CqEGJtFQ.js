import{_ as s,c as n,ai as t,o as e}from"./chunks/framework.BrYByd3F.js";const b=JSON.parse('{"title":"SQL语言 - SQL语法基础","description":"","frontmatter":{},"headers":[],"relativePath":"db/sql-lan/sql-lan.md","filePath":"db/sql-lan/sql-lan.md","lastUpdated":1737706346000}'),p={name:"db/sql-lan/sql-lan.md"};function l(i,a,d,c,o,r){return e(),n("div",null,a[0]||(a[0]=[t(`<h1 id="sql语言-sql语法基础" tabindex="-1">SQL语言 - SQL语法基础 <a class="header-anchor" href="#sql语言-sql语法基础" aria-label="Permalink to &quot;SQL语言 - SQL语法基础&quot;">​</a></h1><blockquote><p>本文包含了所有SQL语言的基础语法，并用例子的方式向你展示。@pdai</p></blockquote><h2 id="基础" tabindex="-1">基础 <a class="header-anchor" href="#基础" aria-label="Permalink to &quot;基础&quot;">​</a></h2><p>模式定义了数据如何存储、存储什么样的数据以及数据如何分解等信息，数据库和表都有模式。</p><p>主键的值不允许修改，也不允许复用(不能使用已经删除的主键值赋给新数据行的主键)。</p><p>SQL(Structured Query Language)，标准 SQL 由 ANSI 标准委员会管理，从而称为 ANSI SQL。各个 DBMS 都有自己的实现，如 PL/SQL、Transact-SQL 等。</p><p>SQL 语句不区分大小写，但是数据库表名、列名和值是否区分依赖于具体的 DBMS 以及配置。</p><p>SQL 支持以下三种注释:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 注释</span></span>
<span class="line"><span>SELECT *</span></span>
<span class="line"><span>FROM mytable; -- 注释</span></span>
<span class="line"><span>/* 注释1</span></span>
<span class="line"><span>   注释2 */</span></span></code></pre></div><p>数据库创建与使用:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE DATABASE test;</span></span>
<span class="line"><span>USE test;</span></span></code></pre></div><h2 id="创建表" tabindex="-1">创建表 <a class="header-anchor" href="#创建表" aria-label="Permalink to &quot;创建表&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE TABLE mytable (</span></span>
<span class="line"><span>  id INT NOT NULL AUTO_INCREMENT,</span></span>
<span class="line"><span>  col1 INT NOT NULL DEFAULT 1,</span></span>
<span class="line"><span>  col2 VARCHAR(45) NULL,</span></span>
<span class="line"><span>  col3 DATE NULL,</span></span>
<span class="line"><span>  PRIMARY KEY (\`id\`));</span></span></code></pre></div><h2 id="修改表" tabindex="-1">修改表 <a class="header-anchor" href="#修改表" aria-label="Permalink to &quot;修改表&quot;">​</a></h2><p>添加列</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ALTER TABLE mytable</span></span>
<span class="line"><span>ADD col CHAR(20);</span></span></code></pre></div><p>修改列和属性（读者@CodeHourra补充）</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>---ALTER TABLE 表名 CHANGE 原字段名 新字段名 字段类型 约束条件</span></span>
<span class="line"><span>ALTER TABLE mytable </span></span>
<span class="line"><span>CHANGE col col1 CHAR(32) NOT NULL DEFAULT &#39;123&#39;;</span></span></code></pre></div><p>删除列</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ALTER TABLE mytable</span></span>
<span class="line"><span>DROP COLUMN col;</span></span></code></pre></div><p>删除表</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DROP TABLE mytable;</span></span></code></pre></div><h2 id="插入" tabindex="-1">插入 <a class="header-anchor" href="#插入" aria-label="Permalink to &quot;插入&quot;">​</a></h2><p>普通插入</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>INSERT INTO mytable(col1, col2)</span></span>
<span class="line"><span>VALUES(val1, val2);</span></span></code></pre></div><p>插入检索出来的数据</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>INSERT INTO mytable1(col1, col2)</span></span>
<span class="line"><span>SELECT col1, col2</span></span>
<span class="line"><span>FROM mytable2;</span></span></code></pre></div><p>将一个表的内容插入到一个新表</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE TABLE newtable AS</span></span>
<span class="line"><span>SELECT * FROM mytable;</span></span></code></pre></div><h2 id="更新" tabindex="-1">更新 <a class="header-anchor" href="#更新" aria-label="Permalink to &quot;更新&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>UPDATE mytable</span></span>
<span class="line"><span>SET col = val</span></span>
<span class="line"><span>WHERE id = 1;</span></span></code></pre></div><h2 id="删除" tabindex="-1">删除 <a class="header-anchor" href="#删除" aria-label="Permalink to &quot;删除&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DELETE FROM mytable</span></span>
<span class="line"><span>WHERE id = 1;</span></span></code></pre></div><p><strong>TRUNCATE TABLE</strong> 可以清空表，也就是删除所有行。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>TRUNCATE TABLE mytable;</span></span></code></pre></div><p>使用更新和删除操作时一定要用 WHERE 子句，不然会把整张表的数据都破坏。可以先用 SELECT 语句进行测试，防止错误删除。</p><h2 id="查询" tabindex="-1">查询 <a class="header-anchor" href="#查询" aria-label="Permalink to &quot;查询&quot;">​</a></h2><h3 id="distinct" tabindex="-1">DISTINCT <a class="header-anchor" href="#distinct" aria-label="Permalink to &quot;DISTINCT&quot;">​</a></h3><p>相同值只会出现一次。它作用于所有列，也就是说所有列的值都相同才算相同。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT DISTINCT col1, col2</span></span>
<span class="line"><span>FROM mytable;</span></span></code></pre></div><h3 id="limit" tabindex="-1">LIMIT <a class="header-anchor" href="#limit" aria-label="Permalink to &quot;LIMIT&quot;">​</a></h3><p>限制返回的行数。可以有两个参数，第一个参数为起始行，从 0 开始；第二个参数为返回的总行数。</p><p>返回前 5 行:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT *</span></span>
<span class="line"><span>FROM mytable</span></span>
<span class="line"><span>LIMIT 5;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT *</span></span>
<span class="line"><span>FROM mytable</span></span>
<span class="line"><span>LIMIT 0, 5;</span></span></code></pre></div><p>返回第 3 ~ 5 行:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT *</span></span>
<span class="line"><span>FROM mytable</span></span>
<span class="line"><span>LIMIT 2, 3;</span></span></code></pre></div><h2 id="排序" tabindex="-1">排序 <a class="header-anchor" href="#排序" aria-label="Permalink to &quot;排序&quot;">​</a></h2><ul><li><strong>ASC</strong> : 升序(默认)</li><li><strong>DESC</strong> : 降序</li></ul><p>可以按多个列进行排序，并且为每个列指定不同的排序方式:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT *</span></span>
<span class="line"><span>FROM mytable</span></span>
<span class="line"><span>ORDER BY col1 DESC, col2 ASC;</span></span></code></pre></div><h2 id="过滤" tabindex="-1">过滤 <a class="header-anchor" href="#过滤" aria-label="Permalink to &quot;过滤&quot;">​</a></h2><p>不进行过滤的数据非常大，导致通过网络传输了多余的数据，从而浪费了网络带宽。因此尽量使用 SQL 语句来过滤不必要的数据，而不是传输所有的数据到客户端中然后由客户端进行过滤。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT *</span></span>
<span class="line"><span>FROM mytable</span></span>
<span class="line"><span>WHERE col IS NULL;</span></span></code></pre></div><p>下表显示了 WHERE 子句可用的操作符</p><table tabindex="0"><thead><tr><th>操作符</th><th>说明</th></tr></thead><tbody><tr><td>=</td><td>等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;&gt; !=</td><td>不等于</td></tr><tr><td>&lt;= !&gt;</td><td>小于等于</td></tr><tr><td>&gt;= !&lt;</td><td>大于等于</td></tr><tr><td>BETWEEN</td><td>在两个值之间</td></tr><tr><td>IS NULL</td><td>为 NULL 值</td></tr></tbody></table><p>应该注意到，NULL 与 0、空字符串都不同。</p><p><strong>AND 和 OR</strong> 用于连接多个过滤条件。优先处理 AND，当一个过滤表达式涉及到多个 AND 和 OR 时，可以使用 () 来决定优先级，使得优先级关系更清晰。</p><p><strong>IN</strong> 操作符用于匹配一组值，其后也可以接一个 SELECT 子句，从而匹配子查询得到的一组值。</p><p><strong>NOT</strong> 操作符用于否定一个条件。</p><h2 id="通配符" tabindex="-1">通配符 <a class="header-anchor" href="#通配符" aria-label="Permalink to &quot;通配符&quot;">​</a></h2><p>通配符也是用在过滤语句中，但它只能用于文本字段。</p><ul><li><p><strong>%</strong> 匹配 &gt;=0 个任意字符；</p></li><li><p><strong>_</strong> 匹配 ==1 个任意字符；</p></li><li><p><strong>[ ]</strong> 可以匹配集合内的字符，例如 [ab] 将匹配字符 a 或者 b。用脱字符 ^ 可以对其进行否定，也就是不匹配集合内的字符。</p></li></ul><p>使用 Like 来进行通配符匹配。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT *</span></span>
<span class="line"><span>FROM mytable</span></span>
<span class="line"><span>WHERE col LIKE &#39;[^AB]%&#39;; -- 不以 A 和 B 开头的任意文本</span></span></code></pre></div><p>不要滥用通配符，通配符位于开头处匹配会非常慢。</p><h2 id="计算字段" tabindex="-1">计算字段 <a class="header-anchor" href="#计算字段" aria-label="Permalink to &quot;计算字段&quot;">​</a></h2><p>在数据库服务器上完成数据的转换和格式化的工作往往比客户端上快得多，并且转换和格式化后的数据量更少的话可以减少网络通信量。</p><p>计算字段通常需要使用 <strong>AS</strong> 来取别名，否则输出的时候字段名为计算表达式。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT col1 * col2 AS alias</span></span>
<span class="line"><span>FROM mytable;</span></span></code></pre></div><p><strong>CONCAT()</strong> 用于连接两个字段。许多数据库会使用空格把一个值填充为列宽，因此连接的结果会出现一些不必要的空格，使用 <strong>TRIM()</strong> 可以去除首尾空格。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT CONCAT(TRIM(col1), &#39;(&#39;, TRIM(col2), &#39;)&#39;) AS concat_col</span></span>
<span class="line"><span>FROM mytable;</span></span></code></pre></div><h2 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-label="Permalink to &quot;函数&quot;">​</a></h2><p>各个 DBMS 的函数都是不相同的，因此不可移植，以下主要是 MySQL 的函数。</p><h3 id="汇总" tabindex="-1">汇总 <a class="header-anchor" href="#汇总" aria-label="Permalink to &quot;汇总&quot;">​</a></h3><table tabindex="0"><thead><tr><th>函 数</th><th>说 明</th></tr></thead><tbody><tr><td>AVG()</td><td>返回某列的平均值</td></tr><tr><td>COUNT()</td><td>返回某列的行数</td></tr><tr><td>MAX()</td><td>返回某列的最大值</td></tr><tr><td>MIN()</td><td>返回某列的最小值</td></tr><tr><td>SUM()</td><td>返回某列值之和</td></tr></tbody></table><p>AVG() 会忽略 NULL 行。</p><p>使用 DISTINCT 可以让汇总函数值汇总不同的值。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT AVG(DISTINCT col1) AS avg_col</span></span>
<span class="line"><span>FROM mytable;</span></span></code></pre></div><h3 id="文本处理" tabindex="-1">文本处理 <a class="header-anchor" href="#文本处理" aria-label="Permalink to &quot;文本处理&quot;">​</a></h3><table tabindex="0"><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>LEFT()</td><td>左边的字符</td></tr><tr><td>RIGHT()</td><td>右边的字符</td></tr><tr><td>LOWER()</td><td>转换为小写字符</td></tr><tr><td>UPPER()</td><td>转换为大写字符</td></tr><tr><td>LTRIM()</td><td>去除左边的空格</td></tr><tr><td>RTRIM()</td><td>去除右边的空格</td></tr><tr><td>LENGTH()</td><td>长度</td></tr><tr><td>SOUNDEX()</td><td>转换为语音值</td></tr></tbody></table><p>其中， <strong>SOUNDEX()</strong> 可以将一个字符串转换为描述其语音表示的字母数字模式。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT *</span></span>
<span class="line"><span>FROM mytable</span></span>
<span class="line"><span>WHERE SOUNDEX(col1) = SOUNDEX(&#39;apple&#39;)</span></span></code></pre></div><h3 id="日期和时间处理" tabindex="-1">日期和时间处理 <a class="header-anchor" href="#日期和时间处理" aria-label="Permalink to &quot;日期和时间处理&quot;">​</a></h3><ul><li>日期格式: YYYY-MM-DD</li><li>时间格式: HH:MM:SS</li></ul><table tabindex="0"><thead><tr><th>函 数</th><th>说 明</th></tr></thead><tbody><tr><td>AddDate()</td><td>增加一个日期(天、周等)</td></tr><tr><td>AddTime()</td><td>增加一个时间(时、分等)</td></tr><tr><td>CurDate()</td><td>返回当前日期</td></tr><tr><td>CurTime()</td><td>返回当前时间</td></tr><tr><td>Date()</td><td>返回日期时间的日期部分</td></tr><tr><td>DateDiff()</td><td>计算两个日期之差</td></tr><tr><td>Date_Add()</td><td>高度灵活的日期运算函数</td></tr><tr><td>Date_Format()</td><td>返回一个格式化的日期或时间串</td></tr><tr><td>Day()</td><td>返回一个日期的天数部分</td></tr><tr><td>DayOfWeek()</td><td>对于一个日期，返回对应的星期几</td></tr><tr><td>Hour()</td><td>返回一个时间的小时部分</td></tr><tr><td>Minute()</td><td>返回一个时间的分钟部分</td></tr><tr><td>Month()</td><td>返回一个日期的月份部分</td></tr><tr><td>Now()</td><td>返回当前日期和时间</td></tr><tr><td>Second()</td><td>返回一个时间的秒部分</td></tr><tr><td>Time()</td><td>返回一个日期时间的时间部分</td></tr><tr><td>Year()</td><td>返回一个日期的年份部分</td></tr></tbody></table><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mysql&gt; SELECT NOW();</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>2018-4-14 20:25:11</span></span></code></pre></div><h3 id="数值处理" tabindex="-1">数值处理 <a class="header-anchor" href="#数值处理" aria-label="Permalink to &quot;数值处理&quot;">​</a></h3><table tabindex="0"><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>SIN()</td><td>正弦</td></tr><tr><td>COS()</td><td>余弦</td></tr><tr><td>TAN()</td><td>正切</td></tr><tr><td>ABS()</td><td>绝对值</td></tr><tr><td>SQRT()</td><td>平方根</td></tr><tr><td>MOD()</td><td>余数</td></tr><tr><td>EXP()</td><td>指数</td></tr><tr><td>PI()</td><td>圆周率</td></tr><tr><td>RAND()</td><td>随机数</td></tr></tbody></table><h2 id="分组" tabindex="-1">分组 <a class="header-anchor" href="#分组" aria-label="Permalink to &quot;分组&quot;">​</a></h2><p>分组就是把具有相同的数据值的行放在同一组中。</p><p>可以对同一分组数据使用汇总函数进行处理，例如求分组数据的平均值等。</p><p>指定的分组字段除了能按该字段进行分组，也会自动按该字段进行排序。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT col, COUNT(*) AS num</span></span>
<span class="line"><span>FROM mytable</span></span>
<span class="line"><span>GROUP BY col;</span></span></code></pre></div><p>GROUP BY 自动按分组字段进行排序，ORDER BY 也可以按汇总字段来进行排序。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT col, COUNT(*) AS num</span></span>
<span class="line"><span>FROM mytable</span></span>
<span class="line"><span>GROUP BY col</span></span>
<span class="line"><span>ORDER BY num;</span></span></code></pre></div><p>WHERE 过滤行，HAVING 过滤分组，行过滤应当先于分组过滤。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT col, COUNT(*) AS num</span></span>
<span class="line"><span>FROM mytable</span></span>
<span class="line"><span>WHERE col &gt; 2</span></span>
<span class="line"><span>GROUP BY col</span></span>
<span class="line"><span>HAVING num &gt;= 2;</span></span></code></pre></div><p>分组规定:</p><ul><li>GROUP BY 子句出现在 WHERE 子句之后，ORDER BY 子句之前；</li><li>除了汇总字段外，SELECT 语句中的每一字段都必须在 GROUP BY 子句中给出；</li><li>NULL 的行会单独分为一组；</li><li>大多数 SQL 实现不支持 GROUP BY 列具有可变长度的数据类型。</li></ul><h2 id="子查询" tabindex="-1">子查询 <a class="header-anchor" href="#子查询" aria-label="Permalink to &quot;子查询&quot;">​</a></h2><p>子查询中只能返回一个字段的数据。</p><p>可以将子查询的结果作为 WHRER 语句的过滤条件:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT *</span></span>
<span class="line"><span>FROM mytable1</span></span>
<span class="line"><span>WHERE col1 IN (SELECT col2</span></span>
<span class="line"><span>               FROM mytable2);</span></span></code></pre></div><p>下面的语句可以检索出客户的订单数量，子查询语句会对第一个查询检索出的每个客户执行一次:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT cust_name, (SELECT COUNT(*)</span></span>
<span class="line"><span>                   FROM Orders</span></span>
<span class="line"><span>                   WHERE Orders.cust_id = Customers.cust_id)</span></span>
<span class="line"><span>                   AS orders_num</span></span>
<span class="line"><span>FROM Customers</span></span>
<span class="line"><span>ORDER BY cust_name;</span></span></code></pre></div><h2 id="连接" tabindex="-1">连接 <a class="header-anchor" href="#连接" aria-label="Permalink to &quot;连接&quot;">​</a></h2><p>连接用于连接多个表，使用 JOIN 关键字，并且条件语句使用 ON 而不是 WHERE。</p><p>连接可以替换子查询，并且比子查询的效率一般会更快。</p><p>可以用 AS 给列名、计算字段和表名取别名，给表名取别名是为了简化 SQL 语句以及连接相同表。</p><h3 id="内连接" tabindex="-1">内连接 <a class="header-anchor" href="#内连接" aria-label="Permalink to &quot;内连接&quot;">​</a></h3><p>内连接又称等值连接，使用 INNER JOIN 关键字。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT A.value, B.value</span></span>
<span class="line"><span>FROM tablea AS A INNER JOIN tableb AS B</span></span>
<span class="line"><span>ON A.key = B.key;</span></span></code></pre></div><p>可以不明确使用 INNER JOIN，而使用普通查询并在 WHERE 中将两个表中要连接的列用等值方法连接起来。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT A.value, B.value</span></span>
<span class="line"><span>FROM tablea AS A, tableb AS B</span></span>
<span class="line"><span>WHERE A.key = B.key;</span></span></code></pre></div><p>在没有条件语句的情况下返回笛卡尔积。</p><h3 id="自连接" tabindex="-1">自连接 <a class="header-anchor" href="#自连接" aria-label="Permalink to &quot;自连接&quot;">​</a></h3><p>自连接可以看成内连接的一种，只是连接的表是自身而已。</p><p>一张员工表，包含员工姓名和员工所属部门，要找出与 Jim 处在同一部门的所有员工姓名。</p><p>子查询版本</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT name</span></span>
<span class="line"><span>FROM employee</span></span>
<span class="line"><span>WHERE department = (</span></span>
<span class="line"><span>      SELECT department</span></span>
<span class="line"><span>      FROM employee</span></span>
<span class="line"><span>      WHERE name = &quot;Jim&quot;);</span></span></code></pre></div><p>自连接版本</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT e1.name</span></span>
<span class="line"><span>FROM employee AS e1 INNER JOIN employee AS e2</span></span>
<span class="line"><span>ON e1.department = e2.department</span></span>
<span class="line"><span>      AND e2.name = &quot;Jim&quot;;</span></span></code></pre></div><h3 id="自然连接" tabindex="-1">自然连接 <a class="header-anchor" href="#自然连接" aria-label="Permalink to &quot;自然连接&quot;">​</a></h3><p>自然连接是把同名列通过等值测试连接起来的，同名列可以有多个。</p><p>内连接和自然连接的区别: 内连接提供连接的列，而自然连接自动连接所有同名列。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT A.value, B.value</span></span>
<span class="line"><span>FROM tablea AS A NATURAL JOIN tableb AS B;</span></span></code></pre></div><h3 id="外连接" tabindex="-1">外连接 <a class="header-anchor" href="#外连接" aria-label="Permalink to &quot;外连接&quot;">​</a></h3><p>外连接保留了没有关联的那些行。分为左外连接，右外连接以及全外连接，左外连接就是保留左表没有关联的行。</p><p>检索所有顾客的订单信息，包括还没有订单信息的顾客。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT Customers.cust_id, Orders.order_num</span></span>
<span class="line"><span>FROM Customers LEFT OUTER JOIN Orders</span></span>
<span class="line"><span>ON Customers.cust_id = Orders.cust_id;</span></span></code></pre></div><p>customers 表:</p><table tabindex="0"><thead><tr><th>cust_id</th><th>cust_name</th></tr></thead><tbody><tr><td>1</td><td>a</td></tr><tr><td>2</td><td>b</td></tr><tr><td>3</td><td>c</td></tr></tbody></table><p>orders 表:</p><table tabindex="0"><thead><tr><th>order_id</th><th>cust_id</th></tr></thead><tbody><tr><td>1</td><td>1</td></tr><tr><td>2</td><td>1</td></tr><tr><td>3</td><td>3</td></tr><tr><td>4</td><td>3</td></tr></tbody></table><p>结果:</p><table tabindex="0"><thead><tr><th>cust_id</th><th>cust_name</th><th>order_id</th></tr></thead><tbody><tr><td>1</td><td>a</td><td>1</td></tr><tr><td>1</td><td>a</td><td>2</td></tr><tr><td>3</td><td>c</td><td>3</td></tr><tr><td>3</td><td>c</td><td>4</td></tr><tr><td>2</td><td>b</td><td>Null</td></tr></tbody></table><h2 id="组合查询" tabindex="-1">组合查询 <a class="header-anchor" href="#组合查询" aria-label="Permalink to &quot;组合查询&quot;">​</a></h2><p>使用 <strong>UNION</strong> 来组合两个查询，如果第一个查询返回 M 行，第二个查询返回 N 行，那么组合查询的结果一般为 M+N 行。</p><p>每个查询必须包含相同的列、表达式和聚集函数。</p><p>默认会去除相同行，如果需要保留相同行，使用 UNION ALL。</p><p>只能包含一个 ORDER BY 子句，并且必须位于语句的最后。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT col</span></span>
<span class="line"><span>FROM mytable</span></span>
<span class="line"><span>WHERE col = 1</span></span>
<span class="line"><span>UNION</span></span>
<span class="line"><span>SELECT col</span></span>
<span class="line"><span>FROM mytable</span></span>
<span class="line"><span>WHERE col =2;</span></span></code></pre></div><h2 id="视图" tabindex="-1">视图 <a class="header-anchor" href="#视图" aria-label="Permalink to &quot;视图&quot;">​</a></h2><p>视图是虚拟的表，本身不包含数据，也就不能对其进行索引操作。</p><p>对视图的操作和对普通表的操作一样。</p><p>视图具有如下好处:</p><ul><li>简化复杂的 SQL 操作，比如复杂的连接；</li><li>只使用实际表的一部分数据；</li><li>通过只给用户访问视图的权限，保证数据的安全性；</li><li>更改数据格式和表示。</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE VIEW myview AS</span></span>
<span class="line"><span>SELECT Concat(col1, col2) AS concat_col, col3*col4 AS compute_col</span></span>
<span class="line"><span>FROM mytable</span></span>
<span class="line"><span>WHERE col5 = val;</span></span></code></pre></div><h2 id="存储过程" tabindex="-1">存储过程 <a class="header-anchor" href="#存储过程" aria-label="Permalink to &quot;存储过程&quot;">​</a></h2><p>存储过程可以看成是对一系列 SQL 操作的批处理。</p><p>使用存储过程的好处:</p><ul><li>代码封装，保证了一定的安全性；</li><li>代码复用；</li><li>由于是预先编译，因此具有很高的性能。</li></ul><p>命令行中创建存储过程需要自定义分隔符，因为命令行是以 ; 为结束符，而存储过程中也包含了分号，因此会错误把这部分分号当成是结束符，造成语法错误。</p><p>包含 in、out 和 inout 三种参数。</p><p>给变量赋值都需要用 select into 语句。</p><p>每次只能给一个变量赋值，不支持集合的操作。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>delimiter //</span></span>
<span class="line"><span></span></span>
<span class="line"><span>create procedure myprocedure( out ret int )</span></span>
<span class="line"><span>    begin</span></span>
<span class="line"><span>        declare y int;</span></span>
<span class="line"><span>        select sum(col1)</span></span>
<span class="line"><span>        from mytable</span></span>
<span class="line"><span>        into y;</span></span>
<span class="line"><span>        select y*y into ret;</span></span>
<span class="line"><span>    end //</span></span>
<span class="line"><span></span></span>
<span class="line"><span>delimiter ;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>call myprocedure(@ret);</span></span>
<span class="line"><span>select @ret;</span></span></code></pre></div><h2 id="游标" tabindex="-1">游标 <a class="header-anchor" href="#游标" aria-label="Permalink to &quot;游标&quot;">​</a></h2><p>在存储过程中使用游标可以对一个结果集进行移动遍历。</p><p>游标主要用于交互式应用，其中用户需要对数据集中的任意行进行浏览和修改。</p><p>使用游标的四个步骤:</p><ol><li>声明游标，这个过程没有实际检索出数据；</li><li>打开游标；</li><li>取出数据；</li><li>关闭游标；</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>delimiter //</span></span>
<span class="line"><span>create procedure myprocedure(out ret int)</span></span>
<span class="line"><span>    begin</span></span>
<span class="line"><span>        declare done boolean default 0;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        declare mycursor cursor for</span></span>
<span class="line"><span>        select col1 from mytable;</span></span>
<span class="line"><span>        # 定义了一个 continue handler，当 sqlstate &#39;02000&#39; 这个条件出现时，会执行 set done = 1</span></span>
<span class="line"><span>        declare continue handler for sqlstate &#39;02000&#39; set done = 1;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        open mycursor;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        repeat</span></span>
<span class="line"><span>            fetch mycursor into ret;</span></span>
<span class="line"><span>            select ret;</span></span>
<span class="line"><span>        until done end repeat;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        close mycursor;</span></span>
<span class="line"><span>    end //</span></span>
<span class="line"><span> delimiter ;</span></span></code></pre></div><h2 id="触发器" tabindex="-1">触发器 <a class="header-anchor" href="#触发器" aria-label="Permalink to &quot;触发器&quot;">​</a></h2><p>触发器会在某个表执行以下语句时而自动执行: DELETE、INSERT、UPDATE。</p><p>触发器必须指定在语句执行之前还是之后自动执行，之前执行使用 BEFORE 关键字，之后执行使用 AFTER 关键字。BEFORE 用于数据验证和净化，AFTER 用于审计跟踪，将修改记录到另外一张表中。</p><p>INSERT 触发器包含一个名为 NEW 的虚拟表。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE TRIGGER mytrigger AFTER INSERT ON mytable</span></span>
<span class="line"><span>FOR EACH ROW SELECT NEW.col into @result;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>SELECT @result; -- 获取结果</span></span></code></pre></div><p>DELETE 触发器包含一个名为 OLD 的虚拟表，并且是只读的。</p><p>UPDATE 触发器包含一个名为 NEW 和一个名为 OLD 的虚拟表，其中 NEW 是可以被修改的，而 OLD 是只读的。</p><p>MySQL 不允许在触发器中使用 CALL 语句，也就是不能调用存储过程。</p><h2 id="事务管理" tabindex="-1">事务管理 <a class="header-anchor" href="#事务管理" aria-label="Permalink to &quot;事务管理&quot;">​</a></h2><p>基本术语:</p><ul><li>事务(transaction)指一组 SQL 语句；</li><li>回退(rollback)指撤销指定 SQL 语句的过程；</li><li>提交(commit)指将未存储的 SQL 语句结果写入数据库表；</li><li>保留点(savepoint)指事务处理中设置的临时占位符(placeholder)，你可以对它发布回退(与回退整个事务处理不同)。</li></ul><p>不能回退 SELECT 语句，回退 SELECT 语句也没意义；也不能回退 CREATE 和 DROP 语句。</p><p>MySQL 的事务提交默认是隐式提交，每执行一条语句就把这条语句当成一个事务然后进行提交。当出现 START TRANSACTION 语句时，会关闭隐式提交；当 COMMIT 或 ROLLBACK 语句执行后，事务会自动关闭，重新恢复隐式提交。</p><p>通过设置 autocommit 为 0 可以取消自动提交；autocommit 标记是针对每个连接而不是针对服务器的。</p><p>如果没有设置保留点，ROLLBACK 会回退到 START TRANSACTION 语句处；如果设置了保留点，并且在 ROLLBACK 中指定该保留点，则会回退到该保留点。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>START TRANSACTION</span></span>
<span class="line"><span>// ...</span></span>
<span class="line"><span>SAVEPOINT delete1</span></span>
<span class="line"><span>// ...</span></span>
<span class="line"><span>ROLLBACK TO delete1</span></span>
<span class="line"><span>// ...</span></span>
<span class="line"><span>COMMIT</span></span></code></pre></div><h2 id="字符集" tabindex="-1">字符集 <a class="header-anchor" href="#字符集" aria-label="Permalink to &quot;字符集&quot;">​</a></h2><p>基本术语:</p><ul><li>字符集为字母和符号的集合；</li><li>编码为某个字符集成员的内部表示；</li><li>校对字符指定如何比较，主要用于排序和分组。</li></ul><p>除了给表指定字符集和校对外，也可以给列指定:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE TABLE mytable</span></span>
<span class="line"><span>(col VARCHAR(10) CHARACTER SET latin COLLATE latin1_general_ci )</span></span>
<span class="line"><span>DEFAULT CHARACTER SET hebrew COLLATE hebrew_general_ci;</span></span></code></pre></div><p>可以在排序、分组时指定校对:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT *</span></span>
<span class="line"><span>FROM mytable</span></span>
<span class="line"><span>ORDER BY col COLLATE latin1_general_ci;</span></span></code></pre></div><h2 id="权限管理" tabindex="-1">权限管理 <a class="header-anchor" href="#权限管理" aria-label="Permalink to &quot;权限管理&quot;">​</a></h2><p>MySQL 的账户信息保存在 mysql 这个数据库中。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>USE mysql;</span></span>
<span class="line"><span>SELECT user FROM user;</span></span></code></pre></div><p><strong>创建账户</strong></p><p>新创建的账户没有任何权限。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE USER myuser IDENTIFIED BY &#39;mypassword&#39;;</span></span></code></pre></div><p><strong>修改账户名</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>RENAME myuser TO newuser;</span></span></code></pre></div><p><strong>删除账户</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DROP USER myuser;</span></span></code></pre></div><p><strong>查看权限</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SHOW GRANTS FOR myuser;</span></span></code></pre></div><p><strong>授予权限</strong></p><p>账户用 username@host 的形式定义，username@% 使用的是默认主机名。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GRANT SELECT, INSERT ON mydatabase.* TO myuser;</span></span></code></pre></div><p><strong>删除权限</strong></p><p>GRANT 和 REVOKE 可在几个层次上控制访问权限:</p><ul><li>整个服务器，使用 GRANT ALL 和 REVOKE ALL；</li><li>整个数据库，使用 ON database.*；</li><li>特定的表，使用 ON database.table；</li><li>特定的列；</li><li>特定的存储过程。</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>REVOKE SELECT, INSERT ON mydatabase.* FROM myuser;</span></span></code></pre></div><p><strong>更改密码</strong></p><p>必须使用 Password() 函数</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SET PASSWROD FOR myuser = Password(&#39;new_password&#39;);</span></span></code></pre></div><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li>BenForta. SQL 必知必会 [M]. 人民邮电出版社, 2013.</li></ul><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>`,214)]))}const u=s(p,[["render",l]]);export{b as __pageData,u as default};
