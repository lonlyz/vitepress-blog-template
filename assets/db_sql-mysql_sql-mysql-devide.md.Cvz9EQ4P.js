import{_ as e,a as r}from"./chunks/e130e5b8-b19a-4f1e-b860-223040525cf6.DVnJKllf.js";import{_ as i,c as l,ai as t,o as d}from"./chunks/framework.BrYByd3F.js";const u=JSON.parse('{"title":"MySQL - 分表分库","description":"","frontmatter":{},"headers":[],"relativePath":"db/sql-mysql/sql-mysql-devide.md","filePath":"db/sql-mysql/sql-mysql-devide.md","lastUpdated":1737706346000}'),h={name:"db/sql-mysql/sql-mysql-devide.md"};function s(o,a,n,p,_,c){return d(),l("div",null,a[0]||(a[0]=[t('<h1 id="mysql-分表分库" tabindex="-1">MySQL - 分表分库 <a class="header-anchor" href="#mysql-分表分库" aria-label="Permalink to &quot;MySQL - 分表分库&quot;">​</a></h1><h2 id="水平切分" tabindex="-1">水平切分 <a class="header-anchor" href="#水平切分" aria-label="Permalink to &quot;水平切分&quot;">​</a></h2><p>水平切分又称为 Sharding，它是将同一个表中的记录拆分到多个结构相同的表中。</p><p>当一个表的数据不断增多时，Sharding 是必然的选择，它可以将数据分布到集群的不同节点上，从而缓存单个数据库的压力。</p><p><img src="'+e+'" alt="error.图片加载失败"></p><h2 id="垂直切分" tabindex="-1">垂直切分 <a class="header-anchor" href="#垂直切分" aria-label="Permalink to &quot;垂直切分&quot;">​</a></h2><p><img src="'+r+'" alt="error.图片加载失败"></p><p>垂直切分是将一张表按列切分成多个表，通常是按照列的关系密集程度进行切分，也可以利用垂直切分将经常被使用的列和不经常被使用的列切分到不同的表中。</p><p>在数据库的层面使用垂直切分将按数据库中表的密集程度部署到不同的库中，例如将原来的电商数据库垂直切分成商品数据库、用户数据库等。</p><h2 id="sharding-策略" tabindex="-1">Sharding 策略 <a class="header-anchor" href="#sharding-策略" aria-label="Permalink to &quot;Sharding 策略&quot;">​</a></h2><ul><li>哈希取模: hash(key) % NUM_DB</li><li>范围: 可以是 ID 范围也可以是时间范围</li><li>映射表: 使用单独的一个数据库来存储映射关系</li></ul><h2 id="sharding-存在的问题及解决方案" tabindex="-1">Sharding 存在的问题及解决方案 <a class="header-anchor" href="#sharding-存在的问题及解决方案" aria-label="Permalink to &quot;Sharding 存在的问题及解决方案&quot;">​</a></h2><h3 id="_1-事务问题" tabindex="-1">1. 事务问题 <a class="header-anchor" href="#_1-事务问题" aria-label="Permalink to &quot;1\\. 事务问题&quot;">​</a></h3><p>使用分布式事务来解决，比如 XA 接口。</p><h3 id="_2-链接" tabindex="-1">2. 链接 <a class="header-anchor" href="#_2-链接" aria-label="Permalink to &quot;2\\. 链接&quot;">​</a></h3><p>可以将原来的 JOIN 分解成多个单表查询，然后在用户程序中进行 JOIN。</p><h3 id="_3-id-唯一性" tabindex="-1">3. ID 唯一性 <a class="header-anchor" href="#_3-id-唯一性" aria-label="Permalink to &quot;3\\. ID 唯一性&quot;">​</a></h3><ul><li>使用全局唯一 ID: GUID</li><li>为每个分片指定一个 ID 范围</li><li>分布式 ID 生成器 (如 Twitter 的 Snowflake 算法)</li></ul><p>更多内容请参考:</p><ul><li><a href="https://medium.com/@jeeyoungk/how-sharding-works-b4dec46b3f6" target="_blank" rel="noreferrer">How Sharding Works在新窗口打开</a></li><li><a href="https://tech.meituan.com/dianping_order_db_sharding.html" target="_blank" rel="noreferrer">大众点评订单系统分库分表实践在新窗口打开</a></li></ul><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>',21)]))}const b=i(h,[["render",s]]);export{u as __pageData,b as default};
