import{_ as e,a as l}from"./chunks/master-slave-proxy.Bq8ZPE9s.js";import{_ as t,c as r,ai as s,o as i}from"./chunks/framework.BrYByd3F.js";const f=JSON.parse('{"title":"MySQL - 主从复制与读写分离","description":"","frontmatter":{},"headers":[],"relativePath":"db/sql-mysql/sql-mysql-slave.md","filePath":"db/sql-mysql/sql-mysql-slave.md","lastUpdated":1737706346000}'),o={name:"db/sql-mysql/sql-mysql-slave.md"};function p(n,a,d,_,m,c){return i(),r("div",null,a[0]||(a[0]=[s('<h1 id="mysql-主从复制与读写分离" tabindex="-1">MySQL - 主从复制与读写分离 <a class="header-anchor" href="#mysql-主从复制与读写分离" aria-label="Permalink to &quot;MySQL - 主从复制与读写分离&quot;">​</a></h1><h2 id="主从复制" tabindex="-1">主从复制 <a class="header-anchor" href="#主从复制" aria-label="Permalink to &quot;主从复制&quot;">​</a></h2><p>主要涉及三个线程: binlog 线程、I/O 线程和 SQL 线程。</p><p><img src="'+e+'" alt="error.图片加载失败"></p><h2 id="读写分离" tabindex="-1">读写分离 <a class="header-anchor" href="#读写分离" aria-label="Permalink to &quot;读写分离&quot;">​</a></h2><p>主服务器处理写操作以及实时性要求比较高的读操作，而从服务器处理读操作。</p><p>读写分离能提高性能的原因在于:</p><ul><li>主从服务器负责各自的读和写，极大程度缓解了锁的争用；</li><li>从服务器可以使用 MyISAM，提升查询性能以及节约系统开销；</li><li>增加冗余，提高可用性。</li></ul><p>读写分离常用代理方式来实现，代理服务器接收应用层传来的读写请求，然后决定转发到哪个服务器。</p><p><img src="'+l+'" alt="error.图片加载失败"></p><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>',11)]))}const u=t(o,[["render",p]]);export{f as __pageData,u as default};
