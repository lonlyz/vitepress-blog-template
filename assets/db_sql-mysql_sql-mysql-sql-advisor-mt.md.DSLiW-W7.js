import{_ as i,c as r,ai as l,o as a}from"./chunks/framework.BrYByd3F.js";const t="/vitepress-blog-template/images/db/mysql/db-mysql-mt-advisor-1.jpeg",s="/vitepress-blog-template/images/db/mysql/db-mysql-mt-advisor-2.jpeg",o="/vitepress-blog-template/images/db/mysql/db-mysql-mt-advisor-3.jpeg",n="/vitepress-blog-template/images/db/mysql/db-mysql-mt-advisor-4.png",d="/vitepress-blog-template/images/db/mysql/db-mysql-mt-advisor-5.jpeg",p="/vitepress-blog-template/images/db/mysql/db-mysql-mt-advisor-6.jpeg",m="/vitepress-blog-template/images/db/mysql/db-mysql-mt-advisor-7.png",h="/vitepress-blog-template/images/db/mysql/db-mysql-mt-advisor-8.png",f=JSON.parse('{"title":"大厂实践 - 美团: SQL优化工具SQLAdvisor开源","description":"","frontmatter":{},"headers":[],"relativePath":"db/sql-mysql/sql-mysql-sql-advisor-mt.md","filePath":"db/sql-mysql/sql-mysql-sql-advisor-mt.md","lastUpdated":1737706346000}'),b={name:"db/sql-mysql/sql-mysql-sql-advisor-mt.md"};function _(c,e,u,g,q,S){return a(),r("div",null,e[0]||(e[0]=[l('<h1 id="大厂实践-美团-sql优化工具sqladvisor开源" tabindex="-1">大厂实践 - 美团: SQL优化工具SQLAdvisor开源 <a class="header-anchor" href="#大厂实践-美团-sql优化工具sqladvisor开源" aria-label="Permalink to &quot;大厂实践 - 美团: SQL优化工具SQLAdvisor开源&quot;">​</a></h1><blockquote><p>正如你在前文中看到的可以通过调整索引或新增索引的索引优化方式，从而达到 SQL 优化的目的。如果能够将索引优化转化成工具化、标准化的流程，减少人工介入的工作量，无疑会大大提高DBA的工作效率。本文主要介绍SQL优化的开源工具SQLAdvisor。@pdai</p></blockquote><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><p>在数据库运维过程中，优化 SQL 是 DBA 团队的日常任务。例行 SQL 优化，不仅可以提升程序性能，还能够降低线上故障的概率。</p><p>目前常用的 SQL 优化方式包括但不限于：业务层优化、SQL逻辑优化、索引优化等。其中索引优化通常通过调整索引或新增索引从而达到 SQL 优化的目的。索引优化往往可以在短时间内产生非常巨大的效果。如果能够将索引优化转化成工具化、标准化的流程，减少人工介入的工作量，无疑会大大提高DBA的工作效率。</p><p>SQLAdvisor 是由美团点评公司北京DBA团队开发维护的 SQL 优化工具：输入SQL，输出索引优化建议。 它基于 MySQL 原生词法解析，再结合 SQL 中的 where 条件以及字段选择度、聚合条件、多表 Join 关系等最终输出最优的索引优化建议。目前 SQLAdvisor 在公司内部大量使用，较为成熟、稳定。</p><p>现在，我们非常高兴地将 SQLAdvisor 开源，项目 GitHub 地址：<a href="https://github.com/Meituan-Dianping/SQLAdvisor" target="_blank" rel="noreferrer">https://github.com/Meituan-Dianping/SQLAdvisor</a> 。我们已经把相关开发工作全面转到 GitHub 上，开源版本和内部使用版本保持完全一致。希望与业内有类似需求的团队，一起打造一款优秀的 SQL 优化产品。</p><h2 id="sqladvisor架构流程图" tabindex="-1">SQLAdvisor架构流程图 <a class="header-anchor" href="#sqladvisor架构流程图" aria-label="Permalink to &quot;SQLAdvisor架构流程图&quot;">​</a></h2><p><img src="'+t+`" alt="error.图片加载失败"></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sql: SELECT id FROM crm_loan WHERE id_card = &#39;1234567&#39;</span></span>
<span class="line"><span>cmd: ./sqladvisor -h xx -P xx -u xx -pxx -d xx -q &quot;SELECT id FROM crm_loan WHERE id_card = &#39;1234567&#39;&quot;</span></span>
<span class="line"><span>SQLAdvisor输出: alter table crm_loan add index idx_id_card(id_card)</span></span></code></pre></div><p><a href="https://github.com/Meituan-Dianping/SQLAdvisor/blob/master/doc/QUICK_START.md" target="_blank" rel="noreferrer">SQLAdvisor快速入门教程在新窗口打开</a></p><ul><li>基于 MySQL 原生词法解析，充分保证词法解析的性能、准确定以及稳定性；</li><li>支持常见的 SQL(Insert/Delete/Update/Select)；</li><li>支持多表 Join 并自动逻辑选定驱动表；</li><li>支持聚合条件 Order by 和 Group by；</li><li>过滤表中已存在的索引。</li></ul><h3 id="join-处理" tabindex="-1">Join 处理 <a class="header-anchor" href="#join-处理" aria-label="Permalink to &quot;Join 处理&quot;">​</a></h3><ul><li>Join语法分为两种：Join on 和 Join using，并且 Join on 有时会存在 where 条件中。</li><li>分析 Join 条件首先会得到一个 nested_join 的 table list，通过判断它的 join_using_fields 字段是否为空来区分 Join on 与 Join using。</li><li>生成的 table list 以二叉树的形式进行存储，以后序遍历的方式对二叉树进行遍历。</li><li>生成内部解析树时，right Join 会转换成 left Join。</li><li>Join 条件会存在当层的叶子节点上，如果左右节点都是叶子节点，会存在右叶子节点。</li><li>每一个非叶子节点代表一次 Join 的结果。</li></ul><p>上述实现时，涉及的函数为：mysql_sql_parse_join(TABLE_LIST *join_table) mysql_sql_parse_join(Item *join_condition) ，主要流程图如下：join流程</p><p><img src="`+s+'" alt="error.图片加载失败"></p><h3 id="where-处理" tabindex="-1">where 处理 <a class="header-anchor" href="#where-处理" aria-label="Permalink to &quot;where 处理&quot;">​</a></h3><ul><li>主要是提取 SQL 语句的 where 条件。where 条件中一般由 AND 和 OR 连接符进行连接，因为 OR 比较难以处理，所以忽略，只处理 AND 连接符。</li><li>由于 where 条件中可以存在 Join 条件，因此需要进行区分。</li><li>依次获取 where 条件，当条件中的操作符是 like，如果不是前缀匹配则丢弃这个条件。</li><li>根据条件计算字段的区分度按照高低进行倒序排，如果小于30则丢弃。同时使用最左原则将 where 条件进行有序排列。</li></ul><h3 id="计算区分度" tabindex="-1">计算区分度 <a class="header-anchor" href="#计算区分度" aria-label="Permalink to &quot;计算区分度&quot;">​</a></h3><ul><li>通过 “show table status like” 获得表的总行数 table_count。</li><li>通过计算选择表中已存在的区分度最高的索引 best_index，同时Primary key &gt; Unique key &gt; 一般索引。</li><li>通过计算获取数据采样的起始值offset与采样范围rand_rows： &gt; * offset = (table_count / 2) &gt; 10W ? 10W : (table_count / 2) &gt; * rand_rows =(table_count / 2) &gt; 1W ? 1W : (table_count / 2) &gt; * 使用select count(1) from (select field from table force index(best_index) order by cl.. desc limit rand_rows) where field_print 得到满足条件的rows。 &gt; * cardinality = rows == 0 ? rand_rows : rand_rows / rows; &gt; * 计算完成选择度后，会根据选择度大小，将该条件添加到该表中的备选索引中。</li></ul><p>主要涉及的函数为：mysql_sql_parse_field_cardinality_new() 计算选择度。</p><p><img src="'+o+'" alt="error.图片加载失败"></p><h3 id="添加备选索引" tabindex="-1">添加备选索引 <a class="header-anchor" href="#添加备选索引" aria-label="Permalink to &quot;添加备选索引&quot;">​</a></h3><ol><li>mysql_sql_parse_index()将条件按照选择度添加到备选索引链表中。</li><li>上述两函数的流程图如下所示：</li></ol><p><img src="'+n+'" alt="error.图片加载失败"></p><h3 id="group-与-order-处理" tabindex="-1">Group 与 Order 处理 <a class="header-anchor" href="#group-与-order-处理" aria-label="Permalink to &quot;Group 与 Order 处理&quot;">​</a></h3><ul><li>Group 字段与 Order 字段能否用上索引，需要满足如下条件： &gt; * 涉及到的字段必须来自于同一张表，并且这张表必须是确定下来的驱动表。 &gt; * Group by 优于 Order by， 两者只能同时存在一个。 &gt; * Order by 字段的排序方向必须完全一致，否则丢弃整个 Order by 字段列。 &gt; * 当 Order by 条件中包含主键时，如果主键字段为 Order by。 字段列末尾，忽略该主键，否则丢弃整个 Order by 字段列。</li><li>整个索引列排序优先级：等值&gt;(group by | order by )&gt; 非等值。</li><li>该过程中设计的函数主要有： &gt; * mysql_sql_parse_group() 判断 Group 后的字段是否均来自于同一张表。 &gt; * mysql_sql_parse_order() 判断 Order 后的条件是否可以使用。 &gt; * mysql_sql_parse_group_order_add() 将字段依次按照规则添加到备选索引链表中。</li></ul><p>添加group</p><p><img src="'+d+'" alt="error.图片加载失败"></p><p>处理group</p><p><img src="'+p+'" alt="error.图片加载失败"></p><h3 id="驱动表选择" tabindex="-1">驱动表选择 <a class="header-anchor" href="#驱动表选择" aria-label="Permalink to &quot;驱动表选择&quot;">​</a></h3><ol><li>经过前期的 where 解析、Join 解析，已经将 SQL 中表关联关系存储起来，并且按照一定逻辑将候选驱动表确定下来。</li><li>在侯选驱动表中，按照每一张表的侯选索引字段中第一个字段进行计算表中结果集大小。</li><li>使用 explain select * from table where field 来计算表中结果集。</li><li>结果集小最小的被确为驱动表。</li><li>步骤中涉及的函数为：final_table_drived()，在该函数中，调用了函数 get_join_table_result_set() 来获取每张驱动候选表的行数。</li></ol><h3 id="添加被驱动表备选索引" tabindex="-1">添加被驱动表备选索引 <a class="header-anchor" href="#添加被驱动表备选索引" aria-label="Permalink to &quot;添加被驱动表备选索引&quot;">​</a></h3><ol><li>通过上述过程，已经选择了驱动表，也通过解析保存了语句中的条件。</li><li>由于选定了驱动表，因此需要对被驱动表的索引，根据 Join 条件进行添加。</li><li>该过程涉及的函数主要是：mysql_index_add_condition_field()，流程如下：</li></ol><p><img src="'+m+'" alt="error.图片加载失败"></p><h3 id="输出建议" tabindex="-1">输出建议 <a class="header-anchor" href="#输出建议" aria-label="Permalink to &quot;输出建议&quot;">​</a></h3><p>通过上述步骤，已经将每张表的备选索引键全部保存。此时，只要判断每张表中的候选索引键是否在实际表中已存在。没有索引，则给出建议增加对应的索引。 该步骤涉及的函数是：print_index() ，主要的流程图为：</p><p><img src="'+h+'" alt="error.图片加载失败"></p><ul><li><strong>Functionality Added or Changed</strong><ul><li>调整架构将 SQLParser 与 SQLAdvisor 模块隔离，方便调试。</li><li>重新架构多表 Join 关系的 find_join_elements() 函数，思路更加清晰。</li><li>修改选定驱动表的策略，确保驱动表为小结果集。</li><li>添加 where 条件中的 like 处理。</li><li>优化 Order by 逻辑，忽略 Order by primary key 场景。</li><li>输出索引建议前，增加判断索引是否已存在。</li></ul></li><li><strong>Bugs Fixed</strong><ul><li>修复 SQL 无法处理中文问题。</li><li>修复字段多次出现在 where 条件中从而导致多次出现在索引列中问题。</li><li>修复在 find_best_index() 函数中，对 MySQL API 中的 result 对象提前 free，导致指针失效问题。</li></ul></li></ul><h2 id="相关文章" tabindex="-1">相关文章 <a class="header-anchor" href="#相关文章" aria-label="Permalink to &quot;相关文章&quot;">​</a></h2><ul><li><a href="https://github.com/Meituan-Dianping/SQLAdvisor/blob/master/doc/QUICK_START.md" target="_blank" rel="noreferrer">SQLAdvisor快速入门教程在新窗口打开</a>.</li><li><a href="https://github.com/Meituan-Dianping/SQLAdvisor/blob/master/doc/THEORY_PRACTICES.md" target="_blank" rel="noreferrer">SQLAdvisor原理和架构在新窗口打开</a>.</li><li><a href="https://github.com/Meituan-Dianping/SQLAdvisor/blob/master/doc/RELEASE_NOTES.md" target="_blank" rel="noreferrer">SQLAdvisor release notes在新窗口打开</a>.</li><li><a href="https://github.com/Meituan-Dianping/SQLAdvisor/blob/master/doc/DEVELOPMENT_NORM.md" target="_blank" rel="noreferrer">SQLAdvisor开发规范在新窗口打开</a>.</li><li><a href="https://github.com/Meituan-Dianping/SQLAdvisor/blob/master/doc/FAQ.md" target="_blank" rel="noreferrer">FAQ在新窗口打开</a>.</li></ul><h2 id="文章来源" tabindex="-1">文章来源 <a class="header-anchor" href="#文章来源" aria-label="Permalink to &quot;文章来源&quot;">​</a></h2><p>转载说明</p><ul><li>作者：DBA团队</li><li>版权声明：本文为美团技术团队的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。</li><li>原文链接：<a href="https://tech.meituan.com/2017/03/09/sqladvisor-pr.html" target="_blank" rel="noreferrer">https://tech.meituan.com/2017/03/09/sqladvisor-pr.html</a></li></ul><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>',46)]))}const y=i(b,[["render",_]]);export{f as __pageData,y as default};
