import{_ as a,a as e,b as r,c as d,d as l}from"./chunks/72fe492e-f1cb-4cfc-92f8-412fb3ae6fec.DeApqeSN.js";import{_ as i,c as o,ai as s,o as n}from"./chunks/framework.BrYByd3F.js";const h="/vitepress-blog-template/images/pics/a58e294a-615d-4ea0-9fbf-064a6daec4b2.png",p="/vitepress-blog-template/images/pics/1a851e90-0d5c-4d4f-ac54-34c20ecfb903.jpg",c="/vitepress-blog-template/images/pics/e41405a8-7c05-4f70-8092-e961e28d3112.jpg",T=JSON.parse('{"title":"SQL DB - 数据库系统核心知识点","description":"","frontmatter":{},"headers":[],"relativePath":"db/sql/sql-db-theory.md","filePath":"db/sql/sql-db-theory.md","lastUpdated":1737706346000}'),b={name:"db/sql/sql-db-theory.md"};function u(m,t,k,g,q,f){return n(),o("div",null,t[0]||(t[0]=[s('<h1 id="sql-db-数据库系统核心知识点" tabindex="-1">SQL DB - 数据库系统核心知识点 <a class="header-anchor" href="#sql-db-数据库系统核心知识点" aria-label="Permalink to &quot;SQL DB - 数据库系统核心知识点&quot;">​</a></h1><blockquote><p>基于上篇数据库如何工作的基础之上，我们再来梳理下数据库系统中有哪些重要的知识点，包括：事务，并发一致性，封锁，隔离级别，多版本并发控制等。@pdai</p></blockquote><h2 id="一、事务" tabindex="-1">一、事务 <a class="header-anchor" href="#一、事务" aria-label="Permalink to &quot;一、事务&quot;">​</a></h2><h3 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h3><p>事务指的是满足 ACID 特性的一组操作，可以通过 Commit 提交一个事务，也可以使用 Rollback 进行回滚。</p><p><img src="'+a+'" alt="image"></p><h3 id="acid" tabindex="-1">ACID <a class="header-anchor" href="#acid" aria-label="Permalink to &quot;ACID&quot;">​</a></h3><h4 id="_1-原子性-atomicity" tabindex="-1">1. 原子性(Atomicity) <a class="header-anchor" href="#_1-原子性-atomicity" aria-label="Permalink to &quot;1\\. 原子性(Atomicity)&quot;">​</a></h4><p>事务被视为不可分割的最小单元，事务的所有操作要么全部提交成功，要么全部失败回滚。</p><p>回滚可以用日志来实现，日志记录着事务所执行的修改操作，在回滚时反向执行这些修改操作即可。</p><h4 id="_2-一致性-consistency" tabindex="-1">2. 一致性(Consistency) <a class="header-anchor" href="#_2-一致性-consistency" aria-label="Permalink to &quot;2\\. 一致性(Consistency)&quot;">​</a></h4><p>数据库在事务执行前后都保持一致性状态。在一致性状态下，所有事务对一个数据的读取结果都是相同的。</p><h4 id="_3-隔离性-isolation" tabindex="-1">3. 隔离性(Isolation) <a class="header-anchor" href="#_3-隔离性-isolation" aria-label="Permalink to &quot;3\\. 隔离性(Isolation)&quot;">​</a></h4><p>一个事务所做的修改在最终提交以前，对其它事务是不可见的。</p><h4 id="_4-持久性-durability" tabindex="-1">4. 持久性(Durability) <a class="header-anchor" href="#_4-持久性-durability" aria-label="Permalink to &quot;4\\. 持久性(Durability)&quot;">​</a></h4><p>一旦事务提交，则其所做的修改将会永远保存到数据库中。即使系统发生崩溃，事务执行的结果也不能丢失。</p><p>可以通过数据库备份和恢复来实现，在系统发生崩溃时，使用备份的数据库进行数据恢复。</p><hr><p>事务的 ACID 特性概念简单，但不是很好理解，主要是因为这几个特性不是一种平级关系:</p><ul><li>只有满足一致性，事务的执行结果才是正确的。</li><li>在无并发的情况下，事务串行执行，隔离性一定能够满足。此时只要能满足原子性，就一定能满足一致性。</li><li>在并发的情况下，多个事务并行执行，事务不仅要满足原子性，还需要满足隔离性，才能满足一致性。</li><li>事务满足持久化是为了能应对数据库崩溃的情况。</li></ul><p><img src="'+h+'" alt="image"></p><h3 id="autocommit" tabindex="-1">AUTOCOMMIT <a class="header-anchor" href="#autocommit" aria-label="Permalink to &quot;AUTOCOMMIT&quot;">​</a></h3><p>MySQL 默认采用自动提交模式。也就是说，如果不显式使用<code>START TRANSACTION</code>语句来开始一个事务，那么每个查询都会被当做一个事务自动提交。</p><h2 id="二、并发一致性问题" tabindex="-1">二、并发一致性问题 <a class="header-anchor" href="#二、并发一致性问题" aria-label="Permalink to &quot;二、并发一致性问题&quot;">​</a></h2><p>在并发环境下，事务的隔离性很难保证，因此会出现很多并发一致性问题。</p><h3 id="丢失修改" tabindex="-1">丢失修改 <a class="header-anchor" href="#丢失修改" aria-label="Permalink to &quot;丢失修改&quot;">​</a></h3><p>T1 和 T2 两个事务都对一个数据进行修改，T1 先修改，T2 随后修改，T2 的修改覆盖了 T1 的修改。</p><p><img src="'+e+'" alt="image"></p><h3 id="读脏数据" tabindex="-1">读脏数据 <a class="header-anchor" href="#读脏数据" aria-label="Permalink to &quot;读脏数据&quot;">​</a></h3><p>T1 修改一个数据，T2 随后读取这个数据。如果 T1 撤销了这次修改，那么 T2 读取的数据是脏数据。</p><p><img src="'+r+'" alt="image"></p><h3 id="不可重复读" tabindex="-1">不可重复读 <a class="header-anchor" href="#不可重复读" aria-label="Permalink to &quot;不可重复读&quot;">​</a></h3><p>T2 读取一个数据，T1 对该数据做了修改。如果 T2 再次读取这个数据，此时读取的结果和第一次读取的结果不同。</p><p><img src="'+d+'" alt="image"></p><h3 id="幻影读" tabindex="-1">幻影读 <a class="header-anchor" href="#幻影读" aria-label="Permalink to &quot;幻影读&quot;">​</a></h3><p>T1 读取某个范围的数据，T2 在这个范围内插入新的数据，T1 再次读取这个范围的数据，此时读取的结果和和第一次读取的结果不同。</p><p><img src="'+l+'" alt="image"></p><hr><p>产生并发不一致性问题主要原因是破坏了事务的隔离性，解决方法是通过并发控制来保证隔离性。并发控制可以通过封锁来实现，但是封锁操作需要用户自己控制，相当复杂。数据库管理系统提供了事务的隔离级别，让用户以一种更轻松的方式处理并发一致性问题。</p><h2 id="三、封锁" tabindex="-1">三、封锁 <a class="header-anchor" href="#三、封锁" aria-label="Permalink to &quot;三、封锁&quot;">​</a></h2><h3 id="封锁粒度" tabindex="-1">封锁粒度 <a class="header-anchor" href="#封锁粒度" aria-label="Permalink to &quot;封锁粒度&quot;">​</a></h3><p>MySQL 中提供了两种封锁粒度: 行级锁以及表级锁。</p><p>应该尽量只锁定需要修改的那部分数据，而不是所有的资源。锁定的数据量越少，发生锁争用的可能就越小，系统的并发程度就越高。</p><p>但是加锁需要消耗资源，锁的各种操作(包括获取锁、释放锁、以及检查锁状态)都会增加系统开销。因此封锁粒度越小，系统开销就越大。</p><p>在选择封锁粒度时，需要在锁开销和并发程度之间做一个权衡。</p><p><img src="'+p+`" alt="image"></p><h3 id="封锁类型" tabindex="-1">封锁类型 <a class="header-anchor" href="#封锁类型" aria-label="Permalink to &quot;封锁类型&quot;">​</a></h3><h4 id="_1-读写锁" tabindex="-1">1. 读写锁 <a class="header-anchor" href="#_1-读写锁" aria-label="Permalink to &quot;1\\. 读写锁&quot;">​</a></h4><ul><li>排它锁(Exclusive)，简写为 X 锁，又称写锁。</li><li>共享锁(Shared)，简写为 S 锁，又称读锁。</li></ul><p>有以下两个规定:</p><ul><li>一个事务对数据对象 A 加了 X 锁，就可以对 A 进行读取和更新。加锁期间其它事务不能对 A 加任何锁。</li><li>一个事务对数据对象 A 加了 S 锁，可以对 A 进行读取操作，但是不能进行更新操作。加锁期间其它事务能对 A 加 S 锁，但是不能加 X 锁。</li></ul><p>锁的兼容关系如下:</p><table tabindex="0"><thead><tr><th>-</th><th>X</th><th>S</th></tr></thead><tbody><tr><td>X</td><td>×</td><td>×</td></tr><tr><td>S</td><td>×</td><td>√</td></tr></tbody></table><h4 id="_2-意向锁" tabindex="-1">2. 意向锁 <a class="header-anchor" href="#_2-意向锁" aria-label="Permalink to &quot;2\\. 意向锁&quot;">​</a></h4><p>使用意向锁(Intention Locks)可以更容易地支持多粒度封锁。</p><p>在存在行级锁和表级锁的情况下，事务 T 想要对表 A 加 X 锁，就需要先检测是否有其它事务对表 A 或者表 A 中的任意一行加了锁，那么就需要对表 A 的每一行都检测一次，这是非常耗时的。</p><p>意向锁在原来的 X/S 锁之上引入了 IX/IS，IX/IS 都是表锁，用来表示一个事务想要在表中的某个数据行上加 X 锁或 S 锁。有以下两个规定:</p><ul><li>一个事务在获得某个数据行对象的 S 锁之前，必须先获得表的 IS 锁或者更强的锁；</li><li>一个事务在获得某个数据行对象的 X 锁之前，必须先获得表的 IX 锁。</li></ul><p>通过引入意向锁，事务 T 想要对表 A 加 X 锁，只需要先检测是否有其它事务对表 A 加了 X/IX/S/IS 锁，如果加了就表示有其它事务正在使用这个表或者表中某一行的锁，因此事务 T 加 X 锁失败。</p><p>各种锁的兼容关系如下:</p><table tabindex="0"><thead><tr><th>-</th><th>X</th><th>IX</th><th>S</th><th>IS</th></tr></thead><tbody><tr><td>X</td><td>×</td><td>×</td><td>×</td><td>×</td></tr><tr><td>IX</td><td>×</td><td>√</td><td>×</td><td>√</td></tr><tr><td>S</td><td>×</td><td>×</td><td>√</td><td>√</td></tr><tr><td>IS</td><td>×</td><td>√</td><td>√</td><td>√</td></tr></tbody></table><p>解释如下:</p><ul><li>任意 IS/IX 锁之间都是兼容的，因为它们只是表示想要对表加锁，而不是真正加锁；</li><li>S 锁只与 S 锁和 IS 锁兼容，也就是说事务 T 想要对数据行加 S 锁，其它事务可以已经获得对表或者表中的行的 S 锁。</li></ul><h3 id="封锁协议" tabindex="-1">封锁协议 <a class="header-anchor" href="#封锁协议" aria-label="Permalink to &quot;封锁协议&quot;">​</a></h3><h4 id="_1-三级封锁协议" tabindex="-1">1. 三级封锁协议 <a class="header-anchor" href="#_1-三级封锁协议" aria-label="Permalink to &quot;1\\. 三级封锁协议&quot;">​</a></h4><p><strong>一级封锁协议</strong></p><p>事务 T 要修改数据 A 时必须加 X 锁，直到 T 结束才释放锁。</p><p>可以解决丢失修改问题，因为不能同时有两个事务对同一个数据进行修改，那么事务的修改就不会被覆盖。</p><table tabindex="0"><thead><tr><th>T1</th><th>T2</th></tr></thead><tbody><tr><td>lock-x(A)</td><td></td></tr><tr><td>read A=20</td><td></td></tr><tr><td></td><td>lock-x(A)</td></tr><tr><td></td><td>wait</td></tr><tr><td>write A=19</td><td>.</td></tr><tr><td>commit</td><td>.</td></tr><tr><td>unlock-x(A)</td><td>.</td></tr><tr><td></td><td>obtain</td></tr><tr><td></td><td>read A=19</td></tr><tr><td></td><td>write A=21</td></tr><tr><td></td><td>commit</td></tr><tr><td></td><td>unlock-x(A)</td></tr></tbody></table><p><strong>二级封锁协议</strong></p><p>在一级的基础上，要求读取数据 A 时必须加 S 锁，读取完马上释放 S 锁。</p><p>可以解决读脏数据问题，因为如果一个事务在对数据 A 进行修改，根据 1 级封锁协议，会加 X 锁，那么就不能再加 S 锁了，也就是不会读入数据。</p><table tabindex="0"><thead><tr><th>T1</th><th>T2</th></tr></thead><tbody><tr><td>lock-x(A)</td><td></td></tr><tr><td>read A=20</td><td></td></tr><tr><td>write A=19</td><td></td></tr><tr><td></td><td>lock-s(A)</td></tr><tr><td></td><td>wait</td></tr><tr><td>rollback</td><td>.</td></tr><tr><td>A=20</td><td>.</td></tr><tr><td>unlock-x(A)</td><td>.</td></tr><tr><td></td><td>obtain</td></tr><tr><td></td><td>read A=20</td></tr><tr><td></td><td>commit</td></tr><tr><td></td><td>unlock-s(A)</td></tr></tbody></table><p><strong>三级封锁协议</strong></p><p>在二级的基础上，要求读取数据 A 时必须加 S 锁，直到事务结束了才能释放 S 锁。</p><p>可以解决不可重复读的问题，因为读 A 时，其它事务不能对 A 加 X 锁，从而避免了在读的期间数据发生改变。</p><table tabindex="0"><thead><tr><th>T1</th><th>T2</th></tr></thead><tbody><tr><td>lock-s(A)</td><td></td></tr><tr><td>read A=20</td><td></td></tr><tr><td></td><td>lock-x(A)</td></tr><tr><td></td><td>wait</td></tr><tr><td>read A=20</td><td>.</td></tr><tr><td>commit</td><td>.</td></tr><tr><td>unlock-s(A)</td><td>.</td></tr><tr><td></td><td>obtain</td></tr><tr><td></td><td>read A=20</td></tr><tr><td></td><td>write A=19</td></tr><tr><td></td><td>commit</td></tr><tr><td></td><td>unlock-X(A)</td></tr></tbody></table><h4 id="_2-两段锁协议" tabindex="-1">2. 两段锁协议 <a class="header-anchor" href="#_2-两段锁协议" aria-label="Permalink to &quot;2\\. 两段锁协议&quot;">​</a></h4><p>加锁和解锁分为两个阶段进行。</p><p>可串行化调度是指，通过并发控制，使得并发执行的事务结果与某个串行执行的事务结果相同。</p><p>事务遵循两段锁协议是保证可串行化调度的充分条件。例如以下操作满足两段锁协议，它是可串行化调度。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>lock-x(A)...lock-s(B)...lock-s(C)...unlock(A)...unlock(C)...unlock(B)</span></span></code></pre></div><p>但不是必要条件，例如以下操作不满足两段锁协议，但是它还是可串行化调度。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>lock-x(A)...unlock(A)...lock-s(B)...unlock(B)...lock-s(C)...unlock(C)</span></span></code></pre></div><h3 id="mysql-隐式与显示锁定" tabindex="-1">MySQL 隐式与显示锁定 <a class="header-anchor" href="#mysql-隐式与显示锁定" aria-label="Permalink to &quot;MySQL 隐式与显示锁定&quot;">​</a></h3><p>MySQL 的 InnoDB 存储引擎采用两段锁协议，会根据隔离级别在需要的时候自动加锁，并且所有的锁都是在同一时刻被释放，这被称为隐式锁定。</p><p>InnoDB 也可以使用特定的语句进行显示锁定:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT ... LOCK In SHARE MODE;</span></span>
<span class="line"><span>SELECT ... FOR UPDATE;</span></span></code></pre></div><h2 id="四、隔离级别" tabindex="-1">四、隔离级别 <a class="header-anchor" href="#四、隔离级别" aria-label="Permalink to &quot;四、隔离级别&quot;">​</a></h2><h3 id="未提交读-read-uncommitted" tabindex="-1">未提交读(READ UNCOMMITTED) <a class="header-anchor" href="#未提交读-read-uncommitted" aria-label="Permalink to &quot;未提交读(READ UNCOMMITTED)&quot;">​</a></h3><p>事务中的修改，即使没有提交，对其它事务也是可见的。</p><h3 id="提交读-read-committed" tabindex="-1">提交读(READ COMMITTED) <a class="header-anchor" href="#提交读-read-committed" aria-label="Permalink to &quot;提交读(READ COMMITTED)&quot;">​</a></h3><p>一个事务只能读取已经提交的事务所做的修改。换句话说，一个事务所做的修改在提交之前对其它事务是不可见的。</p><h3 id="可重复读-repeatable-read" tabindex="-1">可重复读(REPEATABLE READ) <a class="header-anchor" href="#可重复读-repeatable-read" aria-label="Permalink to &quot;可重复读(REPEATABLE READ)&quot;">​</a></h3><p>保证在同一个事务中多次读取同样数据的结果是一样的。</p><h3 id="可串行化-serializable" tabindex="-1">可串行化(SERIALIZABLE) <a class="header-anchor" href="#可串行化-serializable" aria-label="Permalink to &quot;可串行化(SERIALIZABLE)&quot;">​</a></h3><p>强制事务串行执行。</p><hr><table tabindex="0"><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻影读</th></tr></thead><tbody><tr><td>未提交读</td><td>√</td><td>√</td><td>√</td></tr><tr><td>提交读</td><td>×</td><td>√</td><td>√</td></tr><tr><td>可重复读</td><td>×</td><td>×</td><td>√</td></tr><tr><td>可串行化</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><h2 id="五、多版本并发控制" tabindex="-1">五、多版本并发控制 <a class="header-anchor" href="#五、多版本并发控制" aria-label="Permalink to &quot;五、多版本并发控制&quot;">​</a></h2><p>多版本并发控制(Multi-Version Concurrency Control, MVCC)是 MySQL 的 InnoDB 存储引擎实现隔离级别的一种具体方式，用于实现提交读和可重复读这两种隔离级别。而未提交读隔离级别总是读取最新的数据行，无需使用 MVCC。可串行化隔离级别需要对所有读取的行都加锁，单纯使用 MVCC 无法实现。</p><h3 id="版本号" tabindex="-1">版本号 <a class="header-anchor" href="#版本号" aria-label="Permalink to &quot;版本号&quot;">​</a></h3><ul><li>系统版本号: 是一个递增的数字，每开始一个新的事务，系统版本号就会自动递增。</li><li>事务版本号: 事务开始时的系统版本号。</li></ul><h3 id="隐藏的列" tabindex="-1">隐藏的列 <a class="header-anchor" href="#隐藏的列" aria-label="Permalink to &quot;隐藏的列&quot;">​</a></h3><p>MVCC 在每行记录后面都保存着两个隐藏的列，用来存储两个版本号:</p><ul><li>创建版本号: 指示创建一个数据行的快照时的系统版本号；</li><li>删除版本号: 如果该快照的删除版本号大于当前事务版本号表示该快照有效，否则表示该快照已经被删除了。</li></ul><h3 id="undo-日志" tabindex="-1">Undo 日志 <a class="header-anchor" href="#undo-日志" aria-label="Permalink to &quot;Undo 日志&quot;">​</a></h3><p>MVCC 使用到的快照存储在 Undo 日志中，该日志通过回滚指针把一个数据行(Record)的所有快照连接起来。</p><p><img src="`+c+`" alt="image"></p><h3 id="实现过程" tabindex="-1">实现过程 <a class="header-anchor" href="#实现过程" aria-label="Permalink to &quot;实现过程&quot;">​</a></h3><p>以下实现过程针对可重复读隔离级别。</p><p>当开始新一个事务时，该事务的版本号肯定会大于当前所有数据行快照的创建版本号，理解这一点很关键。</p><h4 id="_1-select" tabindex="-1">1. SELECT <a class="header-anchor" href="#_1-select" aria-label="Permalink to &quot;1\\. SELECT&quot;">​</a></h4><p>多个事务必须读取到同一个数据行的快照，并且这个快照是距离现在最近的一个有效快照。但是也有例外，如果有一个事务正在修改该数据行，那么它可以读取事务本身所做的修改，而不用和其它事务的读取结果一致。</p><p>把没有对一个数据行做修改的事务称为 T，T 所要读取的数据行快照的创建版本号必须小于 T 的版本号，因为如果大于或者等于 T 的版本号，那么表示该数据行快照是其它事务的最新修改，因此不能去读取它。除此之外，T 所要读取的数据行快照的删除版本号必须大于 T 的版本号，因为如果小于等于 T 的版本号，那么表示该数据行快照是已经被删除的，不应该去读取它。</p><h4 id="_2-insert" tabindex="-1">2. INSERT <a class="header-anchor" href="#_2-insert" aria-label="Permalink to &quot;2\\. INSERT&quot;">​</a></h4><p>将当前系统版本号作为数据行快照的创建版本号。</p><h4 id="_3-delete" tabindex="-1">3. DELETE <a class="header-anchor" href="#_3-delete" aria-label="Permalink to &quot;3\\. DELETE&quot;">​</a></h4><p>将当前系统版本号作为数据行快照的删除版本号。</p><h4 id="_4-update" tabindex="-1">4. UPDATE <a class="header-anchor" href="#_4-update" aria-label="Permalink to &quot;4\\. UPDATE&quot;">​</a></h4><p>将当前系统版本号作为更新前的数据行快照的删除版本号，并将当前系统版本号作为更新后的数据行快照的创建版本号。可以理解为先执行 DELETE 后执行 INSERT。</p><h3 id="快照读与当前读" tabindex="-1">快照读与当前读 <a class="header-anchor" href="#快照读与当前读" aria-label="Permalink to &quot;快照读与当前读&quot;">​</a></h3><h4 id="_1-快照读" tabindex="-1">1. 快照读 <a class="header-anchor" href="#_1-快照读" aria-label="Permalink to &quot;1\\. 快照读&quot;">​</a></h4><p>使用 MVCC 读取的是快照中的数据，这样可以减少加锁所带来的开销。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>select * from table ...;</span></span></code></pre></div><h4 id="_2-当前读" tabindex="-1">2. 当前读 <a class="header-anchor" href="#_2-当前读" aria-label="Permalink to &quot;2\\. 当前读&quot;">​</a></h4><p>读取的是最新的数据，需要加锁。以下第一个语句需要加 S 锁，其它都需要加 X 锁。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>select * from table where ? lock in share mode;</span></span>
<span class="line"><span>select * from table where ? for update;</span></span>
<span class="line"><span>insert;</span></span>
<span class="line"><span>update;</span></span>
<span class="line"><span>delete;</span></span></code></pre></div><h2 id="六、next-key-locks" tabindex="-1">六、Next-Key Locks <a class="header-anchor" href="#六、next-key-locks" aria-label="Permalink to &quot;六、Next-Key Locks&quot;">​</a></h2><p>Next-Key Locks 是 MySQL 的 InnoDB 存储引擎的一种锁实现。</p><p>MVCC 不能解决幻读的问题，Next-Key Locks 就是为了解决这个问题而存在的。在可重复读(REPEATABLE READ)隔离级别下，使用 MVCC + Next-Key Locks 可以解决幻读问题。</p><h3 id="record-locks" tabindex="-1">Record Locks <a class="header-anchor" href="#record-locks" aria-label="Permalink to &quot;Record Locks&quot;">​</a></h3><p>锁定一个记录上的索引，而不是记录本身。</p><p>如果表没有设置索引，InnoDB 会自动在主键上创建隐藏的聚簇索引，因此 Record Locks 依然可以使用。</p><h3 id="gap-locks" tabindex="-1">Gap Locks <a class="header-anchor" href="#gap-locks" aria-label="Permalink to &quot;Gap Locks&quot;">​</a></h3><p>锁定索引之间的间隙，但是不包含索引本身。例如当一个事务执行以下语句，其它事务就不能在 t.c 中插入 15。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT c FROM t WHERE c BETWEEN 10 and 20 FOR UPDATE;</span></span></code></pre></div><h3 id="next-key-locks" tabindex="-1">Next-Key Locks <a class="header-anchor" href="#next-key-locks" aria-label="Permalink to &quot;Next-Key Locks&quot;">​</a></h3><p>它是 Record Locks 和 Gap Locks 的结合，不仅锁定一个记录上的索引，也锁定索引之间的间隙。例如一个索引包含以下值: 10, 11, 13, and 20，那么就需要锁定以下区间:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>(negative infinity, 10]</span></span>
<span class="line"><span>(10, 11]</span></span>
<span class="line"><span>(11, 13]</span></span>
<span class="line"><span>(13, 20]</span></span>
<span class="line"><span>(20, positive infinity)</span></span></code></pre></div><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li>AbrahamSilberschatz, HenryF.Korth, S.Sudarshan, 等. 数据库系统概念 [M]. 机械工业出版社, 2006.</li><li>施瓦茨. 高性能 MYSQL(第3版)[M]. 电子工业出版社, 2013.</li><li>史嘉权. 数据库系统概论[M]. 清华大学出版社有限公司, 2006.</li><li><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-storage-engine.html" target="_blank" rel="noreferrer">The InnoDB Storage Engine在新窗口打开</a></li><li><a href="https://www.slideshare.net/ErnestoHernandezRodriguez/transaction-isolation-levels" target="_blank" rel="noreferrer">Transaction isolation levels在新窗口打开</a></li><li><a href="http://scanftree.com/dbms/2-phase-locking-protocol" target="_blank" rel="noreferrer">Concurrency Control在新窗口打开</a></li><li><a href="https://www.slideshare.net/brshristov/the-nightmare-of-locking-blocking-and-isolation-levels-46391666" target="_blank" rel="noreferrer">The Nightmare of Locking, Blocking and Isolation Levels!在新窗口打开</a></li><li><a href="https://aksakalli.github.io/2012/03/12/database-normalization-and-normal-forms-with-an-example.html" target="_blank" rel="noreferrer">Database Normalization and Normal Forms with an Example在新窗口打开</a></li><li><a href="https://blog.jcole.us/2014/04/16/the-basics-of-the-innodb-undo-logging-and-history-system/" target="_blank" rel="noreferrer">The basics of the InnoDB undo logging and history system在新窗口打开</a></li><li><a href="https://www.brightbox.com/blog/2013/10/31/on-mysql-locks/" target="_blank" rel="noreferrer">MySQL locking for the busy web developer在新窗口打开</a></li><li><a href="https://draveness.me/mysql-innodb" target="_blank" rel="noreferrer">浅入浅出 MySQL 和 InnoDB在新窗口打开</a></li><li><a href="https://tech.meituan.com/innodb-lock.html" target="_blank" rel="noreferrer">Innodb 中的事务隔离级别和锁的关系在新窗口打开</a></li></ul><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>`,143)]))}const y=i(b,[["render",u]]);export{T as __pageData,y as default};
