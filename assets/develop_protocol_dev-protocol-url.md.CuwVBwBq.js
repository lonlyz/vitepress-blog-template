import{_ as t,c as l,ai as a,o}from"./chunks/framework.BrYByd3F.js";const r="/vitepress-blog-template/images/develop/network/dev-network-url-1.png",s="/vitepress-blog-template/images/develop/network/dev-network-url-2.png",i="/vitepress-blog-template/images/develop/network/dev-network-url-3.png",p="/vitepress-blog-template/images/develop/network/dev-network-url-4.png",n="/vitepress-blog-template/images/develop/network/dev-network-url-5.png",c="/vitepress-blog-template/images/develop/network/dev-network-url-6.png",h="/vitepress-blog-template/images/develop/network/dev-network-url-7.png",d="/vitepress-blog-template/images/develop/network/dev-network-url-8.png",m="/vitepress-blog-template/images/develop/network/dev-network-url-9.png",u="/vitepress-blog-template/images/develop/network/dev-network-url-10.png",g="/vitepress-blog-template/images/develop/network/dev-network-url-11.png",b="/vitepress-blog-template/images/develop/network/dev-network-url-12.png",f="/vitepress-blog-template/images/develop/network/dev-network-url-13.png",B=JSON.parse('{"title":"知识点串联：输入URL 到页面加载过程详解","description":"","frontmatter":{},"headers":[],"relativePath":"develop/protocol/dev-protocol-url.md","filePath":"develop/protocol/dev-protocol-url.md","lastUpdated":1737706346000}'),E={name:"develop/protocol/dev-protocol-url.md"};function k(v,e,q,P,w,_){return o(),l("div",null,e[0]||(e[0]=[a('<h1 id="知识点串联-输入url-到页面加载过程详解" tabindex="-1">知识点串联：输入URL 到页面加载过程详解 <a class="header-anchor" href="#知识点串联-输入url-到页面加载过程详解" aria-label="Permalink to &quot;知识点串联：输入URL 到页面加载过程详解&quot;">​</a></h1><blockquote><p>本文主要两个目的:</p></blockquote><ul><li><a href="https://pdai.tech/md/develop/protocol/dev-protocol-url.html#%E5%9C%B0%E5%9D%80%E6%A0%8F%E8%BE%93%E5%85%A5url" target="_blank" rel="noreferrer">地址栏输入URL</a></li><li><a href="https://pdai.tech/md/develop/protocol/dev-protocol-url.html#dns-%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90ip" target="_blank" rel="noreferrer">DNS 域名解析IP</a><ul><li><a href="https://pdai.tech/md/develop/protocol/dev-protocol-url.html#%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5" target="_blank" rel="noreferrer">基础概念</a></li><li><a href="https://pdai.tech/md/develop/protocol/dev-protocol-url.html#%E6%9F%A5%E6%89%BE%E5%9F%9F%E5%90%8D%E5%AF%B9%E5%BA%94%E7%9A%84ip%E5%9C%B0%E5%9D%80" target="_blank" rel="noreferrer">查找域名对应的IP地址</a></li><li><a href="https://pdai.tech/md/develop/protocol/dev-protocol-url.html#dns%E8%BF%AD%E4%BB%A3%E6%9F%A5%E8%AF%A2%E5%92%8C%E9%80%92%E5%BD%92%E6%9F%A5%E8%AF%A2" target="_blank" rel="noreferrer">DNS迭代查询和递归查询</a></li></ul></li><li><a href="https://pdai.tech/md/develop/protocol/dev-protocol-url.html#%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE" target="_blank" rel="noreferrer">请求和响应数据</a><ul><li><a href="https://pdai.tech/md/develop/protocol/dev-protocol-url.html#%E5%BB%BA%E7%AB%8Btcp%E8%BF%9E%E6%8E%A5-3%E6%AC%A1%E6%8F%A1%E6%89%8B" target="_blank" rel="noreferrer">建立TCP连接（3次握手）</a></li><li><a href="https://pdai.tech/md/develop/protocol/dev-protocol-url.html#%E5%8F%91%E9%80%81http%E8%AF%B7%E6%B1%82" target="_blank" rel="noreferrer">发送HTTP请求</a></li><li><a href="https://pdai.tech/md/develop/protocol/dev-protocol-url.html#%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82" target="_blank" rel="noreferrer">服务器处理请求</a></li><li><a href="https://pdai.tech/md/develop/protocol/dev-protocol-url.html#%E8%BF%94%E5%9B%9Ehttp%E5%93%8D%E5%BA%94%E7%BB%93%E6%9E%9C" target="_blank" rel="noreferrer">返回HTTP响应结果</a></li><li><a href="https://pdai.tech/md/develop/protocol/dev-protocol-url.html#%E5%85%B3%E9%97%ADtcp%E8%BF%9E%E6%8E%A5-4%E6%AC%A1%E6%8C%A5%E6%89%8B" target="_blank" rel="noreferrer">关闭TCP连接（4次挥手）</a></li></ul></li><li><a href="https://pdai.tech/md/develop/protocol/dev-protocol-url.html#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8A%A0%E8%BD%BD-%E8%A7%A3%E6%9E%90%E5%92%8C%E6%B8%B2%E6%9F%93" target="_blank" rel="noreferrer">浏览器加载，解析和渲染</a><ul><li><a href="https://pdai.tech/md/develop/protocol/dev-protocol-url.html#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8A%A0%E8%BD%BD" target="_blank" rel="noreferrer">浏览器加载</a></li><li><a href="https://pdai.tech/md/develop/protocol/dev-protocol-url.html#%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A7%A3%E6%9E%90%E5%92%8C%E6%B8%B2%E6%9F%93" target="_blank" rel="noreferrer">浏览器解析和渲染</a></li><li><a href="https://pdai.tech/md/develop/protocol/dev-protocol-url.html#repaint%E5%92%8Creflow" target="_blank" rel="noreferrer">Repaint和Reflow</a></li><li><a href="https://pdai.tech/md/develop/protocol/dev-protocol-url.html#%E8%BF%9B%E8%80%8C-%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E8%BF%87%E7%A8%8B" target="_blank" rel="noreferrer">进而：如何优化浏览器渲染过程</a></li></ul></li><li><a href="https://pdai.tech/md/develop/protocol/dev-protocol-url.html#%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0" target="_blank" rel="noreferrer">参考文章</a></li></ul><h2 id="地址栏输入url" tabindex="-1">地址栏输入URL <a class="header-anchor" href="#地址栏输入url" aria-label="Permalink to &quot;地址栏输入URL&quot;">​</a></h2><blockquote><p>URL : Uniform / Universal Resource Locator ， 即统一资源定位符。它实际上就是网站网址。浏览器就是靠URL来查找资源位置。</p></blockquote><p>可以把URL分割成几个部分：协议、网络地址、资源路径。</p><ul><li><strong>传送协议</strong>： URL包含协议部分，是浏览器和www万维网之间的沟通方式，它会告诉浏览器正确在网路上找到资源位置。最常见的网络传输协议的是HTTP协议（超文本传输协议）（ https则是进行加密的网络传输）；其他也还有ftp 、file、 https、mailto 、git 等。还有自定义的协议（私有协议），例如tencent。不同协议有不同的通讯内容格式。</li><li><strong>网络地址</strong>： 指示该连接网络上哪一台计算机，可以是域名或者IP地址，可以包括端口号；</li><li><strong>资源路径</strong>： 指示从服务器上获取哪一项资源。</li></ul><p>例如： <a href="http://www.quaro.com/question/123456/" target="_blank" rel="noreferrer">http://www.quaro.com/question/123456/</a></p><ul><li>协议部分：http</li><li>网络地址：www.quaro.com</li><li>资源路径：/question/123456/</li></ul><h2 id="dns-域名解析ip" tabindex="-1">DNS 域名解析IP <a class="header-anchor" href="#dns-域名解析ip" aria-label="Permalink to &quot;DNS 域名解析IP&quot;">​</a></h2><blockquote><p>这里主要贯穿下思路，DNS涉及相关其它知识点可以参考：<a href="https://pdai.tech/md/develop/protocol/dev-protocol-dns.html" target="_blank" rel="noreferrer">网络协议 - DNS 解析详解</a></p></blockquote><h3 id="基础概念" tabindex="-1">基础概念 <a class="header-anchor" href="#基础概念" aria-label="Permalink to &quot;基础概念&quot;">​</a></h3><p><strong>IP 地址</strong>：IP 协议为互联网上的每一个网络和每一台主机分配的一个逻辑地址。IP 地址如同门牌号码，通过 IP 地址才能确定一台主机位置。服务器本质也是一台主机，想要访问某个服务器，必须先知道它的 IP 地址。</p><p><strong>域名 DN（domain name ）</strong>：域名是为了识别主机名称和组织机构名称的一种具有分层的名称。 IP 地址由四个数字组成，中间用点号连接，在使用过程中难记忆且易输错，所以用我们熟悉的字母和数字组合来代替纯数字的 IP 地址，比如我们只会记住 www.baidu.com （百度域名） 而不是 220.181.112.244（百度的其中一个 IP 地址）。</p><p><strong>计算机域名系统 DNS （ Domain Name System or Domain Name Service）</strong>： 它是由域名解析器和域名服务器组成的。 域名服务器是指保存有该网络中所有主机的域名和对应IP地址，并具有将域名转换为IP地址功能的服务器。 每个域名都对应一个或多个提供相同服务的服务器的 IP 地址，只有知道服务器 IP 地址才能建立连接，所以需要通过 DNS 把域名解析成一个 IP 地址。</p><h3 id="查找域名对应的ip地址" tabindex="-1">查找域名对应的IP地址 <a class="header-anchor" href="#查找域名对应的ip地址" aria-label="Permalink to &quot;查找域名对应的IP地址&quot;">​</a></h3><blockquote><p>通过域名查找IP过程：浏览器缓存 -&gt; 系统缓存 -&gt; 本地DNS服务器缓存</p></blockquote><ul><li>浏览器搜索自己的DNS缓存（维护一张域名与IP地址对应表）</li><li>搜索操作系统中的DNS缓存（维护一张域名与IP地址对应表）</li><li>搜索操作系统的hosts文件（windows环境下，维护一张域名与IP地址对应表）</li><li>操作系统将域名发送到本地区域服务器（LNDS），进行查找，成功则返回结果（<code>递归查询</code>），失败则发起一个迭代DNS请求（<code>迭代查询</code>）// <code>迭代查询</code>和<code>递归查询</code>请参考下一节</li><li>本地域名服务器LDNS将得到的IP地址返回给操作系统，同时也将IP地址缓存起来</li><li>操作系统将IP地址返回给浏览器，同时将IP地址缓存起来</li></ul><h3 id="dns迭代查询和递归查询" tabindex="-1">DNS迭代查询和递归查询 <a class="header-anchor" href="#dns迭代查询和递归查询" aria-label="Permalink to &quot;DNS迭代查询和递归查询&quot;">​</a></h3><blockquote><p>这里独立一节只是补充强调说明这两个重要的概念... 实际上是结合在一起的。</p></blockquote><p>看下图即可：</p><p><img src="'+r+'" alt="error.图片加载失败"></p><ul><li><p><strong>递归查询</strong>：客户端与服务器之间属于递归查询，即当客户机想DNS服务器发出请求后，若DNS服务器本身不能解析，会向另一个DNS服务器发出查询请求，最后将结果转交给客户端的过程。 服务器必须回答目标IP与域名的映射关系。</p></li><li><p><strong>迭代查询</strong>：DNS服务器之间属于迭代查询。服务器接收到一次迭代查询回复一次结果，这个结果不一定死目标IP与域名的映射关系，也可以是其他DNS服务器的地址。</p></li></ul><h2 id="请求和响应数据" tabindex="-1">请求和响应数据 <a class="header-anchor" href="#请求和响应数据" aria-label="Permalink to &quot;请求和响应数据&quot;">​</a></h2><p>包括：</p><ul><li>TCP连接建立</li><li>发送http 请求</li><li>服务端处理</li><li>返回http 结果</li><li>TCP连接关闭。</li></ul><h3 id="建立tcp连接-3次握手" tabindex="-1">建立TCP连接（3次握手） <a class="header-anchor" href="#建立tcp连接-3次握手" aria-label="Permalink to &quot;建立TCP连接（3次握手）&quot;">​</a></h3><blockquote><p>上一步找到IP之后，便可以开始建立TCP连接了，这里就是我们所说的TCP3次握手。详情可以参考：<a href="https://pdai.tech/md/develop/protocol/dev-protocol-tcpip.html" target="_blank" rel="noreferrer">网络协议 - TCP 协议详解</a></p></blockquote><p><img src="'+s+'" alt="error.图片加载失败"></p><h3 id="发送http请求" tabindex="-1">发送HTTP请求 <a class="header-anchor" href="#发送http请求" aria-label="Permalink to &quot;发送HTTP请求&quot;">​</a></h3><blockquote><p>与服务器建立了连接后，就可以向服务器发起请求了。详情可以参考：<a href="https://pdai.tech/md/develop/protocol/dev-protocol-http.html" target="_blank" rel="noreferrer">网络协议 - HTTP 协议详解</a></p></blockquote><p>请求报文结构如下：</p><p><img src="'+i+'" alt="error.图片加载失败"></p><p><img src="'+p+'" alt="error.图片加载失败"></p><h3 id="服务器处理请求" tabindex="-1">服务器处理请求 <a class="header-anchor" href="#服务器处理请求" aria-label="Permalink to &quot;服务器处理请求&quot;">​</a></h3><p>服务器端收到请求后的由web服务器（准确说应该是http服务器）处理请求，诸如Apache、Ngnix、IIS等。web服务器解析用户请求，知道了需要调度哪些资源文件，再通过相应的这些资源文件处理用户请求和参数，并调用数据库信息，最后将结果通过web服务器返回给浏览器客户端。</p><p><img src="'+n+'" alt="error.图片加载失败"></p><p>详情可以参考：<a href="https://pdai.tech/md/develop/protocol/dev-protocol-http.html" target="_blank" rel="noreferrer">网络协议 - HTTP 协议详解</a></p><h3 id="返回http响应结果" tabindex="-1">返回HTTP响应结果 <a class="header-anchor" href="#返回http响应结果" aria-label="Permalink to &quot;返回HTTP响应结果&quot;">​</a></h3><p>服务器处理完请求后，就会发送响应结果。响应报文的结构如下：</p><p><img src="'+c+'" alt="error.图片加载失败"></p><p>响应结果中会有对应的HTTP状态码，可分为5类：</p><p><img src="'+h+'" alt="error.图片加载失败"></p><p>详情可以参考：<a href="https://pdai.tech/md/develop/protocol/dev-protocol-http.html" target="_blank" rel="noreferrer">网络协议 - HTTP 协议详解</a></p><h3 id="关闭tcp连接-4次挥手" tabindex="-1">关闭TCP连接（4次挥手） <a class="header-anchor" href="#关闭tcp连接-4次挥手" aria-label="Permalink to &quot;关闭TCP连接（4次挥手）&quot;">​</a></h3><p>为了避免服务器与客户端双方的资源占用和损耗，当双方没有请求或响应传递时，任意一方都可以发起关闭请求。与创建TCP连接的3次握手类似，关闭TCP连接，需要4次握手。</p><p><img src="'+d+'" alt="error.图片加载失败"></p><p>详情可以参考：<a href="https://pdai.tech/md/develop/protocol/dev-protocol-tcpip.html" target="_blank" rel="noreferrer">网络协议 - TCP 协议详解</a></p><h2 id="浏览器加载-解析和渲染" tabindex="-1">浏览器加载，解析和渲染 <a class="header-anchor" href="#浏览器加载-解析和渲染" aria-label="Permalink to &quot;浏览器加载，解析和渲染&quot;">​</a></h2><p>浏览器构成</p><p><img src="'+m+'" alt="error.图片加载失败"></p><p>浏览器内核也称渲染引擎，主要有3种：</p><ul><li>Trident内核： IE</li><li>Webkit内核：Chrome,Safari</li><li>Gecko内核：FireFox</li></ul><h3 id="浏览器加载" tabindex="-1">浏览器加载 <a class="header-anchor" href="#浏览器加载" aria-label="Permalink to &quot;浏览器加载&quot;">​</a></h3><p><strong>加载过程如下</strong>：</p><ul><li>当浏览器获得一个html文件时，会”自上而下“加载，并在加载过程中进行解析渲染。</li><li>加载过程中遇到外部css文件，浏览器另外发出一个请求，来获取css文件。</li><li>遇到图片资源，浏览器也会另外发出一个请求，来获取图片资源。这是异步请求，并不会影响html文档进行加载。</li><li>但是当文档加载过程中遇到js文件，html文档会挂起渲染（加载解析渲染同步）的线程，不仅要等待文档中js文件加载完毕，还要等待解析执行完毕，才可以恢复html文档的渲染线程。</li></ul><p><strong>加载外联js和css的阻塞情况</strong>：一个不太严谨但方便记忆的口诀：JS 全阻塞，CSS 半阻塞</p><ul><li>JS 会阻塞后续 DOM 解析以及其它资源(如 CSS，JS 或图片资源)的加载。</li><li>CSS不阻塞DOM的加载和解析（它只阻塞DOM的渲染呈现。这里谈加载），不会阻塞其它资源(如图片)的加载，但是会阻塞 后续JS 文件的执行（原因之一是，js执行代码可能会依赖到css样式。css只阻塞执行而不阻塞js的加载）。</li><li>鉴于上面的特性，当css后面存在js的时候，css会间接地阻塞js后面资源的加载（css阻塞js，js阻塞其他资源 ）。</li><li>现代浏览器会进行 prefetch 优化，浏览器在获得 html 文档之后会对页面上引用的资源进行提前下载</li></ul><p>外联js文件使用defer属性和asyn可以达到异步非阻塞加载的效果，由于现代浏览器都存在 prefetch，所以 defer, async 可能并没有太多的用途，可以作为了解扩展知识，仅仅将脚本文件放到 body 底部(但还是在<code>&lt;/body&gt;</code>之前)就可以起到很不错的优化效果（遵循先解析再渲染再执行script这个顺序）。当把js放在最后的时候，其实浏览器将自动忽略<code>&lt;/body&gt;</code>标签，从而自动在最后的最后补上<code>&lt;/body&gt;</code>。</p><h3 id="浏览器解析和渲染" tabindex="-1">浏览器解析和渲染 <a class="header-anchor" href="#浏览器解析和渲染" aria-label="Permalink to &quot;浏览器解析和渲染&quot;">​</a></h3><p><img src="'+u+`" alt="error.图片加载失败"></p><p>步骤如下：</p><ul><li>解析html，生成dom树</li><li>解析css，生成cssom树</li><li>将dom树和cssom树合并，生成渲染树</li><li>遍历渲染树，开始布局和计算</li><li>绘制渲染树，显示到屏幕</li></ul><h4 id="解析html-生成dom树" tabindex="-1">解析html，生成dom树 <a class="header-anchor" href="#解析html-生成dom树" aria-label="Permalink to &quot;解析html，生成dom树&quot;">​</a></h4><p>当浏览器接收到服务器响应来的HTML文档后，会自上而下扫描文档，开始解析，遍历文档节点，生成DOM树。</p><p>整个构建过程其实包括： <code>字节</code> -&gt; <code>字符</code> -&gt; <code>令牌</code> -&gt; <code>节点对象</code> -&gt; <code>对象模型</code>，下面是示例代码和配图：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;html&gt;</span></span>
<span class="line"><span>  &lt;head&gt;</span></span>
<span class="line"><span>    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1&quot;&gt;</span></span>
<span class="line"><span>    &lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot;&gt;</span></span>
<span class="line"><span>    &lt;title&gt;Critical Path&lt;/title&gt;</span></span>
<span class="line"><span>  &lt;/head&gt;</span></span>
<span class="line"><span>  &lt;body&gt;</span></span>
<span class="line"><span>    &lt;p&gt;Hello &lt;span&gt;web performance&lt;/span&gt; students!&lt;/p&gt;</span></span>
<span class="line"><span>    &lt;div&gt;&lt;img src=&quot;awesome-photo.jpg&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span>  &lt;/body&gt;</span></span>
<span class="line"><span>&lt;/html&gt;</span></span></code></pre></div><p><img src="`+g+`" alt="error.图片加载失败"></p><h4 id="解析css-生成cssom树" tabindex="-1">解析css，生成cssom树 <a class="header-anchor" href="#解析css-生成cssom树" aria-label="Permalink to &quot;解析css，生成cssom树&quot;">​</a></h4><ul><li>每个css文件都被分析成一个stylesheet对象，每个对象都包含CSS规则。</li><li>css规则对象包含对应于css语法的选择器和声明对象以及其他对象。</li></ul><p>构建过程没有什么特别的差别，下面是示例代码和配图：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>body { font-size: 16px }</span></span>
<span class="line"><span>p { font-weight: bold }</span></span>
<span class="line"><span>span { color: red }</span></span>
<span class="line"><span>p span { display: none }</span></span>
<span class="line"><span>img { float: right }</span></span></code></pre></div><p><img src="`+b+'" alt="error.图片加载失败"></p><h4 id="将dom树和cssom树合并-生成渲染树" tabindex="-1">将dom树和cssom树合并，生成渲染树 <a class="header-anchor" href="#将dom树和cssom树合并-生成渲染树" aria-label="Permalink to &quot;将dom树和cssom树合并，生成渲染树&quot;">​</a></h4><ul><li>浏览器会先从dom树的根节点开始遍历每个可见节点，找到其适配的CSS样式规则并应用。</li><li>将dom树与cssom树结合在一起，这就是渲染树。 <img src="'+f+'" alt="error.图片加载失败"></li><li>每一个渲染对象都对应着dom节点，但是非视觉（隐藏，不占位）dom元素不会插入渲染树，如<code>&lt;head&gt;</code>元素或声明<code>display: none;</code>的元素。</li><li>渲染对象与dom节点不是简单的一对一的关系，一个dom可以对应一个渲染对象，但一个dom元素也可能对应多个渲染对象，因为有很多元素不止包含一个css盒子。（如当文本被折行时，会产生多个行盒，这些行会生成多个渲染对象；又如行内元素同时包含块元素和行内元素，则会创建一个匿名块级盒包含内部行内元素，此时一个dom对应多个渲染对象）</li></ul><h4 id="遍历渲染树-开始布局和计算" tabindex="-1">遍历渲染树，开始布局和计算 <a class="header-anchor" href="#遍历渲染树-开始布局和计算" aria-label="Permalink to &quot;遍历渲染树，开始布局和计算&quot;">​</a></h4><p>布局阶段会从渲染树的根节点开始遍历，然后确定每个节点对象在页面上的确切大小与位置。 布局阶段的输出是一个盒子模型，它会精确地捕获每个元素在屏幕内的确切位置与大小，所有相对的测量值也都会被转换为屏幕内的绝对像素值。</p><h4 id="绘制渲染树-显示到屏幕" tabindex="-1">绘制渲染树，显示到屏幕 <a class="header-anchor" href="#绘制渲染树-显示到屏幕" aria-label="Permalink to &quot;绘制渲染树，显示到屏幕&quot;">​</a></h4><p>在绘制阶段，浏览器会立即发出Paint Setup与Paint事件，开始将渲染树绘制成像素，绘制所需的时间跟CSS样式的复杂度成正比，绘制完成后，用户就可以看到页面的最终呈现效果了。</p><h3 id="repaint和reflow" tabindex="-1">Repaint和Reflow <a class="header-anchor" href="#repaint和reflow" aria-label="Permalink to &quot;Repaint和Reflow&quot;">​</a></h3><p>当用户在浏览网页时进行交互或通过 js 脚本改变页面结构时，以上的部分操作有可能重复运行，此过程称为 Repaint 或 Reflow。</p><h4 id="repaint" tabindex="-1">Repaint <a class="header-anchor" href="#repaint" aria-label="Permalink to &quot;Repaint&quot;">​</a></h4><p>当元素改变的时候，将不会影响元素在页面当中的位置（比如 background-color, border-color, visibility），浏览器仅仅会应用新的样式重绘此元素，此过程称为 Repaint。</p><h4 id="reflow" tabindex="-1">Reflow <a class="header-anchor" href="#reflow" aria-label="Permalink to &quot;Reflow&quot;">​</a></h4><p>当元素改变的时候，将会影响文档内容或结构，或元素位置，此过程称为 Reflow。（ HTML 使用的是 flow based layout ，也就是流式布局，所以，如果某元件的几何尺寸发生了变化，需要重新布局，也就叫 Reflow。）</p><blockquote><p>Reflow 的成本比 Repaint 的成本高得多的多。我们应当尽量避免Reflow。</p></blockquote><h3 id="进而-如何优化浏览器渲染过程" tabindex="-1">进而：如何优化浏览器渲染过程 <a class="header-anchor" href="#进而-如何优化浏览器渲染过程" aria-label="Permalink to &quot;进而：如何优化浏览器渲染过程&quot;">​</a></h3><h4 id="针对html" tabindex="-1">针对html <a class="header-anchor" href="#针对html" aria-label="Permalink to &quot;针对html&quot;">​</a></h4><ul><li>html文档结构层次尽量少，最好不深于6层</li><li>首屏html可以少量，主体结构动态插入</li><li>尽量减少将 DOM 节点属性值放在循环当中，会导致大量读写此属性值。</li><li>创建有效的 HTML 和 CSS ，不要忘记指定文档编码，比如<code>&lt;meta charset=&quot;utf-8&quot;&gt;</code>。</li></ul><h4 id="针对css" tabindex="-1">针对css <a class="header-anchor" href="#针对css" aria-label="Permalink to &quot;针对css&quot;">​</a></h4><ul><li>使用媒体查询，减少初次cssom树的构建量</li><li>尽量用id和class，不要过渡层叠</li><li>样式结构层次尽量简单</li><li>尽可能的为产生动画的 HTML 元素使用 fixed 或 absolute 的 position ，那么修改他们的 CSS 是不会 Reflow 的。</li></ul><h4 id="针对js" tabindex="-1">针对js <a class="header-anchor" href="#针对js" aria-label="Permalink to &quot;针对js&quot;">​</a></h4><ul><li>使用defer和async，避免对文档的阻塞</li><li>可以的话，动态插入js，避免阻塞</li><li>不要通过 JS 逐条修改 DOM 的样式，提前定义好 CSS 的 Class 进行操作。</li></ul><h4 id="针对引入位置" tabindex="-1">针对引入位置 <a class="header-anchor" href="#针对引入位置" aria-label="Permalink to &quot;针对引入位置&quot;">​</a></h4><ul><li>css放到head，让cssom树先行构建；js放到<code>&lt;/body&gt;</code>前，保证dom树先行构建，不被阻塞 避免js文件的插入跟在css文件之后，避免css解析对js执行的延迟，造成阻塞</li></ul><h4 id="针对资源载入" tabindex="-1">针对资源载入 <a class="header-anchor" href="#针对资源载入" aria-label="Permalink to &quot;针对资源载入&quot;">​</a></h4><ul><li>对页面资源进行压缩，对传输进行gzip压缩</li><li>利用link标签的rel属性进行预解析，运用http缓存</li></ul><h2 id="参考文章" tabindex="-1">参考文章 <a class="header-anchor" href="#参考文章" aria-label="Permalink to &quot;参考文章&quot;">​</a></h2><ul><li><a href="https://www.zhihu.com/question/263866883/answer/276139578" target="_blank" rel="noreferrer">https://www.zhihu.com/question/263866883/answer/276139578</a></li><li><a href="https://segmentfault.com/a/1190000008835506" target="_blank" rel="noreferrer">https://segmentfault.com/a/1190000008835506</a></li><li><a href="https://segmentfault.com/a/1190000013522717" target="_blank" rel="noreferrer">https://segmentfault.com/a/1190000013522717</a></li><li><a href="https://blog.csdn.net/qq%5C_29311407/article/details/79988700" target="_blank" rel="noreferrer">https://blog.csdn.net/qq\\_29311407/article/details/79988700</a></li><li><a href="https://www.cnblogs.com/yongwunaci/p/10671999.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/yongwunaci/p/10671999.html</a></li><li><a href="https://www.jianshu.com/p/8758e8a237ee" target="_blank" rel="noreferrer">https://www.jianshu.com/p/8758e8a237ee</a></li></ul><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>',100)]))}const S=t(E,[["render",k]]);export{B as __pageData,S as default};
