import{_ as a,a as n,b as t}from"./chunks/dev-security-xss-2.DEBuOP8Q.js";import{_ as e,c as p,ai as l,o as i}from"./chunks/framework.BrYByd3F.js";const v=JSON.parse('{"title":"开发安全 - XSS 详解","description":"","frontmatter":{},"headers":[],"relativePath":"develop/security/dev-security-x-xss.md","filePath":"develop/security/dev-security-x-xss.md","lastUpdated":1737706346000}'),o={name:"develop/security/dev-security-x-xss.md"};function c(r,s,d,h,u,g){return i(),p("div",null,s[0]||(s[0]=[l(`<h1 id="开发安全-xss-详解" tabindex="-1">开发安全 - XSS 详解 <a class="header-anchor" href="#开发安全-xss-详解" aria-label="Permalink to &quot;开发安全 - XSS 详解&quot;">​</a></h1><blockquote><p>XSS是跨站脚本攻击(Cross Site Scripting)，为不和层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故将跨站脚本攻击缩写为XSS。恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。@pdai</p></blockquote><h2 id="xss-简介" tabindex="-1">XSS 简介 <a class="header-anchor" href="#xss-简介" aria-label="Permalink to &quot;XSS 简介&quot;">​</a></h2><p>举一个简单的例子，就是留言板。我们知道留言板通常的任务就是把用户留言的内容展示出来。正常情况下，用户的留言都是正常的语言文字，留言板显示的内容也就没毛病。然而这个时候如果有人不按套路出牌，在留言内容中丢进去一行</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;script&gt;alert(&quot;aaa&quot;)&lt;/script&gt;</span></span></code></pre></div><p>那么留言板界面的网页代码就会变成形如以下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;html&gt;</span></span>
<span class="line"><span>    &lt;head&gt;</span></span>
<span class="line"><span>       &lt;title&gt;Board&lt;/title&gt;</span></span>
<span class="line"><span>    &lt;/head&gt;</span></span>
<span class="line"><span>    &lt;body&gt;</span></span>
<span class="line"><span>    &lt;div id=&quot;board&quot;&gt;</span></span>
<span class="line"><span>        &lt;script&gt;alert(&quot;aaa&quot;)&lt;/script&gt;</span></span>
<span class="line"><span>    &lt;/div&gt;     </span></span>
<span class="line"><span>    &lt;/body&gt;</span></span>
<span class="line"><span>&lt;/html&gt;</span></span></code></pre></div><p>那么这个时候问题就来了，当浏览器解析到用户输入的代码那一行时会发生什么呢？答案很显然，浏览器并不知道这些代码改变了原本程序的意图，会照做弹出一个信息框。</p><p>既然能够执行脚本，那么，这些脚本完全可以是：</p><ul><li>链接劫持</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;script&gt;window.location.href=&quot;http://www.baidu.com&quot;;&lt;/script&gt;</span></span></code></pre></div><ul><li>盗取cookie</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;script&gt;alert(&quot;document.cookie&quot;);&lt;/script&gt;</span></span></code></pre></div><p>对于攻击者来说，能够让受害者浏览器执行恶意代码的唯一方式，就是把代码注入到受害者从网站下载的网页中, 这就是xss攻击。</p><h2 id="xss-攻击类型" tabindex="-1">XSS 攻击类型 <a class="header-anchor" href="#xss-攻击类型" aria-label="Permalink to &quot;XSS 攻击类型&quot;">​</a></h2><blockquote><p>通常XSS攻击分为：<code>反射型xss攻击</code>, <code>存储型xss攻击</code> 和 <code>DOM型xss攻击</code>。同时注意以下例子只是简单的向你解释这三种类型的攻击方式而已，实际情况比这个复杂，具体可以再结合最后一节深入理解。</p></blockquote><h3 id="反射型xss攻击" tabindex="-1">反射型xss攻击 <a class="header-anchor" href="#反射型xss攻击" aria-label="Permalink to &quot;反射型xss攻击&quot;">​</a></h3><blockquote><p>反射型的攻击需要用户主动的去访问带攻击的链接，攻击者可以通过邮件或者短信的形式，诱导受害者点开链接。如果攻击者配合短链接URL，攻击成功的概率会更高。</p></blockquote><p>在一个反射型XSS攻击中，恶意文本属于受害者发送给网站的请求中的一部分。随后网站又把恶意文本包含进用于响应用户的返回页面中，发还给用户。</p><p>我们来看下面这个场景:</p><p><img src="`+a+'" alt=""></p><ul><li>用户误点开了带攻击的url : <code>http://xxx?keyword=&lt;script&gt;alert(&#39;aaa&#39;)&lt;/script&gt;</code></li><li>网站给受害者的返回中包含了来自URL的的恶意文本</li><li>用户的浏览器收到文本后执行页面，会在网页中弹窗aaa</li></ul><p>注意，这里如果页面是后端模板渲染生成，keyword参数可能是在model里面设置参数的。</p><h3 id="存储型xss攻击" tabindex="-1">存储型xss攻击 <a class="header-anchor" href="#存储型xss攻击" aria-label="Permalink to &quot;存储型xss攻击&quot;">​</a></h3><blockquote><p>这种攻击方式恶意代码会被存储在数据库中，其他用户在正常访问的情况下，也有会被攻击，影响的范围比较大。</p></blockquote><p>我们来看这种攻击的一个场景</p><p><img src="'+n+'" alt=""></p><p>1、攻击者通过评论表单提交将<code>&lt;script&gt;alert(‘aaa’)&lt;/script&gt;</code>提交到网站</p><p>2、网站后端对提交的评论数据不做任何操作，直接存储到数据库中</p><p>3、其他用户访问正常访问网站，并且需要请求网站的评论数据</p><p>4、网站后端会从数据库中取出数据，直接返回给用户</p><p>5、用户得到页面后，直接运行攻击者提交的代码<code>&lt;script&gt;alert(‘aaa’)&lt;/script&gt;</code>，所有用户都会在网页中弹出aaa的弹窗</p><h3 id="dom型xss攻击" tabindex="-1">DOM型xss攻击 <a class="header-anchor" href="#dom型xss攻击" aria-label="Permalink to &quot;DOM型xss攻击&quot;">​</a></h3><blockquote><p>基于DOM的XSS攻击是反射型攻击的变种。服务器返回的页面是正常的，只是我们在页面执行js的过程中，会把攻击代码植入到页面中。</p></blockquote><p>我们来看这种攻击的一个场景</p><p><img src="'+t+`" alt=""></p><p>1、用户误点开了带攻击的url : <code>http://xxx?name=&lt;script&gt;alert(&#39;aaa&#39;)&lt;/script&gt;</code></p><p>2、网站给受害者的返回中正常的网页</p><p>3、用户的浏览器收到文本后执行页面合法脚本，这时候页面恶意脚本会被执行，会在网页中弹窗aaa</p><p>这种攻击方式发生在我们合法的js执行中，服务器无法检测我们的请求是否有攻击的危险</p><h2 id="xss-攻击的危害" tabindex="-1">XSS 攻击的危害 <a class="header-anchor" href="#xss-攻击的危害" aria-label="Permalink to &quot;XSS 攻击的危害&quot;">​</a></h2><ul><li>通过document.cookie盗取cookie</li><li>使用js或css破坏页面正常的结构与样式</li><li>流量劫持（通过访问某段具有window.location.href定位到其他页面）</li><li>Dos攻击：利用合理的客户端请求来占用过多的服务器资源，从而使合法用户无法得到服务器响应。</li><li>利用iframe、frame、XMLHttpRequest或上述Flash等方式，以（被攻击）用户的身份执行一些管理动作，或执行一些一般的如发微博、加好友、发私信等操作。</li><li>利用可被攻击的域受到其他域信任的特点，以受信任来源的身份请求一些平时不允许的操作，如进行不当的投票活动。</li><li>DOS（拒绝服务）客户端浏览器。</li><li>钓鱼攻击，高级的钓鱼技巧。</li><li>劫持用户Web行为，甚至进一步渗透内网。</li><li>蠕虫式挂马攻击、刷广告、刷浏量、破坏网上数据</li></ul><h2 id="xss-攻击的防御" tabindex="-1">XSS 攻击的防御 <a class="header-anchor" href="#xss-攻击的防御" aria-label="Permalink to &quot;XSS 攻击的防御&quot;">​</a></h2><p>XSS攻击其实就是代码的注入。用户的输入被编译成恶意的程序代码。所以，为了防范这一类代码的注入，需要确保用户输入的安全性。对于攻击验证，我们可以采用以下两种措施：</p><ul><li><strong>编码，就是转义用户的输入，把用户的输入解读为数据而不是代码</strong></li><li><strong>校验，对用户的输入及请求都进行过滤检查，如对特殊字符进行过滤，设置输入域的匹配规则等</strong>。</li></ul><p>具体比如：</p><ul><li><strong>对于验证输入</strong>，我们既可以在<code>服务端验证</code>，也可以在<code>客户端验证</code></li><li><strong>对于持久性和反射型攻击</strong>，<code>服务端验证</code>是必须的，服务端支持的任何语言都能够做到</li><li><strong>对于基于DOM的XSS攻击</strong>，验证输入在客户端必须执行，因为从服务端来说，所有发出的页面内容是正常的，只是在客户端js代码执行的过程中才发生可攻击</li><li>但是对于各种攻击方式，<strong>我们最好做到客户端和服务端都进行处理</strong>。</li></ul><p>其它还有一些辅助措施，比如：</p><ul><li><strong>入参长度限制</strong>： 通过以上的案例我们不难发现xss攻击要能达成往往需要较长的字符串，因此对于一些可以预期的输入可以通过限制长度强制截断来进行防御。</li><li>设置cookie httponly为true（具体请看下文的解释）</li></ul><p>具体措施如下：</p><h3 id="escapehtml" tabindex="-1">escapeHTML <a class="header-anchor" href="#escapehtml" aria-label="Permalink to &quot;escapeHTML&quot;">​</a></h3><ul><li>前端：</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// util封装可以参考 HTMLParser.js, 或者自己封装</span></span>
<span class="line"><span>util.escapeHtml(html);</span></span></code></pre></div><ul><li>后端， 推荐使用ApacheCommon包下 <code>StringEscapeUtils</code> – 用于正确处理转义字符，产生正确的Java、JavaScript、HTML、XML和SQL代码；</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// encode html</span></span>
<span class="line"><span>System.out.println(StringEscapeUtils.escapeHtml(&quot;&lt;a&gt;abc&lt;/a&gt;&quot;));</span></span>
<span class="line"><span>System.out.println(StringEscapeUtils.unescapeHtml(&quot;&amp;lt;a&amp;gt;abc&amp;lt;/a&amp;gt;&quot;));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// encode js</span></span>
<span class="line"><span>System.out.println(StringEscapeUtils.escapeJavaScript(&quot;&lt;script&gt;alert(&#39;123&#39;)&lt;script&gt;&quot;));</span></span>
<span class="line"><span>System.out.println(StringEscapeUtils.unescapeJavaScript(&quot;&lt;script&gt;alert(\\&#39;123\\&#39;)&lt;script&gt;&quot;));</span></span></code></pre></div><h3 id="过滤或者校验" tabindex="-1">过滤或者校验 <a class="header-anchor" href="#过滤或者校验" aria-label="Permalink to &quot;过滤或者校验&quot;">​</a></h3><p>校验是一种过滤用户输入以至于让代码中恶意部分被移除的行为。校验都是通过一定的经验和规则，对用户的输入进行匹配，过滤，去除掉存在攻击风险的部分。</p><p>我们可以通过黑名单的方式和白名单的方式来设置我们的规则，对用户提交的数据进行有效性验证，仅接受符合我们期望格式的内容提交，阻止或者忽略除此外的其他任何数据。</p><ul><li><p><strong>黑名单</strong> 我们可以把某些危险的标签或者属性纳入黑名单，过滤掉它。</p></li><li><p><strong>白名单</strong> 这种方式只允许部分标签和属性，不在这个白名单中的，一律过滤掉它。</p></li></ul><p>这里举个例子，<strong>富文本的防御</strong>: 富文本的情况非常的复杂，js可以藏在标签里，超链接url里，何种属性里。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;script&gt;alert(1)&lt;/script&gt;</span></span>
<span class="line"><span>&lt;a href=&quot;javascript:alert(1)&quot;&gt;&lt;/a&gt;</span></span>
<span class="line"><span>&lt;img src=&quot;abc&quot; onerror=&quot;alert(1)&quot;/&gt;</span></span></code></pre></div><p>所以我们不能过用上面的方法做简单的转义, 因为情况实在太多了。思路就是黑白名单校验，这里提供一个包，帮助我们去解析html树状结构，它使用起来和jquery非常的类似。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npm install cheerio --save</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>var xssFilter = function(html) {</span></span>
<span class="line"><span>    if(!html) return &#39;&#39;;</span></span>
<span class="line"><span>    var cheerio = require(&#39;cheerio&#39;);</span></span>
<span class="line"><span>    var $ = cheerio.load(html);</span></span>
<span class="line"><span>    //白名单</span></span>
<span class="line"><span>    var whiteList = {</span></span>
<span class="line"><span>        &#39;html&#39; : [&#39;&#39;],</span></span>
<span class="line"><span>        &#39;body&#39; : [&#39;&#39;],</span></span>
<span class="line"><span>        &#39;head&#39; : [&#39;&#39;],</span></span>
<span class="line"><span>        &#39;div&#39; : [&#39;class&#39;],</span></span>
<span class="line"><span>        &#39;img&#39; : [&#39;src&#39;],</span></span>
<span class="line"><span>        &#39;a&#39; : [&#39;href&#39;],</span></span>
<span class="line"><span>        &#39;font&#39;:[&#39;size&#39;,&#39;color&#39;]</span></span>
<span class="line"><span>    };</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    $(&#39;*&#39;).each(function(index,elem){</span></span>
<span class="line"><span>        if(!whiteList[elem.name]) {</span></span>
<span class="line"><span>            $(elem).remove();</span></span>
<span class="line"><span>            return;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        for(var attr in elem.attribs) {</span></span>
<span class="line"><span>            if(whiteList[elem.name].indexOf(attr) === -1) {</span></span>
<span class="line"><span>                $(elem).attr(attr,null);</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    });</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    return $.html();</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>console.log(xssFilter(&#39;&lt;div&gt;&lt;font color=&quot;red&quot;&gt;你好&lt;/font&gt;&lt;a href=&quot;http://www.baidu.com&quot;&gt;百度&lt;/a&gt;&lt;script&gt;alert(&quot;哈哈你被攻击了&quot;)&lt;/script&gt;&lt;/div&gt;&#39;));</span></span></code></pre></div><h3 id="csp-content-security-policy" tabindex="-1">CSP(Content Security Policy) <a class="header-anchor" href="#csp-content-security-policy" aria-label="Permalink to &quot;CSP(Content Security Policy)&quot;">​</a></h3><p>内容安全策略（Content Security Policy，简称CSP）是一种以可信白名单作机制，来限制网站中是否可以包含某来源内容。</p><p>CSP对你用于浏览页面的浏览器做出了限制，以确保它只能从可信赖来源下载的资源。_资源_可以是脚本，样式，图片，或者其他被页面引用的文件。这意味着即使攻击者成功的在你的网站中注入了恶意内容，CSP也能免于它被执行。</p><p>默认配置下不允许执行内联代码（<code>&lt;script&gt;</code>块内容，内联事件，内联样式），以及禁止执行eval() , newFunction() , setTimeout([string], ...) 和setInterval([string], ...) 。</p><p>示例：</p><ul><li>只允许本站资源</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Content-Security-Policy： default-src ‘self’</span></span></code></pre></div><ul><li>允许本站的资源以及任意位置的图片以及 下的脚本。</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Content-Security-Policy： default-src ‘self’; img-src *;</span></span>
<span class="line"><span>script-src</span></span></code></pre></div><h2 id="xss-攻击再深入理解" tabindex="-1">XSS 攻击再深入理解 <a class="header-anchor" href="#xss-攻击再深入理解" aria-label="Permalink to &quot;XSS 攻击再深入理解&quot;">​</a></h2><h3 id="对script再做阐述" tabindex="-1">对<code>script</code>再做阐述 <a class="header-anchor" href="#对script再做阐述" aria-label="Permalink to &quot;对\`script\`再做阐述&quot;">​</a></h3><blockquote><p>有很多初学者以为只要对<code>&lt;script&gt;</code>进行替换就可以了？其实不是，具体看下面：</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 外部攻击代码</span></span>
<span class="line"><span>&lt;script src=&#39;ls.js&#39;&gt;&lt;/script&gt;  </span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 注释方法防止过滤  </span></span>
<span class="line"><span>&lt;script&gt;alert/*注释*/(&#39;XSS&#39;)&lt;/script&gt;</span></span></code></pre></div><h3 id="是不是只要对script进行防御呢" tabindex="-1">是不是只要对<code>script</code>进行防御呢？ <a class="header-anchor" href="#是不是只要对script进行防御呢" aria-label="Permalink to &quot;是不是只要对\`script\`进行防御呢？&quot;">​</a></h3><blockquote><p>用户的输入通过<code>&lt;script&gt;这里是脚本&lt;/script&gt;</code>插入脚本只是最基本的一种方式， 其它方式还有：</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// img链接地址xss</span></span>
<span class="line"><span>&lt;img src=&quot;javascript:alert(&#39;XSS&#39;)&quot;&gt;    </span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 加载图像失败执行</span></span>
<span class="line"><span>&lt;img src=&#39;null&#39; οnerrοr=&quot;alert(&#39;XSS&#39;)&quot;&gt;    </span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 利用onload，onXXX事件</span></span>
<span class="line"><span>&lt;iframe onload=&quot;alert(&#39;XSS&#39;)&quot;&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// a链接的xss</span></span>
<span class="line"><span>&lt;a href =&quot;javascript:alert(&#39;XSS&#39;)&quot;&gt;&lt;/a&gt;   </span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 在css样式中加入</span></span>
<span class="line"><span>body{bockground-image:url(javascript:alert(&#39;XSS&#39;))}</span></span></code></pre></div><h3 id="通过xss盗用cookie危害是什么" tabindex="-1">通过xss盗用cookie危害是什么？ <a class="header-anchor" href="#通过xss盗用cookie危害是什么" aria-label="Permalink to &quot;通过xss盗用cookie危害是什么？&quot;">​</a></h3><blockquote><p>csrf攻击其实是不能盗用cookie的，它只是以当前的名义进行恶意操作；而xss攻击是可以直接盗用cookie。</p></blockquote><p>那盗用cookie的危害是什么？比如拿到用户的cookie信息，然后传送到攻击者自己的服务器，从cookie中提取敏感信息，拿到用户的登录信息，或者攻击者可以通过修改DOM在页面上插入一个假的登陆框，也可以把表单的<code>action</code>属性指向他自己的服务器地址，然后欺骗用户提交自己的敏感信息。</p><p>这就是为什么cookie也是要防御的，比如</p><ul><li>设置http-only</li><li>设置cookie的有效周期</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@RequestMapping(&quot;/login&quot;)</span></span>
<span class="line"><span>@ResponseBody</span></span>
<span class="line"><span>public void login(HttpServletRequest request, HttpServletResponse response) throws IOException {</span></span>
<span class="line"><span>    Cookie cookie = new Cookie(&quot;access_token&quot;, UUID.randomUUID().toString());</span></span>
<span class="line"><span>    cookie.setHttpOnly(true); // 这里</span></span>
<span class="line"><span>    cookie.setPath(&quot;/&quot;);</span></span>
<span class="line"><span>    cookie.setDomain(&quot;localhost&quot;);</span></span>
<span class="line"><span>    response.addCookie(cookie);</span></span>
<span class="line"><span>    response.sendRedirect(&quot;http://localhost:8088/index.html&quot;);</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="xss攻击和csrf攻击配合" tabindex="-1">xss攻击和csrf攻击配合 <a class="header-anchor" href="#xss攻击和csrf攻击配合" aria-label="Permalink to &quot;xss攻击和csrf攻击配合&quot;">​</a></h3><blockquote><p>一般攻击可能不是单一的行为，而是可能会组合攻击；比如xss攻击一般还可以配合csrf攻击进行配合攻击，这里给个例子，方便你理解；注意，只是仅仅方便你理解，实际不是这么简单。</p></blockquote><p>假设你可以通过如下GET请求方式进行修改密码，这是典型的csrf攻击方式：<a href="https://pdai.tech/md/develop/security/dev-security-x-csrf.html" target="_blank" rel="noreferrer">开发安全 - CSRF 详解</a></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>http://127.0.0.1/test/vulnerabilities/csrf/?</span></span>
<span class="line"><span>password_new=123456&amp;password_conf=123456&amp;Change=Change</span></span></code></pre></div><p>那么你可以通过如下方式xss攻击添加脚本</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;script type=&quot;text/javascript&quot; src=&quot;http://127.0.0.1/test/vulnerabilities/csrf/?</span></span>
<span class="line"><span>password_new=123456&amp;password_conf=123456&amp;Change=Change#&quot;&gt;&lt;/script&gt;</span></span></code></pre></div><h3 id="对于后端渲染html框架" tabindex="-1">对于后端渲染HTML框架 <a class="header-anchor" href="#对于后端渲染html框架" aria-label="Permalink to &quot;对于后端渲染HTML框架&quot;">​</a></h3><p>在实际的开发中，后端框架（比如SpringMVC相关框架）modelAndView是可以通过viewResolver渲染生成html的；而一般的视图渲染解析框架都已经可以处理一部分xss攻击的情况，比如thymeleaf，freemarker等等。</p><p>这里要提醒你的是<code>避免误用</code>, 举个thymeleaf的例子，这个漏洞是我在实际的渗透测试中遇到的一个xss攻击:</p><ul><li>html页面，这是一个封装的一个消息module</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;div id=&quot;msgContainer&quot;&gt;</span></span>
<span class="line"><span>    &lt;div th:utext=&quot;\${msg}&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span>&lt;/div&gt;</span></span></code></pre></div><ul><li>后端添加</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// param</span></span>
<span class="line"><span>String param = &quot;your input name&quot;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 后端根据不同的处理情况，返回不同的信息</span></span>
<span class="line"><span>String msg = &quot;&lt;b&gt;Warning&lt;/b&gt;: this is pdai&#39;s warning, invalid for your input name: &quot; + param; </span></span>
<span class="line"><span>model.addMsg(&quot;msg&quot;, msg);</span></span></code></pre></div><p>这里后端的本意是期望封装一个msg组件，并且可以通过html方式高亮一些关键字，做到最大程度的通用。</p><p>但问题是 <code>th:utext</code>不做内容编码的，而且存在输入参数（可能这两块是不同的人写的，写后端msg组件的人觉得<code>&lt;b&gt;Warning&lt;/b&gt;</code>很方便；但是不会意识到，其他人可能可能会添加用户的输入参数进来），一旦用户的输入中包含脚本，将导致xss注入的可能。</p><h3 id="对于前端渲染html" tabindex="-1">对于前端渲染HTML <a class="header-anchor" href="#对于前端渲染html" aria-label="Permalink to &quot;对于前端渲染HTML&quot;">​</a></h3><p>在使用 .innerHTML、.outerHTML、document.write() 时要特别小心，不要把不可信的数据作为 HTML 插到页面上，而应尽量使用 .textContent、.setAttribute() 等。</p><p>如果用 Vue/React 技术栈，并且不使用 v-html/dangerouslySetInnerHTML 功能，就在前端 render 阶段避免 innerHTML、outerHTML 的 XSS 隐患。</p><p>DOM 中的内联事件监听器，如 location、onclick、onerror、onload、onmouseover 等，<code>&lt;a&gt;</code> 标签的 href 属性，JavaScript 的 eval()、setTimeout()、setInterval() 等，都能把字符串作为代码运行。如果不可信的数据拼接到字符串中传递给这些 API，很容易产生安全隐患，请务必避免。</p><p><strong>在操作时可以参考如下</strong>：</p><ul><li>前端有个JS库叫 <code>HTMLParser.js</code>, 可以用来encodeHtml</li><li>有一个类库是针对防XSS攻击的：<a href="https://github.com/leizongmin/js-xss" target="_blank" rel="noreferrer">js-xss在新窗口打开</a></li></ul><h3 id="浏览器之间对xss处理有差异" tabindex="-1">浏览器之间对xss处理有差异 <a class="header-anchor" href="#浏览器之间对xss处理有差异" aria-label="Permalink to &quot;浏览器之间对xss处理有差异&quot;">​</a></h3><blockquote><p>对于有些xss漏洞可能在某些浏览器无法复现的问题？在某些浏览器某些版本下：</p></blockquote><ul><li>chrome浏览器自带防御,可拦截反射性XSS（HTML内容和属性）</li><li>firefox不会自动拦截</li></ul><p>这个在做渗透测试，或者开发修复测试时要注意下这个问题。</p><h2 id="参考文章" tabindex="-1">参考文章 <a class="header-anchor" href="#参考文章" aria-label="Permalink to &quot;参考文章&quot;">​</a></h2><ul><li><a href="https://blog.csdn.net/Jeffrey20170812/article/details/83749119" target="_blank" rel="noreferrer">https://blog.csdn.net/Jeffrey20170812/article/details/83749119</a></li><li><a href="https://blog.csdn.net/weixin%5C_38984030/article/details/93494600" target="_blank" rel="noreferrer">https://blog.csdn.net/weixin\\_38984030/article/details/93494600</a></li><li><a href="https://segmentfault.com/a/1190000018266262" target="_blank" rel="noreferrer">https://segmentfault.com/a/1190000018266262</a></li><li><a href="https://segmentfault.com/a/1190000013315450/" target="_blank" rel="noreferrer">https://segmentfault.com/a/1190000013315450/</a></li><li><a href="https://www.cnblogs.com/unclekeith/p/7750681.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/unclekeith/p/7750681.html</a></li><li><a href="https://zhuanlan.zhihu.com/p/26177815" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/26177815</a></li><li><a href="https://www.cnblogs.com/caizhenbo/p/6836390.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/caizhenbo/p/6836390.html</a></li></ul><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>`,114)]))}const k=e(o,[["render",c]]);export{v as __pageData,k as default};
