import{_ as t,c as s,ai as a,o as p}from"./chunks/framework.BrYByd3F.js";const o="/vitepress-blog-template/images/develop/ut/dev-qt-1.png",l="/vitepress-blog-template/images/develop/ut/dev-qt-2.png",r="/vitepress-blog-template/images/develop/ut/dev-qt-3.png",i="/vitepress-blog-template/images/develop/ut/dev-qt-4.png",n="/vitepress-blog-template/images/develop/ut/dev-qt-5.png",c="/vitepress-blog-template/images/develop/ut/dev-qt-6.png",d="/vitepress-blog-template/images/develop/ut/dev-qt-7.png",m="/vitepress-blog-template/images/develop/ut/dev-qt-8.png",k=JSON.parse('{"title":"代码质量 - 统一风格：统一代码格式化详解","description":"","frontmatter":{},"headers":[],"relativePath":"develop/ut/dev-qt-code-style.md","filePath":"develop/ut/dev-qt-code-style.md","lastUpdated":1737706346000}'),g={name:"develop/ut/dev-qt-code-style.md"};function u(h,e,v,_,b,q){return p(),s("div",null,e[0]||(e[0]=[a('<h1 id="代码质量-统一风格-统一代码格式化详解" tabindex="-1">代码质量 - 统一风格：统一代码格式化详解 <a class="header-anchor" href="#代码质量-统一风格-统一代码格式化详解" aria-label="Permalink to &quot;代码质量 - 统一风格：统一代码格式化详解&quot;">​</a></h1><blockquote><p>项目的代码通常是一个团队共同完成的，要保障代码质量的首要前提就是统一代码的风格，本文将介绍常用的统一风格的措施之<strong>统一代码格式化</strong>。@pdai</p></blockquote><h2 id="统一代码格式化" tabindex="-1">统一代码格式化 <a class="header-anchor" href="#统一代码格式化" aria-label="Permalink to &quot;统一代码格式化&quot;">​</a></h2><blockquote><p>统一风格的第一条，就是要统一代码的格式化，因为不同人提交的代码格式化不一样将导致merge代码造成大几率的冲突；而统一的代码风格无论是对于项目可维护性，还是降低merge冲突都是极为重要的。</p></blockquote><p>通常是两种方式：一种方式是，强制使用同样的IDE工具；另外一个更为常见的是，使用同一种代码格式规范。</p><h3 id="eclipse-code-formatter插件" tabindex="-1">Eclipse code formatter插件 <a class="header-anchor" href="#eclipse-code-formatter插件" aria-label="Permalink to &quot;Eclipse code formatter插件&quot;">​</a></h3><p>最为常用的工具是 <strong>Eclipse code formatter插件</strong>, 用来统一eclipse和IDEA等IDE的代码规范</p><ul><li><strong>安装Eclipse Code Formatter插件</strong>：</li></ul><p><img src="'+o+'" alt="error.图片加载失败"></p><p>(安装完之后需要重启idea)</p><ul><li><strong>启用Eclipse Code Formatter</strong></li></ul><p>File-&gt;Settings-&gt;Other Tools-&gt;Eclipse Code Formatter-&gt;Use the Eclipse Code Formatter</p><p><img src="'+l+'" alt="error.图片加载失败"></p><p>（相关的formtter.xml配置文件可以到网上下载下或者用eclipse导出下）</p><h3 id="其它idea统一样式" tabindex="-1">其它IDEA统一样式 <a class="header-anchor" href="#其它idea统一样式" aria-label="Permalink to &quot;其它IDEA统一样式&quot;">​</a></h3><blockquote><p>在Eclipse Code Formatter配置后，还是会有其它一些差异的，这时候还需要通过IDEA约定一些设置和一些公共样式的scheme（这里也会同时考虑checkstyle等样式检查工具对代码的要求）</p></blockquote><ul><li><strong>配置自动导入包</strong></li></ul><p><img src="'+r+'" alt="error.图片加载失败"></p><ul><li><strong>配置code style</strong></li></ul><p>通常而言，注意下这里几步（当然你可以设置更多，特意截图这几步，主要考虑checkstyle的要求及imports化在不同IDE下的差异），然后保存我一个scheme放到项目根目录下，供所有队员统一使用</p><p><img src="'+i+'" alt="error.图片加载失败"></p><h3 id="统一的注释" tabindex="-1">统一的注释 <a class="header-anchor" href="#统一的注释" aria-label="Permalink to &quot;统一的注释&quot;">​</a></h3><ul><li><strong>类文件头的注释</strong></li></ul><p><img src="'+n+`" alt="error.图片加载失败"></p><p>测试下, 创建一个类TestClass，将自动生成文件头注释</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/**</span></span>
<span class="line"><span> * This class is for xxxx.</span></span>
<span class="line"><span> *</span></span>
<span class="line"><span> * @author pdai</span></span>
<span class="line"><span> * @version 2021/1/20</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>public class TestClass {</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>当然，如果你发现对已经存在的类进行类注释&#39;/**&#39;时无法自动加入上述注释时，还可以使用Live Template</p><p><img src="`+c+'" alt="error.图片加载失败"></p><p>配置好以后，方法头 输入<code>A</code>，然后按TAB键</p><p><img src="'+d+'" alt="error.图片加载失败"></p><p>再按Enter</p><p><img src="'+m+'" alt="error.图片加载失败"></p><ul><li><strong>方法的注释</strong></li></ul><p>如果有必要的话，还可以设置下方法的注释（其实我觉得默认就够了）</p><p>（参考上述Live Template方式）</p><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>',36)]))}const E=t(g,[["render",u]]);export{k as __pageData,E as default};
