import{_ as e,c as l,ai as r,o as a}from"./chunks/framework.BrYByd3F.js";const c=JSON.parse('{"title":"♥代码质量保障知识体系详解♥","description":"","frontmatter":{},"headers":[],"relativePath":"develop/ut/dev-qt-overview.md","filePath":"develop/ut/dev-qt-overview.md","lastUpdated":1737706346000}'),i={name:"develop/ut/dev-qt-overview.md"};function o(n,t,d,u,p,h){return a(),l("div",null,t[0]||(t[0]=[r('<h1 id="♥代码质量保障知识体系详解♥" tabindex="-1">♥代码质量保障知识体系详解♥ <a class="header-anchor" href="#♥代码质量保障知识体系详解♥" aria-label="Permalink to &quot;♥代码质量保障知识体系详解♥&quot;">​</a></h1><blockquote><p>本系列主要针对如何保障开发侧代码质量，包含单元测试及实现，以及常用的控制团队开发中代码质量的方式，比如代码风格，命名规范，静态代码检查等。@pdai</p></blockquote><h3 id="相关文章" tabindex="-1">相关文章 <a class="header-anchor" href="#相关文章" aria-label="Permalink to &quot;相关文章&quot;">​</a></h3><blockquote><p><strong>B1. 开发之单元测试</strong>：单元测试是从开发侧保证软件质量的第一步，本章将具体介绍单元测试相关的内容和工具，比如Junit，Mockito等。</p></blockquote><ul><li><a href="https://pdai.tech/md/develop/ut/dev-ut-unit-test.html" target="_blank" rel="noreferrer">单元测试：浅谈单元测试</a><ul><li>单元测试（unit testing），是指对软件中的最小可测试单元进行检查和验证。这是基础，所以围绕着单元测试，我从网上搜集和总结了相关的概念，以助你完善体系。</li></ul></li><li><a href="https://pdai.tech/md/develop/ut/dev-ut-x-junit.html" target="_blank" rel="noreferrer">单元测试：Junit4 详解</a><ul><li>JUint是Java编程语言的单元测试框架，用于编写和运行可重复的自动化测试。本文主要针对Junit4要点进行梳理总结。</li></ul></li><li><a href="https://pdai.tech/md/develop/ut/dev-ut-x-junit5.html" target="_blank" rel="noreferrer">单元测试：Junit5 详解</a><ul><li>JUnit 5是JUnit的下一代。目标是为JVM上的开发人员端测试创建一个最新的基础。这包括专注于Java 8及更高版本，以及启用许多不同风格的测试。</li></ul></li><li><a href="https://pdai.tech/md/develop/ut/dev-ut-x-mockito.html" target="_blank" rel="noreferrer">单元测试：Mockito 详解</a><ul><li>Mock通常是指，在测试一个对象A时，我们构造一些假的对象来模拟与A之间的交互，而这些Mock对象的行为是我们事先设定且符合预期。通过这些Mock对象来测试A在正常逻辑，异常逻辑或压力情况下工作是否正常。而Mockito是最流行的Java mock框架之一。</li></ul></li><li><a href="https://pdai.tech/md/develop/ut/dev-ut-x-junit-idea.html" target="_blank" rel="noreferrer">单元测试：IDEA下单元测试详解</a><ul><li>工欲善其事必先利其器，我们在写单元测试一定要使用工具，这将能大幅度提升编码的效率。本文以IDEA为例，看看如何利用插件提升效率。</li></ul></li><li><a href="https://pdai.tech/md/develop/ut/dev-ut-springboot2.html" target="_blank" rel="noreferrer">单元测试 - SpringBoot2+Mockito实战</a><ul><li>在真实的开发中，我们通常是使用SpringBoot的，目前SpringBoot是v2.4.x的版本（SpringBoot 2.2.2.RELEASE之前默认是使用 JUnit4，之后版本默认使用Junit5）；所以我们写个基于SpringBoot2.4+H2的内存库的简单例子，同时加点必要的单元测试。</li></ul></li></ul><blockquote><p><strong>B2. 开发之代码质量</strong>：项目的代码通常是一个团队共同完成的，要保障代码质量的首要前提就是统一代码的风格，命名规范，静态代码检查等等。</p></blockquote><ul><li><a href="https://pdai.tech/md/develop/ut/dev-qt-code-style.html" target="_blank" rel="noreferrer">代码质量 - 统一风格：统一代码格式化详解</a><ul><li>项目的代码通常是一个团队共同完成的，要保障代码质量的首要前提就是统一代码的风格，本文将介绍常用的统一风格的措施之<strong>统一代码格式化</strong>。</li></ul></li><li><a href="https://pdai.tech/md/develop/ut/dev-qt-code-style-2.html" target="_blank" rel="noreferrer">代码质量 - 统一风格：统一命名规范详解</a><ul><li>好的代码本身就是注释, 所以我们需要统一命名风格，本文将介绍常用的统一风格的措施之<strong>统一命名规范</strong>。</li></ul></li><li><a href="https://pdai.tech/md/develop/ut/dev-qt-code-style-1.html" target="_blank" rel="noreferrer">代码质量 - 统一风格：静态样式检查详解</a><ul><li>统一样式检查规范里，最为常用的统一样式工具是checkstyle插件，本文将介绍常用的统一风格的措施之<strong>静态样式检查</strong>。</li></ul></li><li><a href="https://pdai.tech/md/develop/ut/dev-qt-sonarlint.html" target="_blank" rel="noreferrer">代码质量 - 代码质量管理: Sonarlint插件详解</a><ul><li>在提交代码前，为提升代码质量还需要使用一些静态代码工具检查代码质量，最为常用的是Sonar；在本地IDE中可以配置Sonarlint插件进行检查。</li></ul></li><li><a href="https://pdai.tech/md/develop/ut/dev-qt-spotbugs.html" target="_blank" rel="noreferrer">代码质量 - 代码质量管理: SpotBugs插件详解</a><ul><li>SpotBugs是Findbugs的继任者（Findbugs已经于2016年后不再维护），用于对代码进行静态分析，查找相关的漏洞；在本地IDE中可以配置SpotBugs插件进行检查。</li></ul></li></ul><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>',8)]))}const v=e(i,[["render",o]]);export{c as __pageData,v as default};
