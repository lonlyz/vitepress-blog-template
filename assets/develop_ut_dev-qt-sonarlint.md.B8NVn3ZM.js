import{_ as s,c as a,ai as l,o as e}from"./chunks/framework.BrYByd3F.js";const t="/vitepress-blog-template/images/develop/ut/dev-qt-sonarlint-1.png",p="/vitepress-blog-template/images/develop/ut/dev-qt-sonarlint-3.png",o="/vitepress-blog-template/images/develop/ut/dev-qt-sonarlint-2.png",i="/vitepress-blog-template/images/develop/ut/dev-qt-sonarlint-4.png",r="/vitepress-blog-template/images/develop/ut/dev-qt-sonarlint-5.png",_=JSON.parse('{"title":"代码质量 - 代码质量管理: Sonarlint插件详解","description":"","frontmatter":{},"headers":[],"relativePath":"develop/ut/dev-qt-sonarlint.md","filePath":"develop/ut/dev-qt-sonarlint.md","lastUpdated":1737706346000}'),c={name:"develop/ut/dev-qt-sonarlint.md"};function d(u,n,g,m,h,b){return e(),a("div",null,n[0]||(n[0]=[l('<h1 id="代码质量-代码质量管理-sonarlint插件详解" tabindex="-1">代码质量 - 代码质量管理: Sonarlint插件详解 <a class="header-anchor" href="#代码质量-代码质量管理-sonarlint插件详解" aria-label="Permalink to &quot;代码质量 - 代码质量管理: Sonarlint插件详解&quot;">​</a></h1><blockquote><p>在提交代码前，为提升代码质量还需要使用一些静态代码工具检查代码质量，最为常用的是Sonar；在本地IDE中可以配置Sonarlint插件进行检查。@pdai</p></blockquote><h2 id="sonar是什么" tabindex="-1">Sonar是什么？ <a class="header-anchor" href="#sonar是什么" aria-label="Permalink to &quot;Sonar是什么？&quot;">​</a></h2><blockquote><p>Sonar是一个用于代码质量管理的开源平台，用于管理源代码的质量 通过插件形式，可以支持包括java,C#,C/C++,PL/SQL,Cobol,JavaScrip,Groovy等等二十几种编程语言的代码质量管理与检测</p></blockquote><p>Sonar可以从以下七个维度检测代码质量，而作为开发人员至少需要处理前5种代码质量问题</p><ul><li><p><strong>不遵循代码标准</strong> sonar可以通过PMD,CheckStyle,Findbugs等等代码规则检测工具规范代码编写</p></li><li><p><strong>潜在的缺陷</strong> sonar可以通过PMD,CheckStyle,Findbugs等等代码规则检测工具检测出潜在的缺陷</p></li><li><p><strong>糟糕的复杂度分布</strong> 文件、类、方法等，如果复杂度过高将难以改变，这会使得开发人员难以理解它们 且如果没有自动化的单元测试，对于程序中的任何组件的改变都将可能导致需要全面的回归测试</p></li><li><p><strong>重复</strong> 显然程序中包含大量复制粘贴的代码是质量低下的，sonar可以展示源码中重复严重的地方</p></li><li><p><strong>注释不足或者过多</strong> 没有注释将使代码可读性变差，特别是当不可避免地出现人员变动时，程序的可读性将大幅下降 而过多的注释又会使得开发人员将精力过多地花费在阅读注释上，亦违背初衷</p></li><li><p><strong>缺乏单元测试</strong> sonar可以很方便地统计并展示单元测试覆盖率</p></li><li><p><strong>糟糕的设计</strong> 通过sonar可以找出循环，展示包与包、类与类之间相互依赖关系，可以检测自定义的架构规则 通过sonar可以管理第三方的jar包，可以利用LCOM4检测单个任务规则的应用情况， 检测耦合。</p></li></ul><p>官方网站： <a href="https://www.sonarsource.com/products/sonarlint/" target="_blank" rel="noreferrer">https://www.sonarsource.com/products/sonarlint/</a></p><h2 id="sonarlint的使用" tabindex="-1">Sonarlint的使用 <a class="header-anchor" href="#sonarlint的使用" aria-label="Permalink to &quot;Sonarlint的使用&quot;">​</a></h2><blockquote><p>我以IDEA环境下做Demo和测试。</p></blockquote><ul><li><strong>安装插件</strong></li></ul><p><img src="'+t+'" alt="error.图片加载失败"></p><ul><li><strong>配置插件</strong></li></ul><p><img src="'+p+'" alt="error.图片加载失败"></p><p>除此此外还可以配置链接到Sonarqube服务器（当远程SonarQube有更新,可以点击下面的按钮Update Binding进行更新；<strong>这样可以保障团队成员使用的和最后CI环境是一套规则， 这是特别有用的，因为我们可能在服务器上禁用掉一些特例规则，然后我们可以通过这种方式同步给所有开发成员</strong>）</p><p><img src="'+o+`" alt="error.图片加载失败"></p><ul><li><strong>扫描代码</strong></li></ul><p>写一个小Demo</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/**</span></span>
<span class="line"><span> * This class is for sonarlint util test.</span></span>
<span class="line"><span> *</span></span>
<span class="line"><span> * @author pdai</span></span>
<span class="line"><span> * @version 2021/1/29 下午8:25</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>public class TestUtil {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * sum.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param a a</span></span>
<span class="line"><span>     * @param b b</span></span>
<span class="line"><span>     * @return sum</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    public static int add(int a, int b) {</span></span>
<span class="line"><span>        int c = a + b;</span></span>
<span class="line"><span>        return c;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre></div><p>检查</p><p><img src="`+i+'" alt="error.图片加载失败"></p><p><strong>SonarLint插件在IntelliJ IDEA 中页面显示的名词解释</strong>：</p><ul><li><code>Current file</code>：当前文件（展示当前文件存在的哪些问题，以及解决方法）</li><li><code>Rule</code>：规则（告诉你问题的具体内容，并在最后告诉你如何解决这个问题）</li><li><code>Report</code>：报告（鼠标移动到项目根目录，右键选择Ayalyze，选择Ayalyze with SonarLint，完成之后的结果显示，包含整个项目的所有文件的问题）</li><li><code>Locations</code>：位置（告诉你，在哪个地方有问题，问题的重复位置）</li><li><code>Issues</code>：问题 <ul><li>每个issue有<strong>五种等级</strong><ul><li><code>BLOCKER</code>（致命）:会影响应用程序的缺陷：内存泄漏，未关闭的JDBC连接…必须立刻修复的代码；</li><li><code>CRITICAL</code>（关键 ）：可能会影响应用程序的缺陷或者是安全性缺陷：空的catch块，sql注入，…必须立刻查看代码；</li><li><code>MAJOR</code>（主要）：可能会影响开发者效率的质量缺陷：未覆盖的代码，重复块，未使用的参数….</li><li><code>MINOR</code>（微小）：可能会影响开发者效率的质量缺陷：每行不能太长，“switch”语句应该至少有三个条件，….</li><li><code>INFO</code>（未知）：既不是缺陷也不是质量问题，只是一个发现。</li></ul></li><li>每个issue有<strong>三个状态</strong><ul><li><code>Bug</code>：窃听器（可靠性），避免错误和未定义的行为</li><li><code>Vulnerability</code>：漏洞（安全），避免破坏或攻击</li><li><code>Code Smell</code>：代码嗅觉（可维护性），简化代码更新，并提高开发人员的速度</li></ul></li></ul></li></ul><p>根据检查提示，修复后</p><p><img src="'+r+'" alt="error.图片加载失败"></p><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>',25)]))}const S=s(c,[["render",d]]);export{_ as __pageData,S as default};
