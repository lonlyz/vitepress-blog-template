import{_ as n,c as a,ai as p,o as e}from"./chunks/framework.BrYByd3F.js";const l="/vitepress-blog-template/images/develop/ut/dev-ut-springboot-1.png",i="/vitepress-blog-template/images/develop/ut/dev-ut-springboot-2.png",h=JSON.parse('{"title":"单元测试 - SpringBoot2+H2+Mockito实战","description":"","frontmatter":{},"headers":[],"relativePath":"develop/ut/dev-ut-springboot2.md","filePath":"develop/ut/dev-ut-springboot2.md","lastUpdated":1737706346000}'),t={name:"develop/ut/dev-ut-springboot2.md"};function c(o,s,r,u,g,d){return e(),a("div",null,s[0]||(s[0]=[p(`<h1 id="单元测试-springboot2-h2-mockito实战" tabindex="-1">单元测试 - SpringBoot2+H2+Mockito实战 <a class="header-anchor" href="#单元测试-springboot2-h2-mockito实战" aria-label="Permalink to &quot;单元测试 - SpringBoot2+H2+Mockito实战&quot;">​</a></h1><blockquote><p>在真实的开发中，我们通常是使用SpringBoot的，目前SpringBoot是v2.4.x的版本（SpringBoot 2.2.2.RELEASE之前默认是使用 JUnit4，之后版本默认使用Junit5）；所以我们写个基于SpringBoot2.4+H2的内存库的简单例子，同时加点必要的单元测试。@pdai</p></blockquote><h2 id="为何h2会被用来做单元测试" tabindex="-1">为何H2会被用来做单元测试 <a class="header-anchor" href="#为何h2会被用来做单元测试" aria-label="Permalink to &quot;为何H2会被用来做单元测试&quot;">​</a></h2><p>一个 Junit单元测试的流程包括</p><ul><li>初始化数据</li><li>执行测试</li><li>销毁数据</li></ul><p>在真实的测试代码开发中，有几类问题会造成困扰：</p><ul><li>数据库环境的搭建</li><li>搭建一套完整的数据库往往比较耗时，然而一旦将数据库配置加入测试范围，就必须长期维护其稳定性；</li><li>这同时也会带来代码库同步的困扰。</li><li>保证数据库的&quot;干净&quot;</li></ul><p>大多数情况下，每个测试用例在启动前(初始化数据)都期望数据库是&quot;干净&quot;的状态；然而使用真实的数据库却很难保证这点，原因是：</p><ul><li>多个应用可能会共享一个物理数据库；</li><li>测试用例在销毁数据时很难保证完全清除，可能一次意外的调试也会产生垃圾数据；</li></ul><p><strong>H2内存数据库很好的解决了上述问题，本身作为嵌入式数据库并不需要额外的看护成本；在程序退出时，所有数据都能保证完全清除</strong>。</p><h2 id="springboot对单测试的差异" tabindex="-1">SpringBoot对单测试的差异 <a class="header-anchor" href="#springboot对单测试的差异" aria-label="Permalink to &quot;SpringBoot对单测试的差异&quot;">​</a></h2><blockquote><p>SpringBoot 2.2.2.RELEASE之前默认是使用 JUnit4，之后版本默认使用Junit5。</p></blockquote><p>Springboot+junit4:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@RunWith(SpringRunner.class)</span></span>
<span class="line"><span>@SpringBootTest</span></span>
<span class="line"><span>public class SpringBootQuickStartApplicationTests {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    private MockMvc mvc;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Before</span></span>
<span class="line"><span>    public void setUp() throws Exception {</span></span>
<span class="line"><span>        mvc = MockMvcBuilders.standaloneSetup(new UserController()).build();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Test</span></span>
<span class="line"><span>    public void contextLoads() throws Exception {</span></span>
<span class="line"><span>        RequestBuilder request = null;</span></span>
<span class="line"><span>       </span></span>
<span class="line"><span>        request = MockMvcRequestBuilders.get(&quot;/&quot;)</span></span>
<span class="line"><span>                .contentType(MediaType.APPLICATION_JSON);</span></span>
<span class="line"><span>        mvc.perform(request)</span></span>
<span class="line"><span>                .andExpect(MockMvcResultMatchers.status().isOk())</span></span>
<span class="line"><span>                .andDo(MockMvcResultHandlers.print())</span></span>
<span class="line"><span>                .andReturn();</span></span>
<span class="line"><span>   }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>Springboot+junit5:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@SpringBootTest</span></span>
<span class="line"><span>// 使用spring的测试框架</span></span>
<span class="line"><span>@ExtendWith(SpringExtension.class)</span></span>
<span class="line"><span>class SpringbootQuickStartApplicationTests {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    private MockMvc mockMvc;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @BeforeEach // 类似于junit4的@Before</span></span>
<span class="line"><span>    public void setUp() throws Exception {</span></span>
<span class="line"><span>        mockMvc = MockMvcBuilders.standaloneSetup(new UserController()).build();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Test</span></span>
<span class="line"><span>    void contextLoads() throws Exception {</span></span>
<span class="line"><span>        RequestBuilder request = null;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        request = MockMvcRequestBuilders.get(&quot;/&quot;)</span></span>
<span class="line"><span>                .contentType(MediaType.APPLICATION_JSON);</span></span>
<span class="line"><span>        mockMvc.perform(request)</span></span>
<span class="line"><span>                .andExpect(MockMvcResultMatchers.status().isOk())</span></span>
<span class="line"><span>                .andDo(MockMvcResultHandlers.print())</span></span>
<span class="line"><span>                .andReturn();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="项目实践" tabindex="-1">项目实践 <a class="header-anchor" href="#项目实践" aria-label="Permalink to &quot;项目实践&quot;">​</a></h2><p>Spring Boot 2.4.2 + H2 + Lombok + Spring Boot Test (默认包含了 Junit5 + Mockito)。</p><p><img src="`+l+`" alt="error.图片加载失败"></p><h3 id="demo程序准备" tabindex="-1">Demo程序准备 <a class="header-anchor" href="#demo程序准备" aria-label="Permalink to &quot;Demo程序准备&quot;">​</a></h3><ul><li>pom.xml</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span>
<span class="line"><span>&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span>         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span></span>
<span class="line"><span>    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span></span>
<span class="line"><span>    &lt;parent&gt;</span></span>
<span class="line"><span>        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span>        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span></span>
<span class="line"><span>        &lt;version&gt;2.4.2&lt;/version&gt;</span></span>
<span class="line"><span>        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span></span>
<span class="line"><span>    &lt;/parent&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;tech.pdai&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;java-springboot-unit5&lt;/artifactId&gt;</span></span>
<span class="line"><span>    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span></span>
<span class="line"><span>    &lt;name&gt;java-springboot-unit5&lt;/name&gt;</span></span>
<span class="line"><span>    &lt;description&gt;java-springboot-unit5&lt;/description&gt;</span></span>
<span class="line"><span>    &lt;properties&gt;</span></span>
<span class="line"><span>        &lt;java.version&gt;1.8&lt;/java.version&gt;</span></span>
<span class="line"><span>    &lt;/properties&gt;</span></span>
<span class="line"><span>    &lt;dependencies&gt;</span></span>
<span class="line"><span>        &lt;dependency&gt;</span></span>
<span class="line"><span>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span>            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</span></span>
<span class="line"><span>        &lt;/dependency&gt;</span></span>
<span class="line"><span>        &lt;dependency&gt;</span></span>
<span class="line"><span>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span>            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span></span>
<span class="line"><span>        &lt;/dependency&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        &lt;dependency&gt;</span></span>
<span class="line"><span>            &lt;groupId&gt;com.h2database&lt;/groupId&gt;</span></span>
<span class="line"><span>            &lt;artifactId&gt;h2&lt;/artifactId&gt;</span></span>
<span class="line"><span>            &lt;scope&gt;runtime&lt;/scope&gt;</span></span>
<span class="line"><span>        &lt;/dependency&gt;</span></span>
<span class="line"><span>        &lt;dependency&gt;</span></span>
<span class="line"><span>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span>            &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</span></span>
<span class="line"><span>            &lt;optional&gt;true&lt;/optional&gt;</span></span>
<span class="line"><span>        &lt;/dependency&gt;</span></span>
<span class="line"><span>        &lt;dependency&gt;</span></span>
<span class="line"><span>            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span></span>
<span class="line"><span>            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span></span>
<span class="line"><span>            &lt;optional&gt;true&lt;/optional&gt;</span></span>
<span class="line"><span>        &lt;/dependency&gt;</span></span>
<span class="line"><span>        &lt;dependency&gt;</span></span>
<span class="line"><span>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span>            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span></span>
<span class="line"><span>            &lt;scope&gt;test&lt;/scope&gt;</span></span>
<span class="line"><span>        &lt;/dependency&gt;</span></span>
<span class="line"><span>    &lt;/dependencies&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    &lt;build&gt;</span></span>
<span class="line"><span>        &lt;plugins&gt;</span></span>
<span class="line"><span>            &lt;plugin&gt;</span></span>
<span class="line"><span>                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span>                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span></span>
<span class="line"><span>                &lt;configuration&gt;</span></span>
<span class="line"><span>                    &lt;excludes&gt;</span></span>
<span class="line"><span>                        &lt;exclude&gt;</span></span>
<span class="line"><span>                            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span></span>
<span class="line"><span>                            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span></span>
<span class="line"><span>                        &lt;/exclude&gt;</span></span>
<span class="line"><span>                    &lt;/excludes&gt;</span></span>
<span class="line"><span>                &lt;/configuration&gt;</span></span>
<span class="line"><span>            &lt;/plugin&gt;</span></span>
<span class="line"><span>        &lt;/plugins&gt;</span></span>
<span class="line"><span>    &lt;/build&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;/project&gt;</span></span></code></pre></div><ul><li>application.yml</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>spring:</span></span>
<span class="line"><span>  datasource:</span></span>
<span class="line"><span>    platform: h2</span></span>
<span class="line"><span>    driverClassName: org.h2.Driver</span></span>
<span class="line"><span>    url: jdbc:h2:mem:testdb;MODE=MYSQL;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false</span></span>
<span class="line"><span>    username: pdai</span></span>
<span class="line"><span>    password: pdai</span></span>
<span class="line"><span>    schema: classpath:db/schema/user-schema.sql</span></span>
<span class="line"><span>    data: classpath:db/data/user-data.sql</span></span>
<span class="line"><span>    initialization-mode: always</span></span>
<span class="line"><span>  h2:</span></span>
<span class="line"><span>    console:</span></span>
<span class="line"><span>      settings:</span></span>
<span class="line"><span>        trace: true</span></span>
<span class="line"><span>        web-allow-others: true</span></span>
<span class="line"><span>      enabled: true</span></span>
<span class="line"><span>      path: /h2-console</span></span>
<span class="line"><span>  jpa:</span></span>
<span class="line"><span>    show-sql: true</span></span>
<span class="line"><span>    hibernate:</span></span>
<span class="line"><span>      ddl-auto: update</span></span>
<span class="line"><span>    generate-ddl: false</span></span>
<span class="line"><span>    open-in-view: false</span></span></code></pre></div><ul><li>数据库文件准备</li></ul><p>schema</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DROP TABLE IF EXISTS user;</span></span>
<span class="line"><span>CREATE TABLE user (</span></span>
<span class="line"><span>    id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,</span></span>
<span class="line"><span>    name varchar(35),</span></span>
<span class="line"><span>    phone varchar(35)</span></span>
<span class="line"><span>);</span></span></code></pre></div><p>data</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>insert into user(id,name,phone) values(1,&#39;pdai&#39;,&#39;123456&#39;);</span></span>
<span class="line"><span>insert into user(id,name,phone) values(2,&#39;zhangsan&#39;,&#39;123456&#39;);</span></span></code></pre></div><ul><li>entity</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>package tech.pdai.springboot2unit5.entity;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import lombok.AllArgsConstructor;</span></span>
<span class="line"><span>import lombok.Getter;</span></span>
<span class="line"><span>import lombok.NoArgsConstructor;</span></span>
<span class="line"><span>import lombok.Setter;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import javax.persistence.*;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * User.</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>@Entity</span></span>
<span class="line"><span>@Getter</span></span>
<span class="line"><span>@Setter</span></span>
<span class="line"><span>@NoArgsConstructor</span></span>
<span class="line"><span>@AllArgsConstructor</span></span>
<span class="line"><span>@Table(name = &quot;user&quot;)</span></span>
<span class="line"><span>public class User {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Id</span></span>
<span class="line"><span>    @GeneratedValue(strategy = GenerationType.IDENTITY)</span></span>
<span class="line"><span>    private Integer id;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Column</span></span>
<span class="line"><span>    private String name;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Column</span></span>
<span class="line"><span>    private String phone;</span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li>dao</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>package tech.pdai.springboot2unit5.dao;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import org.springframework.data.jpa.repository.JpaRepository;</span></span>
<span class="line"><span>import org.springframework.stereotype.Repository;</span></span>
<span class="line"><span>import tech.pdai.springboot2unit5.entity.User;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * user dao.</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>@Repository</span></span>
<span class="line"><span>public interface UserRepository extends JpaRepository&lt;User, Integer&gt; {</span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li>service</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>package tech.pdai.springboot2unit5.service;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import tech.pdai.springboot2unit5.entity.User;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import java.util.List;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * user service.</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>public interface IUserService {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * find all user.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @return list</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    List&lt;User&gt; findAll();</span></span>
<span class="line"><span>}</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>package tech.pdai.springboot2unit5.service.impl;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import org.springframework.stereotype.Service;</span></span>
<span class="line"><span>import tech.pdai.springboot2unit5.dao.UserRepository;</span></span>
<span class="line"><span>import tech.pdai.springboot2unit5.entity.User;</span></span>
<span class="line"><span>import tech.pdai.springboot2unit5.service.IUserService;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import java.util.List;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * User service impl.</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>@Service</span></span>
<span class="line"><span>public class UserServiceImpl implements IUserService {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * user dao.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private final UserRepository userRepository;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * init.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param userRepository2 user dao</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    public UserServiceImpl(final UserRepository userRepository2) {</span></span>
<span class="line"><span>        this.userRepository = userRepository2;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * find all user.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @return list</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public List&lt;User&gt; findAll() {</span></span>
<span class="line"><span>        return userRepository.findAll();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li>Controller</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>package tech.pdai.springboot2unit5.controller;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import org.springframework.http.ResponseEntity;</span></span>
<span class="line"><span>import org.springframework.web.bind.annotation.GetMapping;</span></span>
<span class="line"><span>import org.springframework.web.bind.annotation.RestController;</span></span>
<span class="line"><span>import tech.pdai.springboot2unit5.entity.User;</span></span>
<span class="line"><span>import tech.pdai.springboot2unit5.service.IUserService;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import java.util.List;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * User controller.</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>@RestController</span></span>
<span class="line"><span>public class UserController {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * user service.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private final IUserService userService;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * init.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param userService2 user service</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    public UserController(final IUserService userService2) {</span></span>
<span class="line"><span>        this.userService = userService2;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * find user list.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @return list</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @GetMapping(&quot;user/list&quot;)</span></span>
<span class="line"><span>    public ResponseEntity&lt;List&lt;User&gt;&gt; list() {</span></span>
<span class="line"><span>        return ResponseEntity.ok(userService.findAll());</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="测试类" tabindex="-1">测试类 <a class="header-anchor" href="#测试类" aria-label="Permalink to &quot;测试类&quot;">​</a></h3><blockquote><p>在实际的项目中可以使用profile来区分测试ut，使用test profile(包含H2内存库)，真实环境使用MySQL或其它。</p></blockquote><ul><li>main</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>package tech.pdai.springboot2unit5;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import org.junit.jupiter.api.DisplayName;</span></span>
<span class="line"><span>import org.junit.jupiter.api.Test;</span></span>
<span class="line"><span>import org.junit.jupiter.api.extension.ExtendWith;</span></span>
<span class="line"><span>import org.springframework.beans.factory.annotation.Autowired;</span></span>
<span class="line"><span>import org.springframework.boot.test.context.SpringBootTest;</span></span>
<span class="line"><span>import org.springframework.context.annotation.Profile;</span></span>
<span class="line"><span>import org.springframework.test.context.junit.jupiter.SpringExtension;</span></span>
<span class="line"><span>import tech.pdai.springboot2unit5.service.IUserService;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import static org.junit.jupiter.api.Assertions.assertEquals;</span></span>
<span class="line"><span>import static org.junit.jupiter.api.Assertions.assertFalse;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * A way to test from H2.</span></span>
<span class="line"><span> * &lt;p&gt;</span></span>
<span class="line"><span> * Just a demo, and change profile to &#39;test&#39; for H2, and &#39;product&#39; for MySQL.</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>@Profile(&quot;default&quot;)</span></span>
<span class="line"><span>@ExtendWith(SpringExtension.class)</span></span>
<span class="line"><span>@SpringBootTest</span></span>
<span class="line"><span>class JavaSpringbootUnit5ApplicationTests {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Autowired</span></span>
<span class="line"><span>    IUserService userService;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Test</span></span>
<span class="line"><span>    @DisplayName(&quot;Integration test&quot;)</span></span>
<span class="line"><span>    void contextLoads() {</span></span>
<span class="line"><span>        assertFalse(userService.findAll().isEmpty());</span></span>
<span class="line"><span>        assertEquals(&quot;pdai&quot;, userService.findAll().get(0).getName());</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li>controller</li></ul><p>mockMvc</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>package tech.pdai.springboot2unit5.controller;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import org.junit.jupiter.api.DisplayName;</span></span>
<span class="line"><span>import org.junit.jupiter.api.Test;</span></span>
<span class="line"><span>import org.junit.jupiter.api.extension.ExtendWith;</span></span>
<span class="line"><span>import org.mockito.Mockito;</span></span>
<span class="line"><span>import org.springframework.beans.factory.annotation.Autowired;</span></span>
<span class="line"><span>import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;</span></span>
<span class="line"><span>import org.springframework.boot.test.mock.mockito.MockBean;</span></span>
<span class="line"><span>import org.springframework.http.MediaType;</span></span>
<span class="line"><span>import org.springframework.test.context.junit.jupiter.SpringExtension;</span></span>
<span class="line"><span>import org.springframework.test.web.servlet.MockMvc;</span></span>
<span class="line"><span>import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;</span></span>
<span class="line"><span>import tech.pdai.springboot2unit5.entity.User;</span></span>
<span class="line"><span>import tech.pdai.springboot2unit5.service.IUserService;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import java.util.Collections;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import static org.mockito.Mockito.times;</span></span>
<span class="line"><span>import static org.mockito.Mockito.verify;</span></span>
<span class="line"><span>import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * user controller test - use mockito.</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>@ExtendWith(SpringExtension.class)</span></span>
<span class="line"><span>@WebMvcTest(value = UserController.class)</span></span>
<span class="line"><span>class UserControllerTest {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Autowired</span></span>
<span class="line"><span>    private MockMvc mockMvc;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @MockBean</span></span>
<span class="line"><span>    private IUserService userService;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * test find all user.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @throws Exception exception</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @Test</span></span>
<span class="line"><span>    @DisplayName(&quot;Test findAll()&quot;)</span></span>
<span class="line"><span>    public void list() throws Exception {</span></span>
<span class="line"><span>        Mockito.when(userService.findAll()).thenReturn(</span></span>
<span class="line"><span>                Collections.singletonList(new User(1, &quot;pdai.tech&quot;, &quot;1221111&quot;)));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        mockMvc.perform(MockMvcRequestBuilders.get(&quot;/user/list&quot;)</span></span>
<span class="line"><span>                .accept(MediaType.APPLICATION_JSON))</span></span>
<span class="line"><span>                .andExpect(status().isOk());</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        verify(userService, times(1)).findAll();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li>service</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>package tech.pdai.springboot2unit5.service.impl;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import org.junit.jupiter.api.Test;</span></span>
<span class="line"><span>import org.junit.jupiter.api.extension.ExtendWith;</span></span>
<span class="line"><span>import org.mockito.Mock;</span></span>
<span class="line"><span>import org.mockito.Mockito;</span></span>
<span class="line"><span>import org.springframework.test.context.junit.jupiter.SpringExtension;</span></span>
<span class="line"><span>import tech.pdai.springboot2unit5.entity.User;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import java.util.Collections;</span></span>
<span class="line"><span>import java.util.List;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import static org.junit.jupiter.api.Assertions.assertFalse;</span></span>
<span class="line"><span>import static org.mockito.Mockito.times;</span></span>
<span class="line"><span>import static org.mockito.Mockito.verify;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@ExtendWith(SpringExtension.class)</span></span>
<span class="line"><span>class UserServiceImplTest {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Mock</span></span>
<span class="line"><span>    private UserServiceImpl userService;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Test</span></span>
<span class="line"><span>    public void findAll() {</span></span>
<span class="line"><span>        //Given</span></span>
<span class="line"><span>        Mockito.when(userService.findAll()).thenReturn(</span></span>
<span class="line"><span>                Collections.singletonList(new User(1, &quot;pdai.tech&quot;, &quot;1221111&quot;)));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        //When</span></span>
<span class="line"><span>        List&lt;User&gt; userDtoList = userService.findAll();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        //Then</span></span>
<span class="line"><span>        assertFalse(userDtoList.isEmpty());</span></span>
<span class="line"><span>        verify(userService, times(1)).findAll();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li>测试结果</li></ul><p><img src="`+i+'" alt="error.图片加载失败"></p><h3 id="util测试" tabindex="-1">Util测试 <a class="header-anchor" href="#util测试" aria-label="Permalink to &quot;Util测试&quot;">​</a></h3><blockquote><p>如果包含静态util的测试还可以加PowerMokito.</p></blockquote><p>具体可以参考：<a href="https://pdai.tech/md/develop/ut/dev-ut-x-mockito.html#%E6%B5%8B%E8%AF%95%E7%BB%93%E5%90%88powermock%E6%94%AF%E6%8C%81%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95" target="_blank" rel="noreferrer">测试结合powermock支持静态方法</a></p><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>',53)]))}const v=n(t,[["render",c]]);export{h as __pageData,v as default};
