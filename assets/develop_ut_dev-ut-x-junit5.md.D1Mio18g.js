import{_ as n}from"./chunks/dev-ut-1.BVK_Gon9.js";import{_ as a,c as p,ai as e,o as t}from"./chunks/framework.BrYByd3F.js";const l="/vitepress-blog-template/images/develop/ut/dev-ut-2.png",i="/vitepress-blog-template/images/develop/ut/dev-ut-3.png",o="/vitepress-blog-template/images/develop/ut/dev-ut-4.png",r="/vitepress-blog-template/images/develop/ut/dev-ut-5.png",c="/vitepress-blog-template/images/develop/ut/dev-ut-6.png",u="/vitepress-blog-template/images/develop/ut/dev-ut-7.png",d="/vitepress-blog-template/images/develop/ut/dev-ut-8.png",g="/vitepress-blog-template/images/develop/ut/dev-ut-9.png",k=JSON.parse('{"title":"单元测试 - Junit5 详解","description":"","frontmatter":{},"headers":[],"relativePath":"develop/ut/dev-ut-x-junit5.md","filePath":"develop/ut/dev-ut-x-junit5.md","lastUpdated":1737706346000}'),m={name:"develop/ut/dev-ut-x-junit5.md"};function h(v,s,b,q,T,f){return t(),p("div",null,s[0]||(s[0]=[e('<h1 id="单元测试-junit5-详解" tabindex="-1">单元测试 - Junit5 详解 <a class="header-anchor" href="#单元测试-junit5-详解" aria-label="Permalink to &quot;单元测试 - Junit5 详解&quot;">​</a></h1><blockquote><p>JUnit 5是JUnit的下一代。目标是为JVM上的开发人员端测试创建一个最新的基础。这包括专注于Java 8及更高版本，以及启用许多不同风格的测试。@pdai</p></blockquote><h2 id="官方资料" tabindex="-1">官方资料 <a class="header-anchor" href="#官方资料" aria-label="Permalink to &quot;官方资料&quot;">​</a></h2><blockquote><p>最好的资料依然在Junit官方网站，以下我帮你总结下Junit相关的官方网址。@pdai</p></blockquote><ul><li>官网地址</li></ul><p><a href="https://junit.org/junit5/" target="_blank" rel="noreferrer">https://junit.org/junit5/</a></p><ul><li>官方入门文档</li></ul><p><a href="https://junit.org/junit5/docs/current/user-guide/#overview" target="_blank" rel="noreferrer">https://junit.org/junit5/docs/current/user-guide/#overview</a></p><ul><li>官方例子</li></ul><p><a href="https://github.com/junit-team/junit5-samples" target="_blank" rel="noreferrer">https://github.com/junit-team/junit5-samples</a></p><ul><li>官方github</li></ul><p><a href="https://github.com/junit-team" target="_blank" rel="noreferrer">https://github.com/junit-team</a></p><h2 id="junit5的架构" tabindex="-1">Junit5的架构 <a class="header-anchor" href="#junit5的架构" aria-label="Permalink to &quot;Junit5的架构&quot;">​</a></h2><p>与以前版本的JUnit不同，JUnit 5由三个不同子项目中的几个不同模块组成。</p><blockquote><p>JUnit 5 = JUnit Platform + JUnit Jupiter + JUnit Vintage</p></blockquote><ul><li><strong>JUnit Platform</strong>是基于JVM的运行测试的基础框架在，它定义了开发运行在这个测试框架上的TestEngine API。此外该平台提供了一个控制台启动器，可以从命令行启动平台，可以为Gradle和 Maven构建插件，同时提供基于JUnit 4的Runner。</li><li><strong>JUnit Jupiter</strong>是在JUnit 5中编写测试和扩展的新编程模型和扩展模型的组合.Jupiter子项目提供了一个TestEngine在平台上运行基于Jupiter的测试。</li><li><strong>JUnit Vintage</strong>提供了一个TestEngine在平台上运行基于JUnit 3和JUnit 4的测试。</li></ul><p>架构图如下:</p><p><img src="'+n+`" alt="error.图片加载失败"></p><h2 id="junit-jupiter-api-的使用" tabindex="-1">JUnit Jupiter API 的使用 <a class="header-anchor" href="#junit-jupiter-api-的使用" aria-label="Permalink to &quot;JUnit Jupiter API 的使用&quot;">​</a></h2><blockquote><p>JUnit Jupiter是在JUnit 5中编写测试和扩展的新编程模型和扩展模型的组合; 所以我们使用Jupiter来学习Junit5。</p></blockquote><h3 id="常用注解" tabindex="-1">常用注解 <a class="header-anchor" href="#常用注解" aria-label="Permalink to &quot;常用注解&quot;">​</a></h3><p><strong>@Test</strong> 表示方法是一种测试方法。 与JUnit 4的@Test注解不同，此注释不会声明任何属性。</p><p><strong>@ParameterizedTest</strong> 表示方法是参数化测试</p><p><strong>@RepeatedTest</strong> 表示方法是重复测试模板</p><p><strong>@TestFactory</strong> 表示方法是动态测试的测试工程</p><p><strong>@DisplayName</strong> 为测试类或者测试方法自定义一个名称</p><p><strong>@BeforeEach</strong> 表示方法在每个测试方法运行前都会运行 ，<strong>@AfterEach</strong> 表示方法在每个测试方法运行之后都会运行</p><p><strong>@BeforeAll</strong> 表示方法在所有测试方法之前运行 ，<strong>@AfterAll</strong> 表示方法在所有测试方法之后运行</p><p><strong>@Nested</strong> 表示带注解的类是嵌套的非静态测试类，<strong>@BeforeAll</strong>和 <strong>@AfterAll</strong>方法不能直接在@Nested测试类中使用，除非修改测试实例生命周期。</p><p><strong>@Tag</strong> 用于在类或方法级别声明用于过滤测试的标记</p><p><strong>@Disabled</strong> 用于禁用测试类或测试方法</p><p><strong>@ExtendWith</strong> 用于注册自定义扩展，该注解可以继承</p><p><strong>@FixMethodOrder(MethodSorters.NAME_ASCENDING)</strong>，控制测试类中方法执行的顺序，这种测试方式将按方法名称的进行排序，由于是按字符的字典顺序，所以以这种方式指定执行顺序会始终保持一致；不过这种方式需要对测试方法有一定的命名规则，如 测试方法均以testNNN开头（NNN表示测试方法序列号 001-999）</p><h2 id="编写单元测试" tabindex="-1">编写单元测试 <a class="header-anchor" href="#编写单元测试" aria-label="Permalink to &quot;编写单元测试&quot;">​</a></h2><blockquote><p>接下来，我们开始学习JUnit5单元测试实例:</p></blockquote><h3 id="maven包引入" tabindex="-1">Maven包引入 <a class="header-anchor" href="#maven包引入" aria-label="Permalink to &quot;Maven包引入&quot;">​</a></h3><p>最新的包引入，请参考这里:<a href="https://junit.org/junit5/docs/current/user-guide/#running-tests" target="_blank" rel="noreferrer">https://junit.org/junit5/docs/current/user-guide/#running-tests</a></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span>
<span class="line"><span>&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span>
<span class="line"><span>         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span>         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span></span>
<span class="line"><span>    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    &lt;groupId&gt;pdai.tech&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;java-junit5&lt;/artifactId&gt;</span></span>
<span class="line"><span>    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    &lt;dependencies&gt;</span></span>
<span class="line"><span>        &lt;!-- Only needed to run tests in a version of IntelliJ IDEA that bundles older versions --&gt;</span></span>
<span class="line"><span>        &lt;dependency&gt;</span></span>
<span class="line"><span>            &lt;groupId&gt;org.junit.platform&lt;/groupId&gt;</span></span>
<span class="line"><span>            &lt;artifactId&gt;junit-platform-launcher&lt;/artifactId&gt;</span></span>
<span class="line"><span>            &lt;version&gt;1.7.0&lt;/version&gt;</span></span>
<span class="line"><span>            &lt;scope&gt;test&lt;/scope&gt;</span></span>
<span class="line"><span>        &lt;/dependency&gt;</span></span>
<span class="line"><span>        &lt;dependency&gt;</span></span>
<span class="line"><span>            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;</span></span>
<span class="line"><span>            &lt;artifactId&gt;junit-jupiter-engine&lt;/artifactId&gt;</span></span>
<span class="line"><span>            &lt;version&gt;5.7.0&lt;/version&gt;</span></span>
<span class="line"><span>            &lt;scope&gt;test&lt;/scope&gt;</span></span>
<span class="line"><span>        &lt;/dependency&gt;</span></span>
<span class="line"><span>        &lt;dependency&gt;</span></span>
<span class="line"><span>            &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;</span></span>
<span class="line"><span>            &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;</span></span>
<span class="line"><span>            &lt;version&gt;5.7.0&lt;/version&gt;</span></span>
<span class="line"><span>            &lt;scope&gt;test&lt;/scope&gt;</span></span>
<span class="line"><span>        &lt;/dependency&gt;</span></span>
<span class="line"><span>        &lt;dependency&gt;</span></span>
<span class="line"><span>            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;</span></span>
<span class="line"><span>            &lt;artifactId&gt;junit-jupiter-api&lt;/artifactId&gt;</span></span>
<span class="line"><span>            &lt;version&gt;5.7.0&lt;/version&gt;</span></span>
<span class="line"><span>        &lt;/dependency&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        &lt;!-- lombok --&gt;</span></span>
<span class="line"><span>        &lt;dependency&gt;</span></span>
<span class="line"><span>            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span></span>
<span class="line"><span>            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span></span>
<span class="line"><span>            &lt;version&gt;1.18.16&lt;/version&gt;</span></span>
<span class="line"><span>        &lt;/dependency&gt;</span></span>
<span class="line"><span>    &lt;/dependencies&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;/project&gt;</span></span></code></pre></div><h3 id="测试-hello-world" tabindex="-1">测试:Hello World <a class="header-anchor" href="#测试-hello-world" aria-label="Permalink to &quot;测试:Hello World&quot;">​</a></h3><p>第一个测试:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>package tech.pdai.junit5;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import org.junit.jupiter.api.Test;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import static org.junit.jupiter.api.Assertions.assertEquals;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * Hello world test.</span></span>
<span class="line"><span> *</span></span>
<span class="line"><span> * @author pdai</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>public class HelloWorldTest {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Test</span></span>
<span class="line"><span>    void firstTest() {</span></span>
<span class="line"><span>        assertEquals(2, 1 + 1);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>执行结果</p><p><img src="`+l+`" alt="error.图片加载失败"></p><p>@Test注解在方法上标记方法为测试方法，以便构建工具和 IDE 能够识别并执行它们。JUnit 5不再需要手动将测试类与测试方法为public，包可见的访问级别就足够了。</p><h3 id="测试-生命周期" tabindex="-1">测试:生命周期 <a class="header-anchor" href="#测试-生命周期" aria-label="Permalink to &quot;测试:生命周期&quot;">​</a></h3><p>首先，需要对比下Junit5和Junit4注解:</p><table tabindex="0"><thead><tr><th>Junit4</th><th>Junit5</th><th>注释</th></tr></thead><tbody><tr><td>@Test</td><td>@Test</td><td>表示该方法是一个测试方法</td></tr><tr><td>@BeforeClass</td><td><strong>@BeforeAll</strong></td><td>表示使用了该注解的方法应该在当前类中所有测试方法之前执行（只执行一次），并且它必须是 static方法（除非@TestInstance指定生命周期为Lifecycle.PER_CLASS）</td></tr><tr><td>@AfterClass</td><td><strong>@AfterAll</strong></td><td>表示使用了该注解的方法应该在当前类中所有测试方法之后执行（只执行一次），并且它必须是 static方法（除非@TestInstance指定生命周期为Lifecycle.PER_CLASS）</td></tr><tr><td>@Before</td><td><strong>@BeforeEach</strong></td><td>表示使用了该注解的方法应该在当前类中每一个测试方法之前执行</td></tr><tr><td>@After</td><td><strong>@AfterEach</strong></td><td>表示使用了该注解的方法应该在当前类中每一个测试方法之后执行</td></tr><tr><td>@Ignore</td><td>@Disabled</td><td>用于禁用（或者说忽略）一个测试类或测试方法</td></tr><tr><td>@Category</td><td>@Tag</td><td>用于声明过滤测试的tag标签，该注解可以用在方法或类上</td></tr></tbody></table><p>测试用例:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>package tech.pdai.junit5;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import static org.junit.jupiter.api.Assertions.fail;</span></span>
<span class="line"><span>import static org.junit.jupiter.api.Assumptions.assumeTrue;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import lombok.extern.slf4j.Slf4j;</span></span>
<span class="line"><span>import org.junit.jupiter.api.AfterAll;</span></span>
<span class="line"><span>import org.junit.jupiter.api.AfterEach;</span></span>
<span class="line"><span>import org.junit.jupiter.api.BeforeAll;</span></span>
<span class="line"><span>import org.junit.jupiter.api.BeforeEach;</span></span>
<span class="line"><span>import org.junit.jupiter.api.Disabled;</span></span>
<span class="line"><span>import org.junit.jupiter.api.Test;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * Standard Test.</span></span>
<span class="line"><span> *</span></span>
<span class="line"><span> * @author pdai</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>public class StandardTest {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @BeforeAll</span></span>
<span class="line"><span>    static void initAll() {</span></span>
<span class="line"><span>        System.out.println(&quot;BeforeAll&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @BeforeEach</span></span>
<span class="line"><span>    void init() {</span></span>
<span class="line"><span>        System.out.println(&quot;BeforeEach&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Test</span></span>
<span class="line"><span>    void succeedingTest() {</span></span>
<span class="line"><span>        System.out.println(&quot;succeedingTest&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Test</span></span>
<span class="line"><span>    void failingTest() {</span></span>
<span class="line"><span>        System.out.println(&quot;failingTest&quot;);</span></span>
<span class="line"><span>        fail(&quot;a failing test&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Test</span></span>
<span class="line"><span>    @Disabled(&quot;for demonstration purposes&quot;)</span></span>
<span class="line"><span>    void skippedTest() {</span></span>
<span class="line"><span>        // not executed</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Test</span></span>
<span class="line"><span>    void abortedTest() {</span></span>
<span class="line"><span>        System.out.println(&quot;abortedTest&quot;);</span></span>
<span class="line"><span>        assumeTrue(&quot;abc&quot;.contains(&quot;Z&quot;));</span></span>
<span class="line"><span>        fail(&quot;test should have been aborted&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @AfterEach</span></span>
<span class="line"><span>    void tearDown() {</span></span>
<span class="line"><span>        System.out.println(&quot;AfterEach&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @AfterAll</span></span>
<span class="line"><span>    static void tearDownAll() {</span></span>
<span class="line"><span>        System.out.println(&quot;AfterEach&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre></div><p>执行结果</p><p><img src="`+i+`" alt="error.图片加载失败"></p><p>观察正确和错误的结果:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>BeforeAll</span></span>
<span class="line"><span></span></span>
<span class="line"><span>BeforeEach</span></span>
<span class="line"><span>succeedingTest</span></span>
<span class="line"><span>AfterEach</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>BeforeEach</span></span>
<span class="line"><span>failingTest</span></span>
<span class="line"><span>AfterEach</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>org.opentest4j.AssertionFailedError: a failing test</span></span>
<span class="line"><span>  at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:39)</span></span>
<span class="line"><span>  // ...</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>BeforeEach</span></span>
<span class="line"><span>abortedTest</span></span>
<span class="line"><span>AfterEach</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>org.opentest4j.TestAbortedException: Assumption failed: assumption is not true</span></span>
<span class="line"><span>	at org.junit.jupiter.api.Assumptions.throwTestAbortedException(Assumptions.java:256)</span></span>
<span class="line"><span>  // ...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>AfterEach</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Process finished with exit code 255</span></span></code></pre></div><h3 id="测试-禁用测试" tabindex="-1">测试:禁用测试 <a class="header-anchor" href="#测试-禁用测试" aria-label="Permalink to &quot;测试:禁用测试&quot;">​</a></h3><p>这是一个禁用的测试案例：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import org.junit.jupiter.api.Disabled;</span></span>
<span class="line"><span>import org.junit.jupiter.api.Test;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@Disabled</span></span>
<span class="line"><span>class DisabledClassTest {</span></span>
<span class="line"><span>    @Test</span></span>
<span class="line"><span>    void testWillBeSkipped() {</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>这是一个带有禁用测试方法的测试案例：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import org.junit.jupiter.api.Disabled;</span></span>
<span class="line"><span>import org.junit.jupiter.api.Test;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>class DisabledTest {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Disabled</span></span>
<span class="line"><span>    @Test</span></span>
<span class="line"><span>    void testWillBeSkipped() {</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Test</span></span>
<span class="line"><span>    void testWillBeExecuted() {</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="测试-断言测试" tabindex="-1">测试:断言测试 <a class="header-anchor" href="#测试-断言测试" aria-label="Permalink to &quot;测试:断言测试&quot;">​</a></h3><blockquote><p>准备好测试实例、执行了被测类的方法以后，断言能确保你得到了想要的结果。一般的断言，无非是检查一个实例的属性（比如，判空与判非空等），或者对两个实例进行比较（比如，检查两个实例对象是否相等）等。无论哪种检查，断言方法都可以接受一个字符串作为最后一个可选参数，它会在断言失败时提供必要的描述信息。如果提供出错信息的过程比较复杂，它也可以被包装在一个 lambda 表达式中，这样，只有到真正失败的时候，消息才会真正被构造出来。</p></blockquote><ul><li><strong>常用断言 Assertions</strong><ul><li><code>assertEquals</code> 断言预期值和实际值相等</li><li><code>assertAll</code> 分组断言,执行其中包含的所有断言</li><li><code>assertArrayEquals</code> 断言预期数组和实际数组相等</li><li><code>assertFalse</code> 断言条件为假</li><li><code>assertNotNull</code> 断言不为空</li><li><code>assertSame</code> 断言两个对象相等</li><li><code>assertTimeout</code> 断言超时</li><li><code>fail</code> 使单元测试失败</li></ul></li></ul><p>定义一个Person实体类</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>package tech.pdai.junit5.entity;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import lombok.AllArgsConstructor;</span></span>
<span class="line"><span>import lombok.Data;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * Person.</span></span>
<span class="line"><span> *</span></span>
<span class="line"><span> * @author pdai</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>@Data</span></span>
<span class="line"><span>@AllArgsConstructor</span></span>
<span class="line"><span>public class Person {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    private String firstName;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    private String lastName;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>测试代码:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>package tech.pdai.junit5;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import org.junit.jupiter.api.Test;</span></span>
<span class="line"><span>import tech.pdai.junit5.entity.Person;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import static java.time.Duration.ofMillis;</span></span>
<span class="line"><span>import static java.time.Duration.ofMinutes;</span></span>
<span class="line"><span>import static org.junit.jupiter.api.Assertions.*;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * Assertions Test.</span></span>
<span class="line"><span> *</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>public class AssertionsTest {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    Person person = new Person(&quot;John&quot;, &quot;Doe&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Test</span></span>
<span class="line"><span>    void standardAssertions() {</span></span>
<span class="line"><span>        assertEquals(2, 2);</span></span>
<span class="line"><span>        assertEquals(4, 4, &quot;The optional assertion message is now the last parameter.&quot;);</span></span>
<span class="line"><span>        assertTrue(2 == 2, () -&gt; &quot;Assertion messages can be lazily evaluated -- &quot;</span></span>
<span class="line"><span>                + &quot;to avoid constructing complex messages unnecessarily.&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Test</span></span>
<span class="line"><span>    void groupedAssertions() {</span></span>
<span class="line"><span>        // In a grouped assertion all assertions are executed, and any</span></span>
<span class="line"><span>        // failures will be reported together.</span></span>
<span class="line"><span>        assertAll(&quot;person&quot;,</span></span>
<span class="line"><span>                () -&gt; assertEquals(&quot;John&quot;, person.getFirstName()),</span></span>
<span class="line"><span>                () -&gt; assertEquals(&quot;Doe&quot;, person.getLastName())</span></span>
<span class="line"><span>        );</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Test</span></span>
<span class="line"><span>    void dependentAssertions() {</span></span>
<span class="line"><span>        // Within a code block, if an assertion fails the</span></span>
<span class="line"><span>        // subsequent code in the same block will be skipped.</span></span>
<span class="line"><span>        assertAll(&quot;properties&quot;,</span></span>
<span class="line"><span>                () -&gt; {</span></span>
<span class="line"><span>                    String firstName = person.getFirstName();</span></span>
<span class="line"><span>                    assertNotNull(firstName);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>                    // Executed only if the previous assertion is valid.</span></span>
<span class="line"><span>                    assertAll(&quot;first name&quot;,</span></span>
<span class="line"><span>                            () -&gt; assertTrue(firstName.startsWith(&quot;J&quot;)),</span></span>
<span class="line"><span>                            () -&gt; assertTrue(firstName.endsWith(&quot;n&quot;))</span></span>
<span class="line"><span>                    );</span></span>
<span class="line"><span>                },</span></span>
<span class="line"><span>                () -&gt; {</span></span>
<span class="line"><span>                    // Grouped assertion, so processed independently</span></span>
<span class="line"><span>                    // of results of first name assertions.</span></span>
<span class="line"><span>                    String lastName = person.getLastName();</span></span>
<span class="line"><span>                    assertNotNull(lastName);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>                    // Executed only if the previous assertion is valid.</span></span>
<span class="line"><span>                    assertAll(&quot;last name&quot;,</span></span>
<span class="line"><span>                            () -&gt; assertTrue(lastName.startsWith(&quot;D&quot;)),</span></span>
<span class="line"><span>                            () -&gt; assertTrue(lastName.endsWith(&quot;e&quot;))</span></span>
<span class="line"><span>                    );</span></span>
<span class="line"><span>                }</span></span>
<span class="line"><span>        );</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Test</span></span>
<span class="line"><span>    void exceptionTesting() {</span></span>
<span class="line"><span>        Throwable exception = assertThrows(IllegalArgumentException.class, () -&gt; {</span></span>
<span class="line"><span>            throw new IllegalArgumentException(&quot;a message&quot;);</span></span>
<span class="line"><span>        });</span></span>
<span class="line"><span>        assertEquals(&quot;a message&quot;, exception.getMessage());</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Test</span></span>
<span class="line"><span>    void timeoutNotExceeded() {</span></span>
<span class="line"><span>        // The following assertion succeeds.</span></span>
<span class="line"><span>        assertTimeout(ofMinutes(2), () -&gt; {</span></span>
<span class="line"><span>            // Perform task that takes less than 2 minutes.</span></span>
<span class="line"><span>        });</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Test</span></span>
<span class="line"><span>    void timeoutNotExceededWithResult() {</span></span>
<span class="line"><span>        // The following assertion succeeds, and returns the supplied object.</span></span>
<span class="line"><span>        String actualResult = assertTimeout(ofMinutes(2), () -&gt; {</span></span>
<span class="line"><span>            return &quot;a result&quot;;</span></span>
<span class="line"><span>        });</span></span>
<span class="line"><span>        assertEquals(&quot;a result&quot;, actualResult);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Test</span></span>
<span class="line"><span>    void timeoutNotExceededWithMethod() {</span></span>
<span class="line"><span>        // The following assertion invokes a method reference and returns an object.</span></span>
<span class="line"><span>        String actualGreeting = assertTimeout(ofMinutes(2), AssertionsTest::greeting);</span></span>
<span class="line"><span>        assertEquals(&quot;hello world!&quot;, actualGreeting);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Test</span></span>
<span class="line"><span>    void timeoutExceeded() {</span></span>
<span class="line"><span>        // The following assertion fails with an error message similar to:</span></span>
<span class="line"><span>        // execution exceeded timeout of 10 ms by 91 ms</span></span>
<span class="line"><span>        assertTimeout(ofMillis(10), () -&gt; {</span></span>
<span class="line"><span>            // Simulate task that takes more than 10 ms.</span></span>
<span class="line"><span>            Thread.sleep(100);</span></span>
<span class="line"><span>        });</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Test</span></span>
<span class="line"><span>    void timeoutExceededWithPreemptiveTermination() {</span></span>
<span class="line"><span>        // The following assertion fails with an error message similar to:</span></span>
<span class="line"><span>        // execution timed out after 10 ms</span></span>
<span class="line"><span>        assertTimeoutPreemptively(ofMillis(10), () -&gt; {</span></span>
<span class="line"><span>            // Simulate task that takes more than 10 ms.</span></span>
<span class="line"><span>            Thread.sleep(100);</span></span>
<span class="line"><span>        });</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    private static String greeting() {</span></span>
<span class="line"><span>        return &quot;hello world!&quot;;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>这里注意下:<code>assertTimeoutPreemptively()</code> 和 <code>assertTimeout()</code> 的区别为: 两者都是断言超时，前者在指定时间没有完成任务就会立即返回断言失败；后者会在任务执行完毕之后才返回。</p><p>执行结果:</p><p><img src="`+o+`" alt="error.图片加载失败"></p><p>观察错误的结果:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>org.opentest4j.AssertionFailedError: execution timed out after 10 ms</span></span>
<span class="line"><span>	at org.junit.jupiter.api.AssertTimeout.assertTimeoutPreemptively(AssertTimeout.java:158)</span></span>
<span class="line"><span>	at org.junit.jupiter.api.AssertTimeout.assertTimeoutPreemptively(AssertTimeout.java:119)</span></span>
<span class="line"><span>	at org.junit.jupiter.api.AssertTimeout.assertTimeoutPreemptively(AssertTimeout.java:101)</span></span>
<span class="line"><span>	at org.junit.jupiter.api.AssertTimeout.assertTimeoutPreemptively(AssertTimeout.java:97)</span></span>
<span class="line"><span>	at org.junit.jupiter.api.Assertions.assertTimeoutPreemptively(Assertions.java:3323)</span></span>
<span class="line"><span>	at tech.pdai.junit5.AssertionsTest.timeoutExceededWithPreemptiveTermination(AssertionsTest.java:108)</span></span>
<span class="line"><span>  // ...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>org.opentest4j.AssertionFailedError: execution exceeded timeout of 10 ms by 92 ms</span></span>
<span class="line"><span>	at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:39)</span></span>
<span class="line"><span>	at org.junit.jupiter.api.Assertions.fail(Assertions.java:117)</span></span>
<span class="line"><span>	at org.junit.jupiter.api.AssertTimeout.assertTimeout(AssertTimeout.java:90)</span></span>
<span class="line"><span>	at org.junit.jupiter.api.AssertTimeout.assertTimeout(AssertTimeout.java:70)</span></span>
<span class="line"><span>	at org.junit.jupiter.api.AssertTimeout.assertTimeout(AssertTimeout.java:52)</span></span>
<span class="line"><span>	at org.junit.jupiter.api.AssertTimeout.assertTimeout(AssertTimeout.java:48)</span></span>
<span class="line"><span>	at org.junit.jupiter.api.Assertions.assertTimeout(Assertions.java:3186)</span></span>
<span class="line"><span>	at tech.pdai.junit5.AssertionsTest.timeoutExceeded(AssertionsTest.java:98)</span></span>
<span class="line"><span>  // ...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Process finished with exit code 255</span></span></code></pre></div><h3 id="测试-异常测试" tabindex="-1">测试:异常测试 <a class="header-anchor" href="#测试-异常测试" aria-label="Permalink to &quot;测试:异常测试&quot;">​</a></h3><p>我们代码中对于带有异常的方法通常都是使用 try-catch 方式捕获处理，针对测试这样带有异常抛出的代码，而 JUnit 5 提供方法 <code>Assertions#assertThrows(Class&lt;T&gt;, Executable)</code> 来进行测试，第一个参数为异常类型，第二个为函数式接口参数，跟 Runnable 接口相似，不需要参数，也没有返回，并且支持 Lambda表达式方式使用，具体使用方式可参考下方代码:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>package tech.pdai.junit5;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import org.junit.jupiter.api.DisplayName;</span></span>
<span class="line"><span>import org.junit.jupiter.api.Test;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import static org.junit.jupiter.api.Assertions.assertThrows;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * Exception Test.</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>public class ExceptionTest {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 标准的测试例子</span></span>
<span class="line"><span>    @Test</span></span>
<span class="line"><span>    @DisplayName(&quot;Exception Test Demo&quot;)</span></span>
<span class="line"><span>    void assertThrowsException() {</span></span>
<span class="line"><span>        String str = null;</span></span>
<span class="line"><span>        assertThrows(IllegalArgumentException.class, () -&gt; {</span></span>
<span class="line"><span>            Integer.valueOf(str);</span></span>
<span class="line"><span>        });</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 注:异常失败例子，当Lambda表达式中代码出现的异常会跟首个参数的异常类型进行比较，如果不属于同一类异常，则失败</span></span>
<span class="line"><span>    @Test</span></span>
<span class="line"><span>    @DisplayName(&quot;Exception Test Demo2&quot;)</span></span>
<span class="line"><span>    void assertThrowsException2() {</span></span>
<span class="line"><span>        String str = null;</span></span>
<span class="line"><span>        assertThrows(NullPointerException.class, () -&gt; {</span></span>
<span class="line"><span>            Integer.valueOf(str);</span></span>
<span class="line"><span>        });</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>执行结果:</p><p><img src="`+r+`" alt="error.图片加载失败"></p><p>观察错误的结果:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>org.opentest4j.AssertionFailedError: Unexpected exception type thrown ==&gt; expected: &lt;java.lang.NullPointerException&gt; but was: &lt;java.lang.NumberFormatException&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	at org.junit.jupiter.api.AssertThrows.assertThrows(AssertThrows.java:65)</span></span>
<span class="line"><span>	at org.junit.jupiter.api.AssertThrows.assertThrows(AssertThrows.java:37)</span></span>
<span class="line"><span>	at org.junit.jupiter.api.Assertions.assertThrows(Assertions.java:3007)</span></span>
<span class="line"><span>	at tech.pdai.junit5.ExceptionTest.assertThrowsException2(ExceptionTest.java:26)</span></span>
<span class="line"><span>  // ...</span></span>
<span class="line"><span>Caused by: java.lang.NumberFormatException: null</span></span>
<span class="line"><span>	at java.lang.Integer.parseInt(Integer.java:542)</span></span>
<span class="line"><span>	at java.lang.Integer.valueOf(Integer.java:766)</span></span>
<span class="line"><span>	at tech.pdai.junit5.ExceptionTest.lambda$assertThrowsException2$1(ExceptionTest.java:27)</span></span>
<span class="line"><span>	at org.junit.jupiter.api.AssertThrows.assertThrows(AssertThrows.java:55)</span></span>
<span class="line"><span>	... 68 more</span></span></code></pre></div><h3 id="测试-嵌套测试" tabindex="-1">测试:嵌套测试 <a class="header-anchor" href="#测试-嵌套测试" aria-label="Permalink to &quot;测试:嵌套测试&quot;">​</a></h3><p>嵌套测试给测试编写者更多的能力，来表达几组测试之间的关系。这里有一个详细的例子。</p><p>用于测试stack的嵌套测试套件:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>package tech.pdai.junit5;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import org.junit.jupiter.api.BeforeEach;</span></span>
<span class="line"><span>import org.junit.jupiter.api.DisplayName;</span></span>
<span class="line"><span>import org.junit.jupiter.api.Nested;</span></span>
<span class="line"><span>import org.junit.jupiter.api.Test;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import java.util.EmptyStackException;</span></span>
<span class="line"><span>import java.util.Stack;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import static org.junit.jupiter.api.Assertions.*;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * Stack test for Nest Demo.</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>@DisplayName(&quot;A stack&quot;)</span></span>
<span class="line"><span>public class NestedTest {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    Stack stack;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Test</span></span>
<span class="line"><span>    @DisplayName(&quot;is instantiated with new Stack()&quot;)</span></span>
<span class="line"><span>    void isInstantiatedWithNew() {</span></span>
<span class="line"><span>        new Stack&lt;&gt;();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Nested</span></span>
<span class="line"><span>    @DisplayName(&quot;when new&quot;)</span></span>
<span class="line"><span>    class WhenNew {</span></span>
<span class="line"><span>        @BeforeEach</span></span>
<span class="line"><span>        void createNewStack() {</span></span>
<span class="line"><span>            stack = new Stack&lt;&gt;();</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        @Test</span></span>
<span class="line"><span>        @DisplayName(&quot;is empty&quot;)</span></span>
<span class="line"><span>        void isEmpty() {</span></span>
<span class="line"><span>            assertTrue(stack.isEmpty());</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        @Test</span></span>
<span class="line"><span>        @DisplayName(&quot;throws EmptyStackException when popped&quot;)</span></span>
<span class="line"><span>        void throwsExceptionWhenPopped() {</span></span>
<span class="line"><span>            assertThrows(EmptyStackException.class, () -&gt; stack.pop());</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        @Test</span></span>
<span class="line"><span>        @DisplayName(&quot;throws EmptyStackException when peeked&quot;)</span></span>
<span class="line"><span>        void throwsExceptionWhenPeeked() {</span></span>
<span class="line"><span>            assertThrows(EmptyStackException.class, () -&gt; stack.peek());</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        @Nested</span></span>
<span class="line"><span>        @DisplayName(&quot;after pushing an element&quot;)</span></span>
<span class="line"><span>        class AfterPushing {</span></span>
<span class="line"><span>            String anElement = &quot;an element&quot;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>            @BeforeEach</span></span>
<span class="line"><span>            void pushAnElement() {</span></span>
<span class="line"><span>                stack.push(anElement);</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>            @Test</span></span>
<span class="line"><span>            @DisplayName(&quot;it is no longer empty&quot;)</span></span>
<span class="line"><span>            void isNotEmpty() {</span></span>
<span class="line"><span>                assertFalse(stack.isEmpty());</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>            @Test</span></span>
<span class="line"><span>            @DisplayName(&quot;returns the element when popped and is empty&quot;)</span></span>
<span class="line"><span>            void returnElementWhenPopped() {</span></span>
<span class="line"><span>                assertEquals(anElement, stack.pop());</span></span>
<span class="line"><span>                assertTrue(stack.isEmpty());</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>            @Test</span></span>
<span class="line"><span>            @DisplayName(&quot;returns the element when peeked but remains not empty&quot;)</span></span>
<span class="line"><span>            void returnElementWhenPeeked() {</span></span>
<span class="line"><span>                assertEquals(anElement, stack.peek());</span></span>
<span class="line"><span>                assertFalse(stack.isEmpty());</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>执行结果:</p><p><img src="`+c+`" alt="error.图片加载失败"></p><h3 id="测试-重复测试" tabindex="-1">测试:重复测试 <a class="header-anchor" href="#测试-重复测试" aria-label="Permalink to &quot;测试:重复测试&quot;">​</a></h3><p>JUnit Jupiter通过使用@RepeatedTest注解方法并指定所需的重复次数，提供了重复测试指定次数的功能。每次重复测试的调用都像执行常规的@Test方法一样，完全支持相同的生命周期回调和扩展。</p><p>以下示例演示了如何声明名为repeatedTest()的测试，该测试将自动重复10次。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@RepeatedTest(10)</span></span>
<span class="line"><span>void repeatedTest() {</span></span>
<span class="line"><span>    // ...</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>除了指定重复次数外，还可以通过@RepeatedTest注解的name属性为每次重复配置自定义显示名称。此外，显示名称可以是模式，由静态文本和动态占位符的组合而成。目前支持以下占位符:</p><ul><li>{displayName}: @RepeatedTest方法的显示名称</li><li>{currentRepetition}: 当前重复次数</li><li>{totalRepetitions}: 重复的总次数</li></ul><p>测试例子</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>package tech.pdai.junit5;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import org.junit.jupiter.api.*;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import static org.junit.jupiter.api.Assertions.assertEquals;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * Repeat Test.</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>public class RepeatTest {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @BeforeEach</span></span>
<span class="line"><span>    void beforeEach(TestInfo testInfo, RepetitionInfo repetitionInfo) {</span></span>
<span class="line"><span>        int currentRepetition = repetitionInfo.getCurrentRepetition();</span></span>
<span class="line"><span>        int totalRepetitions = repetitionInfo.getTotalRepetitions();</span></span>
<span class="line"><span>        String methodName = testInfo.getTestMethod().get().getName();</span></span>
<span class="line"><span>        System.out.println(String.format(&quot;About to execute repetition %d of %d for %s&quot;, //</span></span>
<span class="line"><span>                currentRepetition, totalRepetitions, methodName));</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @RepeatedTest(3)</span></span>
<span class="line"><span>    void repeatedTest() {</span></span>
<span class="line"><span>        // ...</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @RepeatedTest(2)</span></span>
<span class="line"><span>    void repeatedTestWithRepetitionInfo(RepetitionInfo repetitionInfo) {</span></span>
<span class="line"><span>        assertEquals(2, repetitionInfo.getTotalRepetitions());</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @RepeatedTest(value = 1, name = &quot;{displayName} {currentRepetition}/{totalRepetitions}&quot;)</span></span>
<span class="line"><span>    @DisplayName(&quot;Repeat!&quot;)</span></span>
<span class="line"><span>    void customDisplayName(TestInfo testInfo) {</span></span>
<span class="line"><span>        assertEquals(testInfo.getDisplayName(), &quot;Repeat! 1/1&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @RepeatedTest(value = 1, name = RepeatedTest.LONG_DISPLAY_NAME)</span></span>
<span class="line"><span>    @DisplayName(&quot;Details...&quot;)</span></span>
<span class="line"><span>    void customDisplayNameWithLongPattern(TestInfo testInfo) {</span></span>
<span class="line"><span>        assertEquals(testInfo.getDisplayName(), &quot;Details... :: repetition 1 of 1&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @RepeatedTest(value = 2, name = &quot;Wiederholung {currentRepetition} von {totalRepetitions}&quot;)</span></span>
<span class="line"><span>    void repeatedTestInGerman() {</span></span>
<span class="line"><span>        // ...</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>执行结果:</p><p><img src="`+u+`" alt="error.图片加载失败"></p><h3 id="测试-参数化测试" tabindex="-1">测试:参数化测试 <a class="header-anchor" href="#测试-参数化测试" aria-label="Permalink to &quot;测试:参数化测试&quot;">​</a></h3><p>JUnit Jupiter开箱即用，提供了不少source注解。下面的每个小节都为他们提供了简要的概述和示例。请参阅org.junit.jupiter.params.provider包中的JavaDoc以获取更多信息。</p><ul><li><strong>@ValueSource</strong></li></ul><p>@ValueSource是最简单的source之一。它可以让你指定一个原生类型（String，int，long或double）的数组，并且只能为每次调用提供一个参数。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@ParameterizedTest</span></span>
<span class="line"><span>@ValueSource(ints = { 1, 2, 3 })</span></span>
<span class="line"><span>void testWithValueSource(int argument) {</span></span>
<span class="line"><span>    assertNotNull(argument);</span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li><strong>@EnumSource</strong></li></ul><p>@EnumSource提供了一个使用Enum常量的简便方法。该注释提供了一个可选的name参数，可以指定使用哪些常量。如果省略，所有的常量将被用在下面的例子中。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@ParameterizedTest</span></span>
<span class="line"><span>@EnumSource(TimeUnit.class)</span></span>
<span class="line"><span>void testWithEnumSource(TimeUnit timeUnit) {</span></span>
<span class="line"><span>    assertNotNull(timeUnit);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>@ParameterizedTest</span></span>
<span class="line"><span>@EnumSource(value = TimeUnit.class, names = { &quot;DAYS&quot;, &quot;HOURS&quot; })</span></span>
<span class="line"><span>void testWithEnumSourceInclude(TimeUnit timeUnit) {</span></span>
<span class="line"><span>    assertTrue(EnumSet.of(TimeUnit.DAYS, TimeUnit.HOURS).contains(timeUnit));</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>@EnumSource注解还提供了一个可选的mode参数，可以对将哪些常量传递给测试方法进行细化控制。例如，您可以从枚举常量池中排除名称或指定正则表达式，如下例所示。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@ParameterizedTest</span></span>
<span class="line"><span>@EnumSource(value = TimeUnit.class, mode = EXCLUDE, names = { &quot;DAYS&quot;, &quot;HOURS&quot; })</span></span>
<span class="line"><span>void testWithEnumSourceExclude(TimeUnit timeUnit) {</span></span>
<span class="line"><span>    assertFalse(EnumSet.of(TimeUnit.DAYS, TimeUnit.HOURS).contains(timeUnit));</span></span>
<span class="line"><span>    assertTrue(timeUnit.name().length() &gt; 5);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>@ParameterizedTest</span></span>
<span class="line"><span>@EnumSource(value = TimeUnit.class, mode = MATCH_ALL, names = &quot;^(M|N).+SECONDS$&quot;)</span></span>
<span class="line"><span>void testWithEnumSourceRegex(TimeUnit timeUnit) {</span></span>
<span class="line"><span>    String name = timeUnit.name();</span></span>
<span class="line"><span>    assertTrue(name.startsWith(&quot;M&quot;) || name.startsWith(&quot;N&quot;));</span></span>
<span class="line"><span>    assertTrue(name.endsWith(&quot;SECONDS&quot;));</span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li><strong>@MethodSource</strong></li></ul><p>@MethodSource允许你引用一个或多个测试类的工厂方法。这样的方法必须返回一个Stream，Iterable，Iterator或者参数数组。另外，这种方法不能接受任何参数。默认情况下，除非测试类用@TestInstance(Lifecycle.PER_CLASS)注解，否则这些方法必须是静态的。</p><p>如果只需要一个参数，则可以返回参数类型的实例Stream，如以下示例所示。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@ParameterizedTest</span></span>
<span class="line"><span>@MethodSource(&quot;stringProvider&quot;)</span></span>
<span class="line"><span>void testWithSimpleMethodSource(String argument) {</span></span>
<span class="line"><span>    assertNotNull(argument);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>static Stream&lt;String&gt; stringProvider() {</span></span>
<span class="line"><span>    return Stream.of(&quot;foo&quot;, &quot;bar&quot;);</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>支持原始类型（DoubleStream，IntStream和LongStream）的流，示例如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@ParameterizedTest</span></span>
<span class="line"><span>@MethodSource(&quot;range&quot;)</span></span>
<span class="line"><span>void testWithRangeMethodSource(int argument) {</span></span>
<span class="line"><span>    assertNotEquals(9, argument);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>static IntStream range() {</span></span>
<span class="line"><span>    return IntStream.range(0, 20).skip(10);</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>如果测试方法声明多个参数，则需要返回一个集合或Arguments实例流，如下所示。请注意，Arguments.of(Object…)是Arguments接口中定义的静态工厂方法。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@ParameterizedTest</span></span>
<span class="line"><span>@MethodSource(&quot;stringIntAndListProvider&quot;)</span></span>
<span class="line"><span>void testWithMultiArgMethodSource(String str, int num, List&lt;String&gt; list) {</span></span>
<span class="line"><span>    assertEquals(3, str.length());</span></span>
<span class="line"><span>    assertTrue(num &gt;=1 &amp;&amp; num &lt;=2);</span></span>
<span class="line"><span>    assertEquals(2, list.size());</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>static Stream&lt;Arguments&gt; stringIntAndListProvider() {</span></span>
<span class="line"><span>    return Stream.of(</span></span>
<span class="line"><span>        Arguments.of(&quot;foo&quot;, 1, Arrays.asList(&quot;a&quot;, &quot;b&quot;)),</span></span>
<span class="line"><span>        Arguments.of(&quot;bar&quot;, 2, Arrays.asList(&quot;x&quot;, &quot;y&quot;))</span></span>
<span class="line"><span>    );</span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li><strong>@CsvSource</strong></li></ul><p>@CsvSource允许您将参数列表表示为以逗号分隔的值（例如，字符串文字）。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@ParameterizedTest</span></span>
<span class="line"><span>@CsvSource({ &quot;foo, 1&quot;, &quot;bar, 2&quot;, &quot;&#39;baz, qux&#39;, 3&quot; })</span></span>
<span class="line"><span>void testWithCsvSource(String first, int second) {</span></span>
<span class="line"><span>    assertNotNull(first);</span></span>
<span class="line"><span>    assertNotEquals(0, second);</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>@CsvSource使用&#39;作为转义字符。 请参阅上述示例和下表中的’baz, qux’值。 一个空的引用值&#39;&#39;会导致一个空的String; 而一个完全空的值被解释为一个null引用。如果null引用的目标类型是基本类型，则引发ArgumentConversionException。</p><table tabindex="0"><thead><tr><th>示例输入</th><th>结果字符列表</th></tr></thead><tbody><tr><td>@CsvSource({ “foo, bar” })</td><td>&quot;foo&quot;, &quot;bar&quot;</td></tr><tr><td>@CsvSource({ “foo, ‘baz, qux’” })</td><td>&quot;foo&quot;, &quot;baz, qux&quot;</td></tr><tr><td>@CsvSource({ “foo, ‘’” })</td><td>&quot;foo&quot;, &quot;&quot;</td></tr><tr><td>@CsvSource({ “foo, “ })</td><td>&quot;foo&quot;, null</td></tr></tbody></table><ul><li><strong>@CsvFileSource</strong></li></ul><p>@CsvFileSource让你使用classpath中的CSV文件。CSV文件中的每一行都会导致参数化测试的一次调用。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@ParameterizedTest</span></span>
<span class="line"><span>@CsvFileSource(resources = &quot;/two-column.csv&quot;)</span></span>
<span class="line"><span>void testWithCsvFileSource(String first, int second) {</span></span>
<span class="line"><span>    assertNotNull(first);</span></span>
<span class="line"><span>    assertNotEquals(0, second);</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>two-column.csv</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>foo, 1</span></span>
<span class="line"><span>bar, 2</span></span>
<span class="line"><span>&quot;baz, qux&quot;, 3</span></span></code></pre></div><p>与@CsvSource中使用的语法相反，@CsvFileSource使用双引号&quot;作为转义字符，请参阅上面例子中的&quot;baz, qux&quot;值，一个空的转义值&quot;&quot;会产生一个空字符串， 一个完全为空的值被解释为null引用，如果null引用的目标类型是基本类型，则引发ArgumentConversionException。</p><ul><li><strong>@ArgumentsSource</strong></li></ul><p>可以使用@ArgumentsSource指定一个自定义的，可重用的ArgumentsProvider。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@ParameterizedTest</span></span>
<span class="line"><span>@ArgumentsSource(MyArgumentsProvider.class)</span></span>
<span class="line"><span>void testWithArgumentsSource(String argument) {</span></span>
<span class="line"><span>    assertNotNull(argument);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>static class MyArgumentsProvider implements ArgumentsProvider {</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public Stream&lt; ? extends Arguments &gt; provideArguments(ExtensionContext context) {</span></span>
<span class="line"><span>        return Stream.of(&quot;foo&quot;, &quot;bar&quot;).map(Arguments::of);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>执行结果:</p><p><img src="`+d+`" alt="error.图片加载失败"></p><h3 id="测试-动态测试" tabindex="-1">测试:动态测试 <a class="header-anchor" href="#测试-动态测试" aria-label="Permalink to &quot;测试:动态测试&quot;">​</a></h3><p>除了这些标准测试外，JUnit Jupiter还引入了一种全新的测试编程模型。这种新的测试是动态测试，它是由 <strong>@TestFactory</strong> 注解的工厂方法在运行时生成的。</p><p>与@Test方法相比，@TestFactory方法本身不是测试用例，而是测试用例的工厂。因此，动态测试是工厂的产物。从技术上讲，@TestFactory方法必须返回DynamicNode实例的Stream，Collection，Iterable或Iterator。 DynamicNode的可实例化的子类是DynamicContainer和DynamicTest。 DynamicContainer实例由一个显示名称和一个动态子节点列表组成，可以创建任意嵌套的动态节点层次结构。然后，DynamicTest实例将被延迟执行，从而实现测试用例的动态甚至非确定性生成。</p><p>任何由@TestFactory返回的Stream都要通过调用stream.close()来正确关闭，使得使用诸如Files.lines()之类的资源变得安全。</p><p>与@Test方法一样，@TestFactory方法不能是private或static，并且可以选择声明参数，以便通过ParameterResolvers解析。</p><p>DynamicTest是运行时生成的测试用例。它由显示名称和Executable组成。 Executable是@FunctionalInterface，这意味着动态测试的实现可以作为lambda表达式或方法引用来提供。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>package tech.pdai.junit5;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import org.junit.jupiter.api.DynamicNode;</span></span>
<span class="line"><span>import org.junit.jupiter.api.DynamicTest;</span></span>
<span class="line"><span>import org.junit.jupiter.api.TestFactory;</span></span>
<span class="line"><span>import org.junit.jupiter.api.function.ThrowingConsumer;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import java.util.*;</span></span>
<span class="line"><span>import java.util.function.Function;</span></span>
<span class="line"><span>import java.util.stream.IntStream;</span></span>
<span class="line"><span>import java.util.stream.Stream;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import static org.junit.jupiter.api.Assertions.*;</span></span>
<span class="line"><span>import static org.junit.jupiter.api.DynamicContainer.dynamicContainer;</span></span>
<span class="line"><span>import static org.junit.jupiter.api.DynamicTest.dynamicTest;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * Dynamic Test.</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>public class DynamicsTest {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // This will result in a JUnitException!</span></span>
<span class="line"><span>    @TestFactory</span></span>
<span class="line"><span>    List&lt;String&gt; dynamicTestsWithInvalidReturnType() {</span></span>
<span class="line"><span>        return Arrays.asList(&quot;Hello&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @TestFactory</span></span>
<span class="line"><span>    Collection&lt;DynamicTest&gt; dynamicTestsFromCollection() {</span></span>
<span class="line"><span>        return Arrays.asList(</span></span>
<span class="line"><span>                dynamicTest(&quot;1st dynamic test&quot;, () -&gt; assertTrue(true)),</span></span>
<span class="line"><span>                dynamicTest(&quot;2nd dynamic test&quot;, () -&gt; assertEquals(4, 2 * 2))</span></span>
<span class="line"><span>        );</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @TestFactory</span></span>
<span class="line"><span>    Iterable&lt;DynamicTest&gt; dynamicTestsFromIterable() {</span></span>
<span class="line"><span>        return Arrays.asList(</span></span>
<span class="line"><span>                dynamicTest(&quot;3rd dynamic test&quot;, () -&gt; assertTrue(true)),</span></span>
<span class="line"><span>                dynamicTest(&quot;4th dynamic test&quot;, () -&gt; assertEquals(4, 2 * 2))</span></span>
<span class="line"><span>        );</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @TestFactory</span></span>
<span class="line"><span>    Iterator&lt;DynamicTest&gt; dynamicTestsFromIterator() {</span></span>
<span class="line"><span>        return Arrays.asList(</span></span>
<span class="line"><span>                dynamicTest(&quot;5th dynamic test&quot;, () -&gt; assertTrue(true)),</span></span>
<span class="line"><span>                dynamicTest(&quot;6th dynamic test&quot;, () -&gt; assertEquals(4, 2 * 2))</span></span>
<span class="line"><span>        ).iterator();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @TestFactory</span></span>
<span class="line"><span>    Stream&lt;DynamicTest&gt; dynamicTestsFromStream() {</span></span>
<span class="line"><span>        return Stream.of(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;)</span></span>
<span class="line"><span>                .map(str -&gt; dynamicTest(&quot;test&quot; + str, () -&gt; { /* ... */ }));</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @TestFactory</span></span>
<span class="line"><span>    Stream&lt;DynamicTest&gt; dynamicTestsFromIntStream() {</span></span>
<span class="line"><span>        // Generates tests for the first 10 even integers.</span></span>
<span class="line"><span>        return IntStream.iterate(0, n -&gt; n + 2).limit(10)</span></span>
<span class="line"><span>                .mapToObj(n -&gt; dynamicTest(&quot;test&quot; + n, () -&gt; assertTrue(n % 2 == 0)));</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @TestFactory</span></span>
<span class="line"><span>    Stream&lt;DynamicTest&gt; generateRandomNumberOfTests() {</span></span>
<span class="line"><span>        // Generates random positive integers between 0 and 100 until</span></span>
<span class="line"><span>        // a number evenly divisible by 7 is encountered.</span></span>
<span class="line"><span>        Iterator&lt;Integer&gt; inputGenerator = new Iterator&lt;Integer&gt;() {</span></span>
<span class="line"><span>            Random random = new Random();</span></span>
<span class="line"><span>            int current;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>            @Override</span></span>
<span class="line"><span>            public boolean hasNext() {</span></span>
<span class="line"><span>                current = random.nextInt(100);</span></span>
<span class="line"><span>                return current % 7 != 0;</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>            @Override</span></span>
<span class="line"><span>            public Integer next() {</span></span>
<span class="line"><span>                return current;</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        };</span></span>
<span class="line"><span>        // Generates display names like: input:5, input:37, input:85, etc.</span></span>
<span class="line"><span>        Function&lt;Integer, String&gt; displayNameGenerator = (input) -&gt; &quot;input:&quot; + input;</span></span>
<span class="line"><span>        // Executes tests based on the current input value.</span></span>
<span class="line"><span>        ThrowingConsumer&lt;Integer&gt; testExecutor = (input) -&gt; assertTrue(input % 7 != 0);</span></span>
<span class="line"><span>        // Returns a stream of dynamic tests.</span></span>
<span class="line"><span>        return DynamicTest.stream(inputGenerator, displayNameGenerator, testExecutor);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @TestFactory</span></span>
<span class="line"><span>    Stream&lt;DynamicNode&gt; dynamicTestsWithContainers() {</span></span>
<span class="line"><span>        return Stream.of(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;)</span></span>
<span class="line"><span>                .map(input -&gt; dynamicContainer(&quot;Container &quot; + input, Stream.of(</span></span>
<span class="line"><span>                        dynamicTest(&quot;not null&quot;, () -&gt; assertNotNull(input)),</span></span>
<span class="line"><span>                        dynamicContainer(&quot;properties&quot;, Stream.of(</span></span>
<span class="line"><span>                                dynamicTest(&quot;length &gt; 0&quot;, () -&gt; assertTrue(input.length() &gt; 0)),</span></span>
<span class="line"><span>                                dynamicTest(&quot;not empty&quot;, () -&gt; assertFalse(input.isEmpty()))</span></span>
<span class="line"><span>                        ))</span></span>
<span class="line"><span>                )));</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>执行结果:</p><p><img src="`+g+'" alt="error.图片加载失败"></p><h2 id="参考文章" tabindex="-1">参考文章 <a class="header-anchor" href="#参考文章" aria-label="Permalink to &quot;参考文章&quot;">​</a></h2><ul><li><a href="https://junit.org/junit5/" target="_blank" rel="noreferrer">https://junit.org/junit5/</a></li><li><a href="https://github.com/junit-team" target="_blank" rel="noreferrer">https://github.com/junit-team</a></li><li><a href="https://junit.org/junit5/docs/current/user-guide" target="_blank" rel="noreferrer">https://junit.org/junit5/docs/current/user-guide</a></li><li><a href="https://www.bookstack.cn/read/junit5" target="_blank" rel="noreferrer">https://www.bookstack.cn/read/junit5</a></li><li><a href="https://blog.csdn.net/swordcenter/article/details/79279094" target="_blank" rel="noreferrer">https://blog.csdn.net/swordcenter/article/details/79279094</a></li><li><a href="https://www.cnblogs.com/one12138/archive/2019/09/17/11536492.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/one12138/archive/2019/09/17/11536492.html</a></li></ul><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>',139)]))}const A=a(m,[["render",h]]);export{k as __pageData,A as default};
