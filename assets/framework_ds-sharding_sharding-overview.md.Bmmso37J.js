import{_ as e,c as a,ai as h,o as t}from"./chunks/framework.BrYByd3F.js";const S=JSON.parse('{"title":"♥ShardingSphere详解知识体系♥","description":"","frontmatter":{},"headers":[],"relativePath":"framework/ds-sharding/sharding-overview.md","filePath":"framework/ds-sharding/sharding-overview.md","lastUpdated":1737706346000}'),n={name:"framework/ds-sharding/sharding-overview.md"};function i(d,r,l,s,g,o){return t(),a("div",null,r[0]||(r[0]=[h('<h1 id="♥shardingsphere详解知识体系♥" tabindex="-1">♥ShardingSphere详解知识体系♥ <a class="header-anchor" href="#♥shardingsphere详解知识体系♥" aria-label="Permalink to &quot;♥ShardingSphere详解知识体系♥&quot;">​</a></h1><blockquote><p>ShardingSphere知识体系详解。@pdai</p></blockquote><h2 id="相关文章" tabindex="-1">相关文章 <a class="header-anchor" href="#相关文章" aria-label="Permalink to &quot;相关文章&quot;">​</a></h2><blockquote><p>ShardingSphere应用和ShardingSphere架构实现两个部分。</p></blockquote><h3 id="shardingsphere应用篇" tabindex="-1">ShardingSphere应用篇 <a class="header-anchor" href="#shardingsphere应用篇" aria-label="Permalink to &quot;ShardingSphere应用篇&quot;">​</a></h3><blockquote><p>主要是通过SpringBoot对ShardingSphere进行集成</p></blockquote><ul><li><a href="https://pdai.tech/md/spring/springboot/springboot-x-mysql-shardingjdbc.html" target="_blank" rel="noreferrer">SpringBoot集成ShardingJDBC - Sharding-JDBC简介和基于MyBatis的单库分表</a><ul><li>本文主要介绍分表分库，以及SpringBoot集成基于ShardingJDBC的单库分表实践。</li></ul></li><li><a href="https://pdai.tech/md/spring/springboot/springboot-x-mysql-shardingjdbc-jpa.html" target="_blank" rel="noreferrer">SpringBoot集成ShardingJDBC - 基于JPA的单库分表</a><ul><li>上文介绍SpringBoot集成基于ShardingJDBC的读写分离实践，本文在此基础上介绍SpringBoot集成基于ShardingJDBC+JPA的单库分表实践。</li></ul></li><li><a href="https://pdai.tech/md/spring/springboot/springboot-x-mysql-shardingjdbc-jpa-masterslave.html" target="_blank" rel="noreferrer">SpringBoot集成ShardingJDBC - 基于JPA的读写分离</a><ul><li>本文主要介绍分表分库，以及SpringBoot集成基于ShardingJDBC的读写分离实践。</li></ul></li><li><a href="https://pdai.tech/md/spring/springboot/springboot-x-mysql-shardingjdbc-jpa-tenant-db.html" target="_blank" rel="noreferrer">SpringBoot集成ShardingJDBC - 基于JPA的DB隔离多租户方案</a><ul><li>本文主要介绍ShardingJDBC的分片算法和分片策略，并在此基础上通过SpringBoot集成ShardingJDBC的几种策略（标准分片策略，行表达式分片策略和hint分片策略）向你展示DB隔离的多租户方案。</li></ul></li></ul><h3 id="shardingsphere架构实现篇" tabindex="-1">ShardingSphere架构实现篇 <a class="header-anchor" href="#shardingsphere架构实现篇" aria-label="Permalink to &quot;ShardingSphere架构实现篇&quot;">​</a></h3><blockquote><p>主要是对ShardingSphere主要的架构和原理进行分析（多数内容来源于<a href="https://shardingsphere.apache.org/document/5.1.0/cn/overview/" target="_blank" rel="noreferrer">ShardingSphere官方网站在新窗口打开</a>）</p></blockquote><ul><li><a href="https://pdai.tech/md/framework/ds-sharding/sharding-x-arch.html" target="_blank" rel="noreferrer">ShardingSphere详解 - 整体架构设计</a><ul><li>Apache ShardingSphere 5.x 版本开始致力于可插拔架构，项目的功能组件能够灵活的以可插拔的方式进行扩展。 目前，数据分片、读写分离、数据库高可用、数据加密、影子库压测等功能，以及对 MySQL、PostgreSQL、SQLServer、Oracle 等 SQL 与协议的支持，均通过插件的方式织入项目; 在 Apache ShardingSphere 中，很多功能实现类的加载方式是通过 SPI（Service Provider Interface） 注入的方式完成的。 SPI 是一种为了被第三方实现或扩展的 API，它可以用于实现框架扩展或组件替换。</li></ul></li><li><a href="https://pdai.tech/md/framework/ds-sharding/sharding-x-shard.html" target="_blank" rel="noreferrer">ShardingSphere详解 - 数据分片的原理</a><ul><li>本文主要介绍ShardingSphere最重要的数据分片功能的原理，ShardingSphere的3个产品的数据分片主要流程是完全一致的，<strong>Standard 内核流程由 SQL 解析 =&gt; SQL 路由 =&gt; SQL 改写 =&gt; SQL 执行 =&gt; 结果归并 组成</strong>，主要用于处理标准分片场景下的 SQL 执行。 <strong>Federation 执行引擎流程由 SQL 解析 =&gt; 逻辑优化 =&gt; 物理优化 =&gt; 优化执行 =&gt; Standard 内核流程 组成</strong>。 这篇文章主要转载自<a href="https://shardingsphere.apache.org/document/legacy/4.x/document/cn/features/sharding/" target="_blank" rel="noreferrer">ShardingSphere官方在新窗口打开</a>网站（v4.x版本 + V5.1.0版本），对于进阶数据库中间件或者设计自带Sharding的数据库(真正的分布式SQL数据库）极具参考价值。</li></ul></li><li><a href="https://pdai.tech/md/framework/ds-sharding/sharding-x-encrypt.html" target="_blank" rel="noreferrer">ShardingSphere详解 - 数据脱敏(加密)详解</a><ul><li>根据业界对加密的需求及业务改造痛点，提供了一套完整、安全、透明化、低改造成本的数据加密整合解决方案，是 Apache ShardingSphere 数据加密模块的主要设计目标; 这篇文章主要转载自<a href="https://shardingsphere.apache.org/document/5.1.0/cn/features/encrypt/" target="_blank" rel="noreferrer">ShardingSphere官方在新窗口打开</a>网站（V5.1.0版本），对开发者进阶设计通过数据库中间件进行数据脱敏、加密有着很大的借鉴意义。</li></ul></li><li><a href="https://pdai.tech/md/framework/ds-sharding/sharding-x-trans-xa.html" target="_blank" rel="noreferrer">ShardingSphere详解 - 事务实现原理之两阶段事务XA</a><ul><li>本文主要介绍ShardingSphere分布式事务XA的实现原理; 这篇文章主要转载自<a href="https://shardingsphere.apache.org/document/5.1.0/cn/reference/transaction/base-transaction-seata/" target="_blank" rel="noreferrer">ShardingSphere官方在新窗口打开</a>网站（V5.1.0版本）。</li></ul></li><li><a href="https://pdai.tech/md/framework/ds-sharding/sharding-x-trans-saga.html" target="_blank" rel="noreferrer">ShardingSphere详解 - 事务实现原理之柔性事务SAGA</a><ul><li>Apache ShardingSphere 在v5.0版本前还支持柔性事务SAGA，目前看5.x+版本中已经移除了向观众章节，本文主要介绍其实现原理; 这篇文章主要转载自<a href="https://shardingsphere.apache.org/document/legacy/4.x/document/cn/features/transaction/concept/base-transaction-saga/" target="_blank" rel="noreferrer">ShardingSphere官方在新窗口打开</a>网站（V4.x版本）。</li></ul></li><li><a href="https://pdai.tech/md/framework/ds-sharding/sharding-x-trans-seata.html" target="_blank" rel="noreferrer">ShardingSphere详解 - 事务实现原理之柔性事务SEATA</a><ul><li>Apache ShardingSphere 集成了 SEATA 作为柔性事务的使用方案，本文主要介绍其实现原理; 这篇文章主要转载自<a href="https://shardingsphere.apache.org/document/5.1.0/cn/reference/transaction/base-transaction-seata/" target="_blank" rel="noreferrer">ShardingSphere官方在新窗口打开</a>网站（V5.1.0版本）。</li></ul></li><li><a href="https://pdai.tech/md/framework/ds-sharding/sharding-x-scale.html" target="_blank" rel="noreferrer">ShardingSphere详解 - 弹性伸缩原理</a><ul><li>支持自定义分片算法，减少数据伸缩及迁移时的业务影响，提供一站式的通用弹性伸缩解决方案，是 Apache ShardingSphere 弹性伸缩的主要设计目标; 这篇文章主要转载自<a href="https://shardingsphere.apache.org/document/5.1.0/cn/features/scaling/" target="_blank" rel="noreferrer">ShardingSphere官方在新窗口打开</a>网站（V5.1.0版本）。</li></ul></li><li><a href="https://pdai.tech/md/framework/ds-sharding/sharding-x-shadow.html" target="_blank" rel="noreferrer">ShardingSphere详解 - 通过影子库进行压测</a><ul><li>Apache ShardingSphere 关注于全链路压测场景下，数据库层面的解决方案。 将压测数据自动路由至用户指定的数据库，是 Apache ShardingSphere 影子库模块的主要设计目标; 这篇文章主要转载自<a href="https://shardingsphere.apache.org/document/5.1.0/cn/reference/shadow" target="_blank" rel="noreferrer">ShardingSphere官方在新窗口打开</a>网站（V5.1.0版本）。</li></ul></li></ul><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>',11)]))}const c=e(n,[["render",i]]);export{S as __pageData,c as default};
