import{_ as r,c as a,ai as t,o as h}from"./chunks/framework.BrYByd3F.js";const i="/vitepress-blog-template/images/shardingsphere/sharding-x-arch-1.png",s="/vitepress-blog-template/images/shardingsphere/sharding-x-arch-6.png",d="/vitepress-blog-template/images/shardingsphere/sharding-x-arch-2.png",p="/vitepress-blog-template/images/shardingsphere/sharding-x-arch-3.png",o="/vitepress-blog-template/images/shardingsphere/sharding-x-arch-4.png",n="/vitepress-blog-template/images/shardingsphere/sharding-x-arch-5.png",l="/vitepress-blog-template/images/shardingsphere/sharding-x-arch-7.png",k=JSON.parse('{"title":"ShardingSphere详解 - 整体架构设计","description":"","frontmatter":{},"headers":[],"relativePath":"framework/ds-sharding/sharding-x-arch.md","filePath":"framework/ds-sharding/sharding-x-arch.md","lastUpdated":1737706346000}'),g={name:"framework/ds-sharding/sharding-x-arch.md"};function S(c,e,b,u,m,P){return h(),a("div",null,e[0]||(e[0]=[t('<h1 id="shardingsphere详解-整体架构设计" tabindex="-1">ShardingSphere详解 - 整体架构设计 <a class="header-anchor" href="#shardingsphere详解-整体架构设计" aria-label="Permalink to &quot;ShardingSphere详解 - 整体架构设计&quot;">​</a></h1><blockquote><p>Apache ShardingSphere 5.x 版本开始致力于可插拔架构，项目的功能组件能够灵活的以可插拔的方式进行扩展。 目前，数据分片、读写分离、数据库高可用、数据加密、影子库压测等功能，以及对 MySQL、PostgreSQL、SQLServer、Oracle 等 SQL 与协议的支持，均通过插件的方式织入项目; 在 Apache ShardingSphere 中，很多功能实现类的加载方式是通过 SPI（Service Provider Interface） 注入的方式完成的。 SPI 是一种为了被第三方实现或扩展的 API，它可以用于实现框架扩展或组件替换。@pdai</p></blockquote><h2 id="shardingsphere产品定位" tabindex="-1">ShardingSphere产品定位 <a class="header-anchor" href="#shardingsphere产品定位" aria-label="Permalink to &quot;ShardingSphere产品定位&quot;">​</a></h2><blockquote><p>Apache ShardingSphere 产品定位为 Database Plus，旨在构建多模数据库上层的标准和生态。 它关注如何充分合理地利用数据库的计算和存储能力，而并非实现一个全新的数据库。ShardingSphere 站在数据库的上层视角，关注他们之间的协作多于数据库自身。</p></blockquote><ul><li><p><strong>连接、增量和可插拔是 Apache ShardingSphere 的核心概念</strong>。</p></li><li><p><strong>连接</strong>：通过对数据库协议、SQL 方言以及数据库存储的灵活适配，快速的连接应用与多模式的异构数据库；</p></li><li><p><strong>增量</strong>：获取数据库的访问流量，并提供流量重定向（数据分片、读写分离、影子库）、流量变形（数据加密、数据脱敏）、流量鉴权（安全、审计、权限）、流量治理（熔断、限流）以及流量分析（服务质量分析、可观察性）等透明化增量功能；</p></li><li><p><strong>可插拔</strong>：项目采用微内核 + 三层可插拔模型，使内核、功能组件以及生态对接完全能够灵活的方式进行插拔式扩展，开发者能够像使用积木一样定制属于自己的独特系统。</p></li></ul><p><img src="'+i+'" alt="error.图片加载失败"></p><ul><li><strong>线路规划</strong></li></ul><p><img src="'+s+'" alt="error.图片加载失败"></p><h2 id="shardingsphere组成简介" tabindex="-1">ShardingSphere组成简介 <a class="header-anchor" href="#shardingsphere组成简介" aria-label="Permalink to &quot;ShardingSphere组成简介&quot;">​</a></h2><blockquote><p>Apache ShardingSphere 由 JDBC、Proxy 和 Sidecar（规划中）这 3 款既能够独立部署，又支持混合部署配合使用的产品组成。 它们均提供标准化的基于数据库作为存储节点的增量功能，可适用于如 Java 同构、异构语言、云原生等各种多样化的应用场景。</p></blockquote><p>关系型数据库当今依然占有巨大市场份额，是企业核心系统的基石，未来也难于撼动，我们更加注重在原有基础上提供增量，而非颠覆。</p><table tabindex="0"><thead><tr><th>ShardingSphere-JDBC</th><th>ShardingSphere-Proxy</th><th>ShardingSphere-Sidecar</th></tr></thead><tbody><tr><td>数据库</td><td>任意</td><td>MySQL/PostgreSQL</td></tr><tr><td>连接消耗数</td><td>高</td><td>低</td></tr><tr><td>异构语言</td><td>仅 Java</td><td>任意</td></tr><tr><td>性能 损耗低</td><td>损耗略高</td><td>损耗低</td></tr><tr><td>无中心化</td><td>是</td><td>否</td></tr><tr><td>静态入口</td><td>无</td><td>有</td></tr></tbody></table><h3 id="shardingsphere-jdbc" tabindex="-1">ShardingSphere-JDBC <a class="header-anchor" href="#shardingsphere-jdbc" aria-label="Permalink to &quot;ShardingSphere-JDBC&quot;">​</a></h3><blockquote><p><strong>定位为轻量级 Java 框架，在 Java 的 JDBC 层提供的额外服务</strong>。 它使用客户端直连数据库，以 jar 包形式提供服务，无需额外部署和依赖，可理解为增强版的 JDBC 驱动，完全兼容 JDBC 和各种 ORM 框架。</p></blockquote><ul><li>适用于任何基于 JDBC 的 ORM 框架，如：JPA, Hibernate, Mybatis, Spring JDBC Template 或直接使用 JDBC；</li><li>支持任何第三方的数据库连接池，如：DBCP, C3P0, BoneCP, HikariCP 等；</li><li>支持任意实现 JDBC 规范的数据库，目前支持 MySQL，PostgreSQL，Oracle，SQLServer 以及任何可使用 JDBC 访问的数据库。</li></ul><p><img src="'+d+'" alt="error.图片加载失败"></p><h3 id="shardingsphere-proxy" tabindex="-1">ShardingSphere-Proxy <a class="header-anchor" href="#shardingsphere-proxy" aria-label="Permalink to &quot;ShardingSphere-Proxy&quot;">​</a></h3><blockquote><p><strong>定位为透明化的数据库代理端，提供封装了数据库二进制协议的服务端版本，用于完成对异构语言的支持</strong>。 目前提供 MySQL 和 PostgreSQL（兼容 openGauss 等基于 PostgreSQL 的数据库）版本，它可以使用任何兼容 MySQL/PostgreSQL 协议的访问客户端（如：MySQL Command Client, MySQL Workbench, Navicat 等）操作数据，对 DBA 更加友好。</p></blockquote><ul><li>向应用程序完全透明，可直接当做 MySQL/PostgreSQL 使用；</li><li>适用于任何兼容 MySQL/PostgreSQL 协议的的客户端。</li></ul><p><img src="'+p+'" alt="error.图片加载失败"></p><h3 id="shardingsphere-sidecar-todo" tabindex="-1">ShardingSphere-Sidecar（TODO） <a class="header-anchor" href="#shardingsphere-sidecar-todo" aria-label="Permalink to &quot;ShardingSphere-Sidecar（TODO）&quot;">​</a></h3><blockquote><p><strong>定位为 Kubernetes 的云原生数据库代理，以 Sidecar 的形式代理所有对数据库的访问</strong>。 通过无中心、零侵入的方案提供与数据库交互的啮合层，即 Database Mesh，又可称数据库网格。</p></blockquote><p>Database Mesh 的关注重点在于如何将分布式的数据访问应用与数据库有机串联起来，它更加关注的是交互，是将杂乱无章的应用与数据库之间的交互进行有效地梳理。 使用 Database Mesh，访问数据库的应用和数据库终将形成一个巨大的网格体系，应用和数据库只需在网格体系中对号入座即可，它们都是被啮合层所治理的对象。</p><p><img src="'+o+'" alt="error.图片加载失败"></p><h3 id="混合架构" tabindex="-1">混合架构 <a class="header-anchor" href="#混合架构" aria-label="Permalink to &quot;混合架构&quot;">​</a></h3><blockquote><p>Apache ShardingSphere 是多接入端共同组成的生态圈。 通过混合使用 ShardingSphere-JDBC 和 ShardingSphere-Proxy，并采用同一注册中心统一配置分片策略，能够灵活的搭建适用于各种场景的应用系统，使得架构师更加自由地调整适合于当前业务的最佳系统架构。</p></blockquote><ul><li>ShardingSphere-JDBC 采用无中心化架构，与应用程序共享资源，适用于 Java 开发的高性能的轻量级 OLTP 应用；</li><li>ShardingSphere-Proxy 提供静态入口以及异构语言的支持，独立于应用程序部署，适用于 OLAP 应用以及对分片数据库进行管理和运维的场景。</li></ul><p><img src="'+n+'" alt="error.图片加载失败"></p><h2 id="shardingsphere可插拔架构" tabindex="-1">ShardingSphere可插拔架构 <a class="header-anchor" href="#shardingsphere可插拔架构" aria-label="Permalink to &quot;ShardingSphere可插拔架构&quot;">​</a></h2><blockquote><p>让开发者能够像使用积木一样定制属于自己的独特系统，是 Apache ShardingSphere 可插拔架构的设计目标。</p></blockquote><p>在 Apache ShardingSphere 中，很多功能实现类的加载方式是通过 SPI（Service Provider Interface） 注入的方式完成的。 SPI 是一种为了被第三方实现或扩展的 API，它可以用于实现框架扩展或组件替换。</p><p>SPI相关的文章请参考：<a href="https://pdai.tech/md/java/advanced/java-advanced-spi.html" target="_blank" rel="noreferrer">Java常用机制 - SPI机制</a></p><p><strong>挑战</strong></p><p>可插拔架构对程序架构设计的要求非常高，需要将各个模块相互独立，互不感知，并且通过一个可插拔内核，以叠加的方式将各种功能组合使用。 设计一套将功能开发完全隔离的架构体系，既可以最大限度的将开源社区的活力激发出来，也能够保障项目的质量。</p><p>Apache ShardingSphere 5.x 版本开始致力于可插拔架构，项目的功能组件能够灵活的以可插拔的方式进行扩展。 目前，数据分片、读写分离、数据库高可用、数据加密、影子库压测等功能，以及对 MySQL、PostgreSQL、SQLServer、Oracle 等 SQL 与协议的支持，均通过插件的方式织入项目。 Apache ShardingSphere 目前已提供数十个 SPI 作为系统的扩展点，而且仍在不断增加中。</p><p><img src="'+l+'" alt="error.图片加载失败"></p><h3 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h3><blockquote><p>Apache ShardingSphere 的可插拔架构划分为 3 层，它们是：L1 内核层、L2 功能层、L3 生态层。</p></blockquote><h4 id="l1-内核层" tabindex="-1">L1 内核层 <a class="header-anchor" href="#l1-内核层" aria-label="Permalink to &quot;L1 内核层&quot;">​</a></h4><p>是数据库基本能力的抽象，其所有组件均必须存在，但具体实现方式可通过可插拔的方式更换。 主要包括查询优化器、分布式事务引擎、分布式执行引擎、权限引擎和调度引擎等。</p><h4 id="l2-功能层" tabindex="-1">L2 功能层 <a class="header-anchor" href="#l2-功能层" aria-label="Permalink to &quot;L2 功能层&quot;">​</a></h4><p>用于提供增量能力，其所有组件均是可选的，可以包含零至多个组件。组件之间完全隔离，互无感知，多组件可通过叠加的方式相互配合使用。 主要包括数据分片、读写分离、数据库高可用、数据加密、影子库等。用户自定义功能可完全面向 Apache ShardingSphere 定义的顶层接口进行定制化扩展，而无需改动内核代码。</p><h4 id="l3-生态层" tabindex="-1">L3 生态层 <a class="header-anchor" href="#l3-生态层" aria-label="Permalink to &quot;L3 生态层&quot;">​</a></h4><p>用于对接和融入现有数据库生态，包括数据库协议、SQL 解析器和存储适配器，分别对应于 Apache ShardingSphere 以数据库协议提供服务的方式、SQL 方言操作数据的方式以及对接存储节点的数据库类型。</p><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>',45)]))}const L=r(g,[["render",S]]);export{k as __pageData,L as default};
