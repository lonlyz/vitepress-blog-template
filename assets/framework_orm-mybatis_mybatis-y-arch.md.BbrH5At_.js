import{_ as e}from"./chunks/mybatis-y-arch-1.BrCrk0Fu.js";import{_ as t,c as i,ai as s,o as r}from"./chunks/framework.BrYByd3F.js";const l="/vitepress-blog-template/images/mybatis/mybatis-y-arch-2.png",p="/vitepress-blog-template/images/mybatis/mybatis-y-arch-3.png",o="/vitepress-blog-template/images/mybatis/mybatis-y-arch-4.png",b=JSON.parse('{"title":"MyBatis详解 - 总体框架设计","description":"","frontmatter":{},"headers":[],"relativePath":"framework/orm-mybatis/mybatis-y-arch.md","filePath":"framework/orm-mybatis/mybatis-y-arch.md","lastUpdated":1737706346000}'),d={name:"framework/orm-mybatis/mybatis-y-arch.md"};function c(n,a,m,h,y,M){return r(),i("div",null,a[0]||(a[0]=[s('<h1 id="mybatis详解-总体框架设计" tabindex="-1">MyBatis详解 - 总体框架设计 <a class="header-anchor" href="#mybatis详解-总体框架设计" aria-label="Permalink to &quot;MyBatis详解 - 总体框架设计&quot;">​</a></h1><blockquote><p>MyBatis整体架构包含哪些层呢？这些层次是如何设计的呢？@pdai</p></blockquote><h2 id="mybatis架构概览" tabindex="-1">MyBatis架构概览 <a class="header-anchor" href="#mybatis架构概览" aria-label="Permalink to &quot;MyBatis架构概览&quot;">​</a></h2><p>MyBatis框架整体设计如下:</p><p><img src="'+e+'" alt="error.图片加载失败"></p><h3 id="接口层-和数据库交互的方式" tabindex="-1">接口层-和数据库交互的方式 <a class="header-anchor" href="#接口层-和数据库交互的方式" aria-label="Permalink to &quot;接口层-和数据库交互的方式&quot;">​</a></h3><p>MyBatis和数据库的交互有两种方式：</p><ul><li>使用传统的MyBatis提供的API；</li><li>使用Mapper接口；</li></ul><h4 id="使用传统的mybatis提供的api" tabindex="-1">使用传统的MyBatis提供的API <a class="header-anchor" href="#使用传统的mybatis提供的api" aria-label="Permalink to &quot;使用传统的MyBatis提供的API&quot;">​</a></h4><p>这是传统的传递Statement Id 和查询参数给 SqlSession 对象，使用 SqlSession对象完成和数据库的交互；MyBatis 提供了非常方便和简单的API，供用户实现对数据库的增删改查数据操作，以及对数据库连接信息和MyBatis 自身配置信息的维护操作。</p><p><img src="'+l+'" alt="error.图片加载失败"></p><p>上述使用MyBatis 的方法，是创建一个和数据库打交道的SqlSession对象，然后根据Statement Id 和参数来操作数据库，这种方式固然很简单和实用，但是它不符合面向对象语言的概念和面向接口编程的编程习惯。由于面向接口的编程是面向对象的大趋势，MyBatis 为了适应这一趋势，增加了第二种使用MyBatis 支持接口（Interface）调用方式。</p><h4 id="使用mapper接口" tabindex="-1">使用Mapper接口 <a class="header-anchor" href="#使用mapper接口" aria-label="Permalink to &quot;使用Mapper接口&quot;">​</a></h4><p>MyBatis 将配置文件中的每一个<code>&lt;mapper&gt;</code> 节点抽象为一个 Mapper 接口，而这个接口中声明的方法和跟<code>&lt;mapper&gt;</code> 节点中的<code>&lt;select|update|delete|insert&gt;</code> 节点项对应，即<code>&lt;select|update|delete|insert&gt;</code> 节点的id值为Mapper 接口中的方法名称，parameterType 值表示Mapper 对应方法的入参类型，而resultMap 值则对应了Mapper 接口表示的返回值类型或者返回结果集的元素类型。</p><p><img src="'+p+'" alt="error.图片加载失败"></p><p>根据MyBatis 的配置规范配置好后，通过SqlSession.getMapper(XXXMapper.class)方法，MyBatis 会根据相应的接口声明的方法信息，通过动态代理机制生成一个Mapper 实例，我们使用Mapper 接口的某一个方法时，MyBatis 会根据这个方法的方法名和参数类型，确定Statement Id，底层还是通过SqlSession.select(&quot;statementId&quot;,parameterObject);或者SqlSession.update(&quot;statementId&quot;,parameterObject); 等等来实现对数据库的操作， MyBatis 引用Mapper 接口这种调用方式，纯粹是为了满足面向接口编程的需要。（其实还有一个原因是在于，面向接口的编程，使得用户在接口上可以使用注解来配置SQL语句，这样就可以脱离XML配置文件，实现“0配置”）。</p><h3 id="数据处理层" tabindex="-1">数据处理层 <a class="header-anchor" href="#数据处理层" aria-label="Permalink to &quot;数据处理层&quot;">​</a></h3><p>数据处理层可以说是MyBatis 的核心，从大的方面上讲，它要完成两个功能：</p><ul><li>通过传入参数构建动态SQL语句；</li><li>SQL语句的执行以及封装查询结果集成<code>List&lt;E&gt;</code></li></ul><h4 id="参数映射和动态sql语句生成" tabindex="-1">参数映射和动态SQL语句生成 <a class="header-anchor" href="#参数映射和动态sql语句生成" aria-label="Permalink to &quot;参数映射和动态SQL语句生成&quot;">​</a></h4><p>动态语句生成可以说是MyBatis框架非常优雅的一个设计，MyBatis 通过传入的参数值，使用 Ognl 来动态地构造SQL语句，使得MyBatis 有很强的灵活性和扩展性。</p><p>参数映射指的是对于java 数据类型和jdbc数据类型之间的转换：这里有包括两个过程：查询阶段，我们要将java类型的数据，转换成jdbc类型的数据，通过 preparedStatement.setXXX() 来设值；另一个就是对resultset查询结果集的jdbcType 数据转换成java 数据类型。</p><h4 id="sql语句的执行以及封装查询结果集成list" tabindex="-1">SQL语句的执行以及封装查询结果集成List <a class="header-anchor" href="#sql语句的执行以及封装查询结果集成list" aria-label="Permalink to &quot;SQL语句的执行以及封装查询结果集成List&quot;">​</a></h4><p>动态SQL语句生成之后，MyBatis 将执行SQL语句，并将可能返回的结果集转换成<code>List&lt;E&gt;</code> 列表。MyBatis 在对结果集的处理中，支持结果集关系一对多和多对一的转换，并且有两种支持方式，一种为嵌套查询语句的查询，还有一种是嵌套结果集的查询。</p><h3 id="框架支撑层" tabindex="-1">框架支撑层 <a class="header-anchor" href="#框架支撑层" aria-label="Permalink to &quot;框架支撑层&quot;">​</a></h3><ul><li>事务管理机制</li></ul><p>事务管理机制对于ORM框架而言是不可缺少的一部分，事务管理机制的质量也是考量一个ORM框架是否优秀的一个标准。</p><ul><li>连接池管理机制</li></ul><p>由于创建一个数据库连接所占用的资源比较大， 对于数据吞吐量大和访问量非常大的应用而言，连接池的设计就显得非常重要。</p><ul><li>缓存机制</li></ul><p>为了提高数据利用率和减小服务器和数据库的压力，MyBatis 会对于一些查询提供会话级别的数据缓存，会将对某一次查询，放置到SqlSession 中，在允许的时间间隔内，对于完全相同的查询，MyBatis 会直接将缓存结果返回给用户，而不用再到数据库中查找。</p><ul><li>SQL语句的配置方式</li></ul><p>传统的MyBatis 配置SQL 语句方式就是使用XML文件进行配置的，但是这种方式不能很好地支持面向接口编程的理念，为了支持面向接口的编程，MyBatis 引入了Mapper接口的概念，面向接口的引入，对使用注解来配置SQL 语句成为可能，用户只需要在接口上添加必要的注解即可，不用再去配置XML文件了，但是，目前的MyBatis 只是对注解配置SQL 语句提供了有限的支持，某些高级功能还是要依赖XML配置文件配置SQL 语句。</p><h3 id="引导层" tabindex="-1">引导层 <a class="header-anchor" href="#引导层" aria-label="Permalink to &quot;引导层&quot;">​</a></h3><p>引导层是配置和启动MyBatis配置信息的方式。MyBatis 提供两种方式来引导MyBatis ：基于XML配置文件的方式和基于Java API 的方式。</p><h2 id="主要构件及其相互关系" tabindex="-1">主要构件及其相互关系 <a class="header-anchor" href="#主要构件及其相互关系" aria-label="Permalink to &quot;主要构件及其相互关系&quot;">​</a></h2><p>从MyBatis代码实现的角度来看，主体构件和关系如下：</p><p><img src="'+o+'" alt="error.图片加载失败"></p><p>主要的核心部件解释如下：</p><ul><li><p><code>SqlSession</code> 作为MyBatis工作的主要顶层API，表示和数据库交互的会话，完成必要数据库增删改查功能</p></li><li><p><code>Executor</code> MyBatis执行器，是MyBatis 调度的核心，负责SQL语句的生成和查询缓存的维护</p></li><li><p><code>StatementHandler</code> 封装了JDBC Statement操作，负责对JDBC statement 的操作，如设置参数、将Statement结果集转换成List集合。</p></li><li><p><code>ParameterHandler</code> 负责对用户传递的参数转换成JDBC Statement 所需要的参数，</p></li><li><p><code>ResultSetHandler</code> 负责将JDBC返回的ResultSet结果集对象转换成List类型的集合；</p></li><li><p><code>TypeHandler</code> 负责java数据类型和jdbc数据类型之间的映射和转换</p></li><li><p><code>MappedStatement</code> MappedStatement维护了一条<code>&lt;select|update|delete|insert&gt;</code>节点的封装，</p></li><li><p><code>SqlSource</code> 负责根据用户传递的parameterObject，动态地生成SQL语句，将信息封装到BoundSql对象中，并返回</p></li><li><p><code>BoundSql</code> 表示动态生成的SQL语句以及相应的参数信息</p></li><li><p><code>Configuration</code> MyBatis所有的配置信息都维持在Configuration对象之中。</p></li></ul><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>',41)]))}const B=t(d,[["render",c]]);export{b as __pageData,B as default};
