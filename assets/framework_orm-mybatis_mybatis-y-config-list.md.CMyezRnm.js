import{_ as t,c as s,ai as n,o as e}from"./chunks/framework.BrYByd3F.js";const g=JSON.parse('{"title":"MyBatis详解 - 官网配置清单","description":"","frontmatter":{},"headers":[],"relativePath":"framework/orm-mybatis/mybatis-y-config-list.md","filePath":"framework/orm-mybatis/mybatis-y-config-list.md","lastUpdated":1737706346000}'),p={name:"framework/orm-mybatis/mybatis-y-config-list.md"};function l(i,a,o,r,d,u){return e(),s("div",null,a[0]||(a[0]=[n(`<h1 id="mybatis详解-官网配置清单" tabindex="-1">MyBatis详解 - 官网配置清单 <a class="header-anchor" href="#mybatis详解-官网配置清单" aria-label="Permalink to &quot;MyBatis详解 - 官网配置清单&quot;">​</a></h1><blockquote><p>【本文为低优先级】通过上文我们知道配置是如何加载并初始化的，那MyBatis提供了哪些配置呢？通过MyBatis官网文档我们一探究竟。PS：对于清单型的，只需要大致浏览且在使用时能快速查找即可，所以是低优先级的。@pdai</p></blockquote><h2 id="mybatis配置项" tabindex="-1">MyBatis配置项 <a class="header-anchor" href="#mybatis配置项" aria-label="Permalink to &quot;MyBatis配置项&quot;">​</a></h2><p>MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。通过上一篇的初始化过程，我们就能看出，在mybatis的配置文件中：</p><ul><li>configuration节点为根节点。</li><li>在configuration节点之下，我们可以配置10个子节点， 分别为：properties、typeAliases、plugins、objectFactory、objectWrapperFactory、settings、environments、databaseIdProvider、typeHandlers、mappers。</li></ul><p>通过官方文档，我们梳理下配置文档的顶层结构：</p><ul><li>configuration（配置）</li><li>properties（属性）</li><li>settings（设置）</li><li>typeAliases（类型别名）</li><li>typeHandlers（类型处理器）</li><li>objectFactory（对象工厂）</li><li>plugins（插件）</li><li>environments（环境配置） <ul><li>environment（环境变量） <ul><li>transactionManager（事务管理器）</li><li>dataSource（数据源）</li></ul></li></ul></li><li>databaseIdProvider（数据库厂商标识）</li><li>mappers（映射器）</li></ul><h2 id="属性-properties" tabindex="-1">属性（properties） <a class="header-anchor" href="#属性-properties" aria-label="Permalink to &quot;属性（properties）&quot;">​</a></h2><p>这些属性可以在外部进行配置，并可以进行动态替换。你既可以在典型的 Java 属性文件中配置这些属性，也可以在 properties 元素的子元素中设置。例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;properties resource=&quot;org/mybatis/example/config.properties&quot;&gt;</span></span>
<span class="line"><span>  &lt;property name=&quot;username&quot; value=&quot;dev_user&quot;/&gt;</span></span>
<span class="line"><span>  &lt;property name=&quot;password&quot; value=&quot;F2Fa3!33TYyg&quot;/&gt;</span></span>
<span class="line"><span>&lt;/properties&gt;</span></span></code></pre></div><p>设置好的属性可以在整个配置文件中用来替换需要动态配置的属性值。比如:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;dataSource type=&quot;POOLED&quot;&gt;</span></span>
<span class="line"><span>  &lt;property name=&quot;driver&quot; value=&quot;\${driver}&quot;/&gt;</span></span>
<span class="line"><span>  &lt;property name=&quot;url&quot; value=&quot;\${url}&quot;/&gt;</span></span>
<span class="line"><span>  &lt;property name=&quot;username&quot; value=&quot;\${username}&quot;/&gt;</span></span>
<span class="line"><span>  &lt;property name=&quot;password&quot; value=&quot;\${password}&quot;/&gt;</span></span>
<span class="line"><span>&lt;/dataSource&gt;</span></span></code></pre></div><p>这个例子中的 username 和 password 将会由 properties 元素中设置的相应值来替换。 driver 和 url 属性将会由 config.properties 文件中对应的值来替换。这样就为配置提供了诸多灵活选择。</p><p>也可以在 SqlSessionFactoryBuilder.build() 方法中传入属性值。例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, props);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// ... 或者 ...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, environment, props);</span></span></code></pre></div><p>如果一个属性在不只一个地方进行了配置，那么，MyBatis 将按照下面的顺序来加载：</p><ul><li>首先读取在 properties 元素体内指定的属性。</li><li>然后根据 properties 元素中的 resource 属性读取类路径下属性文件，或根据 url 属性指定的路径读取属性文件，并覆盖之前读取过的同名属性。</li><li>最后读取作为方法参数传递的属性，并覆盖之前读取过的同名属性。</li></ul><p>因此，通过方法参数传递的属性具有最高优先级，resource/url 属性中指定的配置文件次之，最低优先级的则是 properties 元素中指定的属性。</p><p>从 MyBatis 3.4.2 开始，你可以为占位符指定一个默认值。例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;dataSource type=&quot;POOLED&quot;&gt;</span></span>
<span class="line"><span>  &lt;!-- ... --&gt;</span></span>
<span class="line"><span>  &lt;property name=&quot;username&quot; value=&quot;\${username:ut_user}&quot;/&gt; &lt;!-- 如果属性 &#39;username&#39; 没有被配置，&#39;username&#39; 属性的值将为 &#39;ut_user&#39; --&gt;</span></span>
<span class="line"><span>&lt;/dataSource&gt;</span></span></code></pre></div><p>这个特性默认是关闭的。要启用这个特性，需要添加一个特定的属性来开启这个特性。例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;properties resource=&quot;org/mybatis/example/config.properties&quot;&gt;</span></span>
<span class="line"><span>  &lt;!-- ... --&gt;</span></span>
<span class="line"><span>  &lt;property name=&quot;org.apache.ibatis.parsing.PropertyParser.enable-default-value&quot; value=&quot;true&quot;/&gt; &lt;!-- 启用默认值特性 --&gt;</span></span>
<span class="line"><span>&lt;/properties&gt;</span></span></code></pre></div><blockquote><p>如果你在属性名中使用了 &quot;:&quot; 字符（如：db:username），或者在 SQL 映射中使用了 OGNL 表达式的三元运算符（如： \${tableName != null ? tableName : &#39;global_constants&#39;}），就需要设置特定的属性来修改分隔属性名和默认值的字符。例如：</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;properties resource=&quot;org/mybatis/example/config.properties&quot;&gt;</span></span>
<span class="line"><span>  &lt;!-- ... --&gt;</span></span>
<span class="line"><span>  &lt;property name=&quot;org.apache.ibatis.parsing.PropertyParser.default-value-separator&quot; value=&quot;?:&quot;/&gt; &lt;!-- 修改默认值的分隔符 --&gt;</span></span>
<span class="line"><span>&lt;/properties&gt;</span></span>
<span class="line"><span>&lt;dataSource type=&quot;POOLED&quot;&gt;</span></span>
<span class="line"><span>  &lt;!-- ... --&gt;</span></span>
<span class="line"><span>  &lt;property name=&quot;username&quot; value=&quot;\${db:username?:ut_user}&quot;/&gt;</span></span>
<span class="line"><span>&lt;/dataSource&gt;</span></span></code></pre></div><h2 id="设置-settings" tabindex="-1">设置（settings） <a class="header-anchor" href="#设置-settings" aria-label="Permalink to &quot;设置（settings）&quot;">​</a></h2><blockquote><p>这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。 下表描述了设置中各项设置的含义、默认值等。</p></blockquote><table tabindex="0"><thead><tr><th>设置名</th><th>描述</th><th>有效值</th><th>默认值</th></tr></thead><tbody><tr><td>cacheEnabled</td><td>全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。</td><td>true, false</td><td>true</td></tr><tr><td>lazyLoadingEnabled</td><td>延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态。</td><td>true, false</td><td>false</td></tr><tr><td>aggressiveLazyLoading</td><td>开启时，任一方法的调用都会加载该对象的所有延迟加载属性。 否则，每个延迟加载属性会按需加载（参考 lazyLoadTriggerMethods)。</td><td>true, false</td><td>false （在 3.4.1 及之前的版本中默认为 true）</td></tr><tr><td>multipleResultSetsEnabled</td><td>是否允许单个语句返回多结果集（需要数据库驱动支持）。</td><td>true, false</td><td>true</td></tr><tr><td>useColumnLabel</td><td>使用列标签代替列名。实际表现依赖于数据库驱动，具体可参考数据库驱动的相关文档，或通过对比测试来观察。 true, false</td><td>true</td><td></td></tr><tr><td>useGeneratedKeys</td><td>允许 JDBC 支持自动生成主键，需要数据库驱动支持。如果设置为 true，将强制使用自动生成主键。尽管一些数据库驱动不支持此特性，但仍可正常工作（如 Derby）。</td><td>true, false</td><td>False</td></tr><tr><td>autoMappingBehavior</td><td>指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示关闭自动映射；PARTIAL 只会自动映射没有定义嵌套结果映射的字段。 FULL 会自动映射任何复杂的结果集（无论是否嵌套）。</td><td>NONE, PARTIAL, FULL</td><td>PARTIAL</td></tr><tr><td>autoMappingUnknownColumnBehavior</td><td>指定发现自动映射目标未知列（或未知属性类型）的行为。NONE: 不做任何反应;WARNING: 输出警告日志（&#39;org.apache.ibatis.session.AutoMappingUnknownColumnBehavior&#39; 的日志等级必须设置为 WARN;FAILING: 映射失败 (抛出 SqlSessionException)</td><td>NONE, WARNING, FAILING</td><td>NONE</td></tr><tr><td>defaultExecutorType</td><td>配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（PreparedStatement）； BATCH 执行器不仅重用语句还会执行批量更新。</td><td>SIMPLE REUSE BATCH</td><td>SIMPLE</td></tr><tr><td>defaultStatementTimeout</td><td>设置超时时间，它决定数据库驱动等待数据库响应的秒数。</td><td>任意正整数</td><td>未设置 (null)</td></tr><tr><td>defaultFetchSize</td><td>为驱动的结果集获取数量（fetchSize）设置一个建议值。此参数只可以在查询设置中被覆盖。</td><td>任意正整数</td><td>未设置 (null)</td></tr><tr><td>defaultResultSetType</td><td>指定语句默认的滚动策略。（新增于 3.5.2）</td><td>FORWARD_ONLY,SCROLL_SENSITIVE,SCROLL_INSENSITIVE, DEFAULT（等同于未设置）</td><td>未设置 (null)</td></tr><tr><td>safeRowBoundsEnabled</td><td>是否允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为 false。</td><td>true, false</td><td>False</td></tr><tr><td>safeResultHandlerEnabled</td><td>是否允许在嵌套语句中使用结果处理器（ResultHandler）。如果允许使用则设置为 false。 true, false</td><td>True</td><td></td></tr><tr><td>mapUnderscoreToCamelCase</td><td>是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn。 true, false</td><td>False</td><td></td></tr><tr><td>localCacheScope</td><td>MyBatis 利用本地缓存机制（Local Cache）防止循环引用和加速重复的嵌套查询。 默认值为 SESSION，会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地缓存将仅用于执行语句，对相同 SqlSession 的不同查询将不会进行缓存。</td><td>SESSION,STATEMENT</td><td>SESSION</td></tr><tr><td>jdbcTypeForNull</td><td>当没有为参数指定特定的 JDBC 类型时，空值的默认 JDBC 类型。 某些数据库驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。</td><td>JdbcType 常量，常用值：NULL、VARCHAR 或 OTHER。</td><td>OTHER</td></tr><tr><td>lazyLoadTriggerMethods 指定对象的哪些方法触发一次延迟加载。</td><td>用逗号分隔的方法列表。</td><td>equals,clone,hashCode,toString</td><td></td></tr><tr><td>defaultScriptingLanguage</td><td>指定动态 SQL 生成使用的默认脚本语言。</td><td>一个类型别名或全限定类名。</td><td>org.apache.ibatis.scripting.xmltags.XMLLanguageDriver</td></tr><tr><td>defaultEnumTypeHandler</td><td>指定 Enum 使用的默认 TypeHandler 。（新增于 3.4.5）</td><td>一个类型别名或全限定类名。</td><td>org.apache.ibatis.type.EnumTypeHandler</td></tr><tr><td>callSettersOnNulls</td><td>指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这在依赖于 Map.keySet() 或 null 值进行初始化时比较有用。注意基本类型（int、boolean 等）是不能设置成 null 的。</td><td>true, false</td><td>false</td></tr><tr><td>returnInstanceForEmptyRow</td><td>当返回行的所有列都是空时，MyBatis默认返回 null。 当开启这个设置时，MyBatis会返回一个空实例。 请注意，它也适用于嵌套的结果集（如集合或关联）。（新增于 3.4.2）</td><td>true, false</td><td>false</td></tr><tr><td>logPrefix</td><td>指定 MyBatis 增加到日志名称的前缀。</td><td>任何字符串</td><td>未设置</td></tr><tr><td>logImpl</td><td>指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</td><td>SLF4J,LOG4J, LOG4J2, JDK_LOGGING, COMMONS_LOGGING,STDOUT_LOGGING,NO_LOGGING</td><td>未设置</td></tr><tr><td>proxyFactory 指定 Mybatis 创建可延迟加载对象所用到的代理工具。</td><td>CGLIB ,JAVASSIST</td><td>JAVASSIST （MyBatis 3.3 以上）</td><td></td></tr><tr><td>vfsImpl</td><td>指定 VFS 的实现</td><td>自定义 VFS 的实现的类全限定名，以逗号分隔。</td><td>未设置</td></tr><tr><td>useActualParamName</td><td>允许使用方法签名中的名称作为语句参数名称。 为了使用该特性，你的项目必须采用 Java 8 编译，并且加上 -parameters 选项。（新增于 3.4.1）</td><td>true, false</td><td>true</td></tr><tr><td>configurationFactory</td><td>指定一个提供 Configuration 实例的类。 这个被返回的 Configuration 实例用来加载被反序列化对象的延迟加载属性值。 这个类必须包含一个签名为static Configuration getConfiguration() 的方法。（新增于 3.2.3）</td><td>一个类型别名或完全限定类名。</td><td>未设置</td></tr><tr><td>shrinkWhitespacesInSql</td><td>Removes extra whitespace characters from the SQL. Note that this also affects literal strings in SQL. (Since 3.5.5)</td><td>true, false</td><td>false</td></tr></tbody></table><p>一个配置完整的 settings 元素的示例如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;settings&gt;</span></span>
<span class="line"><span>  &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;</span></span>
<span class="line"><span>  &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;</span></span>
<span class="line"><span>  &lt;setting name=&quot;multipleResultSetsEnabled&quot; value=&quot;true&quot;/&gt;</span></span>
<span class="line"><span>  &lt;setting name=&quot;useColumnLabel&quot; value=&quot;true&quot;/&gt;</span></span>
<span class="line"><span>  &lt;setting name=&quot;useGeneratedKeys&quot; value=&quot;false&quot;/&gt;</span></span>
<span class="line"><span>  &lt;setting name=&quot;autoMappingBehavior&quot; value=&quot;PARTIAL&quot;/&gt;</span></span>
<span class="line"><span>  &lt;setting name=&quot;autoMappingUnknownColumnBehavior&quot; value=&quot;WARNING&quot;/&gt;</span></span>
<span class="line"><span>  &lt;setting name=&quot;defaultExecutorType&quot; value=&quot;SIMPLE&quot;/&gt;</span></span>
<span class="line"><span>  &lt;setting name=&quot;defaultStatementTimeout&quot; value=&quot;25&quot;/&gt;</span></span>
<span class="line"><span>  &lt;setting name=&quot;defaultFetchSize&quot; value=&quot;100&quot;/&gt;</span></span>
<span class="line"><span>  &lt;setting name=&quot;safeRowBoundsEnabled&quot; value=&quot;false&quot;/&gt;</span></span>
<span class="line"><span>  &lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;false&quot;/&gt;</span></span>
<span class="line"><span>  &lt;setting name=&quot;localCacheScope&quot; value=&quot;SESSION&quot;/&gt;</span></span>
<span class="line"><span>  &lt;setting name=&quot;jdbcTypeForNull&quot; value=&quot;OTHER&quot;/&gt;</span></span>
<span class="line"><span>  &lt;setting name=&quot;lazyLoadTriggerMethods&quot; value=&quot;equals,clone,hashCode,toString&quot;/&gt;</span></span>
<span class="line"><span>&lt;/settings&gt;</span></span></code></pre></div><h2 id="类型别名-typealiases" tabindex="-1">类型别名（typeAliases） <a class="header-anchor" href="#类型别名-typealiases" aria-label="Permalink to &quot;类型别名（typeAliases）&quot;">​</a></h2><p>类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写。例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;typeAliases&gt;</span></span>
<span class="line"><span>  &lt;typeAlias alias=&quot;Author&quot; type=&quot;domain.blog.Author&quot;/&gt;</span></span>
<span class="line"><span>  &lt;typeAlias alias=&quot;Blog&quot; type=&quot;domain.blog.Blog&quot;/&gt;</span></span>
<span class="line"><span>  &lt;typeAlias alias=&quot;Comment&quot; type=&quot;domain.blog.Comment&quot;/&gt;</span></span>
<span class="line"><span>  &lt;typeAlias alias=&quot;Post&quot; type=&quot;domain.blog.Post&quot;/&gt;</span></span>
<span class="line"><span>  &lt;typeAlias alias=&quot;Section&quot; type=&quot;domain.blog.Section&quot;/&gt;</span></span>
<span class="line"><span>  &lt;typeAlias alias=&quot;Tag&quot; type=&quot;domain.blog.Tag&quot;/&gt;</span></span>
<span class="line"><span>&lt;/typeAliases&gt;</span></span></code></pre></div><p>当这样配置时，Blog 可以用在任何使用 domain.blog.Blog 的地方。</p><p>也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;typeAliases&gt;</span></span>
<span class="line"><span>  &lt;package name=&quot;domain.blog&quot;/&gt;</span></span>
<span class="line"><span>&lt;/typeAliases&gt;</span></span></code></pre></div><p>每一个在包 domain.blog 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。 比如 domain.blog.Author 的别名为 author；若有注解，则别名为其注解值。见下面的例子：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@Alias(&quot;author&quot;)</span></span>
<span class="line"><span>public class Author {</span></span>
<span class="line"><span>    ...</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>下面是一些为常见的 Java 类型内建的类型别名。它们都是不区分大小写的，注意，为了应对原始类型的命名重复，采取了特殊的命名风格。</p><table tabindex="0"><thead><tr><th>别名</th><th>映射的类型</th></tr></thead><tbody><tr><td>_byte</td><td>byte</td></tr><tr><td>_long</td><td>long</td></tr><tr><td>_short</td><td>short</td></tr><tr><td>_int</td><td>int</td></tr><tr><td>_integer</td><td>int</td></tr><tr><td>_double</td><td>double</td></tr><tr><td>_float</td><td>float</td></tr><tr><td>_boolean</td><td>boolean</td></tr><tr><td>string</td><td>String</td></tr><tr><td>byte</td><td>Byte</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>integer</td><td>Integer</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>boolean</td><td>Boolean</td></tr><tr><td>date</td><td>Date</td></tr><tr><td>decimal</td><td>BigDecimal</td></tr><tr><td>bigdecimal</td><td>BigDecimal</td></tr><tr><td>object</td><td>Object</td></tr><tr><td>map</td><td>Map</td></tr><tr><td>hashmap</td><td>HashMap</td></tr><tr><td>list</td><td>List</td></tr><tr><td>arraylist</td><td>ArrayList</td></tr><tr><td>collection</td><td>Collection</td></tr><tr><td>iterator</td><td>Iterator</td></tr></tbody></table><h2 id="类型处理器-typehandlers" tabindex="-1">类型处理器（typeHandlers） <a class="header-anchor" href="#类型处理器-typehandlers" aria-label="Permalink to &quot;类型处理器（typeHandlers）&quot;">​</a></h2><p>MyBatis 在设置预处理语句（PreparedStatement）中的参数或从结果集中取出一个值时， 都会用类型处理器将获取到的值以合适的方式转换成 Java 类型。下表描述了一些默认的类型处理器。</p><blockquote><p>从 3.4.5 开始，MyBatis 默认支持 JSR-310（日期和时间 API） 。</p></blockquote><table tabindex="0"><thead><tr><th>类型处理器</th><th>Java 类型</th><th>JDBC类型</th></tr></thead><tbody><tr><td>BooleanTypeHandler</td><td>java.lang.Boolean, boolean</td><td>数据库兼容的 BOOLEAN</td></tr><tr><td>ByteTypeHandler</td><td>java.lang.Byte, byte</td><td>数据库兼容的 NUMERIC 或 BYTE</td></tr><tr><td>ShortTypeHandler</td><td>java.lang.Short, short</td><td>数据库兼容的 NUMERIC 或 SMALLINT</td></tr><tr><td>IntegerTypeHandler</td><td>java.lang.Integer, int</td><td>数据库兼容的 NUMERIC 或 INTEGER</td></tr><tr><td>LongTypeHandler</td><td>java.lang.Long, long</td><td>数据库兼容的 NUMERIC 或 BIGINT</td></tr><tr><td>FloatTypeHandler</td><td>java.lang.Float, float</td><td>数据库兼容的 NUMERIC 或 FLOAT</td></tr><tr><td>DoubleTypeHandler</td><td>java.lang.Double, double</td><td>数据库兼容的 NUMERIC 或 DOUBLE</td></tr><tr><td>BigDecimalTypeHandler</td><td>java.math.BigDecimal</td><td>数据库兼容的 NUMERIC 或 DECIMAL</td></tr><tr><td>StringTypeHandler</td><td>java.lang.String</td><td>CHAR, VARCHAR</td></tr><tr><td>ClobReaderTypeHandler</td><td>java.io.Reader</td><td>-</td></tr><tr><td>ClobTypeHandler</td><td>java.lang.String</td><td>CLOB, LONGVARCHAR</td></tr><tr><td>NStringTypeHandler</td><td>java.lang.String</td><td>NVARCHAR, NCHAR</td></tr><tr><td>NClobTypeHandler</td><td>java.lang.String</td><td>NCLOB</td></tr><tr><td>BlobInputStreamTypeHandler</td><td>java.io.InputStream</td><td>-</td></tr><tr><td>ByteArrayTypeHandler</td><td>byte[]</td><td>数据库兼容的字节流类型</td></tr><tr><td>BlobTypeHandler</td><td>byte[] BLOB,</td><td>LONGVARBINARY</td></tr><tr><td>DateTypeHandler</td><td>java.util.Date</td><td>TIMESTAMP</td></tr><tr><td>DateOnlyTypeHandler</td><td>java.util.Date</td><td>DATE</td></tr><tr><td>TimeOnlyTypeHandler</td><td>java.util.Date</td><td>TIME</td></tr><tr><td>SqlTimestampTypeHandler</td><td>java.sql.Timestamp</td><td>TIMESTAMP</td></tr><tr><td>SqlDateTypeHandler</td><td>java.sql.Date</td><td>DATE</td></tr><tr><td>SqlTimeTypeHandler</td><td>java.sql.Time</td><td>TIME</td></tr><tr><td>ObjectTypeHandler</td><td>Any</td><td>OTHER 或未指定类型</td></tr><tr><td>EnumTypeHandler</td><td>Enumeration Type</td><td>VARCHAR 或任何兼容的字符串类型，用来存储枚举的名称（而不是索引序数值）</td></tr><tr><td>EnumOrdinalTypeHandler</td><td>Enumeration Type</td><td>任何兼容的 NUMERIC 或 DOUBLE 类型，用来存储枚举的序数值（而不是名称）。</td></tr><tr><td>SqlxmlTypeHandler</td><td>java.lang.String</td><td>SQLXML</td></tr><tr><td>InstantTypeHandler</td><td>java.time.Instant</td><td>TIMESTAMP</td></tr><tr><td>LocalDateTimeTypeHandler</td><td>java.time.LocalDateTime</td><td>TIMESTAMP</td></tr><tr><td>LocalDateTypeHandler</td><td>java.time.LocalDate</td><td>DATE</td></tr><tr><td>LocalTimeTypeHandler</td><td>java.time.LocalTime</td><td>TIME</td></tr><tr><td>OffsetDateTimeTypeHandler</td><td>java.time.OffsetDateTime</td><td>TIMESTAMP</td></tr><tr><td>OffsetTimeTypeHandler</td><td>java.time.OffsetTime</td><td>TIME</td></tr><tr><td>ZonedDateTimeTypeHandler</td><td>java.time.ZonedDateTime</td><td>TIMESTAMP</td></tr><tr><td>YearTypeHandler</td><td>java.time.Year</td><td>INTEGER</td></tr><tr><td>MonthTypeHandler</td><td>java.time.Month</td><td>INTEGER</td></tr><tr><td>YearMonthTypeHandler</td><td>java.time.YearMonth</td><td>VARCHAR 或 LONGVARCHAR</td></tr><tr><td>JapaneseDateTypeHandler</td><td>java.time.chrono.JapaneseDate</td><td>DATE</td></tr></tbody></table><p>你可以重写已有的类型处理器或创建你自己的类型处理器来处理不支持的或非标准的类型。 具体做法为：实现 org.apache.ibatis.type.TypeHandler 接口， 或继承一个很便利的类 org.apache.ibatis.type.BaseTypeHandler， 并且可以（可选地）将它映射到一个 JDBC 类型。比如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// ExampleTypeHandler.java</span></span>
<span class="line"><span>@MappedJdbcTypes(JdbcType.VARCHAR)</span></span>
<span class="line"><span>public class ExampleTypeHandler extends BaseTypeHandler&lt;String&gt; {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  @Override</span></span>
<span class="line"><span>  public void setNonNullParameter(PreparedStatement ps, int i, String parameter, JdbcType jdbcType) throws SQLException {</span></span>
<span class="line"><span>    ps.setString(i, parameter);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  @Override</span></span>
<span class="line"><span>  public String getNullableResult(ResultSet rs, String columnName) throws SQLException {</span></span>
<span class="line"><span>    return rs.getString(columnName);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  @Override</span></span>
<span class="line"><span>  public String getNullableResult(ResultSet rs, int columnIndex) throws SQLException {</span></span>
<span class="line"><span>    return rs.getString(columnIndex);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  @Override</span></span>
<span class="line"><span>  public String getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {</span></span>
<span class="line"><span>    return cs.getString(columnIndex);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;!-- mybatis-config.xml --&gt;</span></span>
<span class="line"><span>&lt;typeHandlers&gt;</span></span>
<span class="line"><span>  &lt;typeHandler handler=&quot;org.mybatis.example.ExampleTypeHandler&quot;/&gt;</span></span>
<span class="line"><span>&lt;/typeHandlers&gt;</span></span></code></pre></div><p>使用上述的类型处理器将会覆盖已有的处理 Java String 类型的属性以及 VARCHAR 类型的参数和结果的类型处理器。 要注意 MyBatis 不会通过检测数据库元信息来决定使用哪种类型，所以你必须在参数和结果映射中指明字段是 VARCHAR 类型， 以使其能够绑定到正确的类型处理器上。这是因为 MyBatis 直到语句被执行时才清楚数据类型。</p><p>通过类型处理器的泛型，MyBatis 可以得知该类型处理器处理的 Java 类型，不过这种行为可以通过两种方法改变：</p><ul><li>在类型处理器的配置元素（typeHandler 元素）上增加一个 javaType 属性（比如：javaType=&quot;String&quot;）；</li><li>在类型处理器的类上增加一个 @MappedTypes 注解指定与其关联的 Java 类型列表。 如果在 javaType 属性中也同时指定，则注解上的配置将被忽略。</li></ul><p>可以通过两种方式来指定关联的 JDBC 类型：</p><ul><li>在类型处理器的配置元素上增加一个 jdbcType 属性（比如：jdbcType=&quot;VARCHAR&quot;）；</li><li>在类型处理器的类上增加一个 @MappedJdbcTypes 注解指定与其关联的 JDBC 类型列表。 如果在 jdbcType 属性中也同时指定，则注解上的配置将被忽略。</li></ul><p>当在 ResultMap 中决定使用哪种类型处理器时，此时 Java 类型是已知的（从结果类型中获得），但是 JDBC 类型是未知的。 因此 Mybatis 使用 javaType=[Java 类型], jdbcType=null 的组合来选择一个类型处理器。 这意味着使用 @MappedJdbcTypes 注解可以限制类型处理器的作用范围，并且可以确保，除非显式地设置，否则类型处理器在 ResultMap 中将不会生效。 如果希望能在 ResultMap 中隐式地使用类型处理器，那么设置 @MappedJdbcTypes 注解的 includeNullJdbcType=true 即可。 然而从 Mybatis 3.4.0 开始，如果某个 Java 类型只有一个注册的类型处理器，即使没有设置 includeNullJdbcType=true，那么这个类型处理器也会是 ResultMap 使用 Java 类型时的默认处理器。</p><p>最后，可以让 MyBatis 帮你查找类型处理器：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;!-- mybatis-config.xml --&gt;</span></span>
<span class="line"><span>&lt;typeHandlers&gt;</span></span>
<span class="line"><span>  &lt;package name=&quot;org.mybatis.example&quot;/&gt;</span></span>
<span class="line"><span>&lt;/typeHandlers&gt;</span></span></code></pre></div><p>注意在使用自动发现功能的时候，只能通过注解方式来指定 JDBC 的类型。</p><p>你可以创建能够处理多个类的泛型类型处理器。为了使用泛型类型处理器， 需要增加一个接受该类的 class 作为参数的构造器，这样 MyBatis 会在构造一个类型处理器实例的时候传入一个具体的类。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>//GenericTypeHandler.java</span></span>
<span class="line"><span>public class GenericTypeHandler&lt;E extends MyObject&gt; extends BaseTypeHandler&lt;E&gt; {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  private Class&lt;E&gt; type;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  public GenericTypeHandler(Class&lt;E&gt; type) {</span></span>
<span class="line"><span>    if (type == null) throw new IllegalArgumentException(&quot;Type argument cannot be null&quot;);</span></span>
<span class="line"><span>    this.type = type;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  ...</span></span></code></pre></div><p>EnumTypeHandler 和 EnumOrdinalTypeHandler 都是泛型类型处理器，我们将会在接下来的部分详细探讨。</p><h2 id="处理枚举类型" tabindex="-1">处理枚举类型 <a class="header-anchor" href="#处理枚举类型" aria-label="Permalink to &quot;处理枚举类型&quot;">​</a></h2><p>若想映射枚举类型 Enum，则需要从 EnumTypeHandler 或者 EnumOrdinalTypeHandler 中选择一个来使用。</p><p>比如说我们想存储取近似值时用到的舍入模式。默认情况下，MyBatis 会利用 EnumTypeHandler 来把 Enum 值转换成对应的名字。</p><blockquote><p>注意 EnumTypeHandler 在某种意义上来说是比较特别的，其它的处理器只针对某个特定的类，而它不同，它会处理任意继承了 Enum 的类。</p></blockquote><p>不过，我们可能不想存储名字，相反我们的 DBA 会坚持使用整形值代码。那也一样简单：在配置文件中把 EnumOrdinalTypeHandler 加到 typeHandlers 中即可， 这样每个 RoundingMode 将通过他们的序数值来映射成对应的整形数值。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;!-- mybatis-config.xml --&gt;</span></span>
<span class="line"><span>&lt;typeHandlers&gt;</span></span>
<span class="line"><span>  &lt;typeHandler handler=&quot;org.apache.ibatis.type.EnumOrdinalTypeHandler&quot; javaType=&quot;java.math.RoundingMode&quot;/&gt;</span></span>
<span class="line"><span>&lt;/typeHandlers&gt;</span></span></code></pre></div><p>但要是你想在一个地方将 Enum 映射成字符串，在另外一个地方映射成整形值呢？</p><p>自动映射器（auto-mapper）会自动地选用 EnumOrdinalTypeHandler 来处理枚举类型， 所以如果我们想用普通的 EnumTypeHandler，就必须要显式地为那些 SQL 语句设置要使用的类型处理器。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;!DOCTYPE mapper</span></span>
<span class="line"><span>    PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span>
<span class="line"><span>    &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;mapper namespace=&quot;org.apache.ibatis.submitted.rounding.Mapper&quot;&gt;</span></span>
<span class="line"><span>	&lt;resultMap type=&quot;org.apache.ibatis.submitted.rounding.User&quot; id=&quot;usermap&quot;&gt;</span></span>
<span class="line"><span>		&lt;id column=&quot;id&quot; property=&quot;id&quot;/&gt;</span></span>
<span class="line"><span>		&lt;result column=&quot;name&quot; property=&quot;name&quot;/&gt;</span></span>
<span class="line"><span>		&lt;result column=&quot;funkyNumber&quot; property=&quot;funkyNumber&quot;/&gt;</span></span>
<span class="line"><span>		&lt;result column=&quot;roundingMode&quot; property=&quot;roundingMode&quot;/&gt;</span></span>
<span class="line"><span>	&lt;/resultMap&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	&lt;select id=&quot;getUser&quot; resultMap=&quot;usermap&quot;&gt;</span></span>
<span class="line"><span>		select * from users</span></span>
<span class="line"><span>	&lt;/select&gt;</span></span>
<span class="line"><span>	&lt;insert id=&quot;insert&quot;&gt;</span></span>
<span class="line"><span>	    insert into users (id, name, funkyNumber, roundingMode) values (</span></span>
<span class="line"><span>	    	#{id}, #{name}, #{funkyNumber}, #{roundingMode}</span></span>
<span class="line"><span>	    )</span></span>
<span class="line"><span>	&lt;/insert&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	&lt;resultMap type=&quot;org.apache.ibatis.submitted.rounding.User&quot; id=&quot;usermap2&quot;&gt;</span></span>
<span class="line"><span>		&lt;id column=&quot;id&quot; property=&quot;id&quot;/&gt;</span></span>
<span class="line"><span>		&lt;result column=&quot;name&quot; property=&quot;name&quot;/&gt;</span></span>
<span class="line"><span>		&lt;result column=&quot;funkyNumber&quot; property=&quot;funkyNumber&quot;/&gt;</span></span>
<span class="line"><span>		&lt;result column=&quot;roundingMode&quot; property=&quot;roundingMode&quot; typeHandler=&quot;org.apache.ibatis.type.EnumTypeHandler&quot;/&gt;</span></span>
<span class="line"><span>	&lt;/resultMap&gt;</span></span>
<span class="line"><span>	&lt;select id=&quot;getUser2&quot; resultMap=&quot;usermap2&quot;&gt;</span></span>
<span class="line"><span>		select * from users2</span></span>
<span class="line"><span>	&lt;/select&gt;</span></span>
<span class="line"><span>	&lt;insert id=&quot;insert2&quot;&gt;</span></span>
<span class="line"><span>	    insert into users2 (id, name, funkyNumber, roundingMode) values (</span></span>
<span class="line"><span>	    	#{id}, #{name}, #{funkyNumber}, #{roundingMode, typeHandler=org.apache.ibatis.type.EnumTypeHandler}</span></span>
<span class="line"><span>	    )</span></span>
<span class="line"><span>	&lt;/insert&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;/mapper&gt;</span></span></code></pre></div><blockquote><p>注意，这里的 select 语句必须指定 resultMap 而不是 resultType。</p></blockquote><h2 id="对象工厂-objectfactory" tabindex="-1">对象工厂（objectFactory） <a class="header-anchor" href="#对象工厂-objectfactory" aria-label="Permalink to &quot;对象工厂（objectFactory）&quot;">​</a></h2><p>每次 MyBatis 创建结果对象的新实例时，它都会使用一个对象工厂（ObjectFactory）实例来完成实例化工作。 默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认无参构造方法，要么通过存在的参数映射来调用带有参数的构造方法。 如果想覆盖对象工厂的默认行为，可以通过创建自己的对象工厂来实现。比如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// ExampleObjectFactory.java</span></span>
<span class="line"><span>public class ExampleObjectFactory extends DefaultObjectFactory {</span></span>
<span class="line"><span>  public Object create(Class type) {</span></span>
<span class="line"><span>    return super.create(type);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  public Object create(Class type, List&lt;Class&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs) {</span></span>
<span class="line"><span>    return super.create(type, constructorArgTypes, constructorArgs);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  public void setProperties(Properties properties) {</span></span>
<span class="line"><span>    super.setProperties(properties);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  public &lt;T&gt; boolean isCollection(Class&lt;T&gt; type) {</span></span>
<span class="line"><span>    return Collection.class.isAssignableFrom(type);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;!-- mybatis-config.xml --&gt;</span></span>
<span class="line"><span>&lt;objectFactory type=&quot;org.mybatis.example.ExampleObjectFactory&quot;&gt;</span></span>
<span class="line"><span>  &lt;property name=&quot;someProperty&quot; value=&quot;100&quot;/&gt;</span></span>
<span class="line"><span>&lt;/objectFactory&gt;</span></span></code></pre></div><p>ObjectFactory 接口很简单，它包含两个创建实例用的方法，一个是处理默认无参构造方法的，另外一个是处理带参数的构造方法的。 另外，setProperties 方法可以被用来配置 ObjectFactory，在初始化你的 ObjectFactory 实例后， objectFactory 元素体中定义的属性会被传递给 setProperties 方法。</p><h2 id="插件-plugins" tabindex="-1">插件（plugins） <a class="header-anchor" href="#插件-plugins" aria-label="Permalink to &quot;插件（plugins）&quot;">​</a></h2><p>MyBatis 允许你在映射语句执行过程中的某一点进行拦截调用。默认情况下，MyBatis 允许使用插件来拦截的方法调用包括：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)</span></span>
<span class="line"><span>ParameterHandler (getParameterObject, setParameters)</span></span>
<span class="line"><span>ResultSetHandler (handleResultSets, handleOutputParameters)</span></span>
<span class="line"><span>StatementHandler (prepare, parameterize, batch, update, query)</span></span></code></pre></div><p>这些类中方法的细节可以通过查看每个方法的签名来发现，或者直接查看 MyBatis 发行包中的源代码。 如果你想做的不仅仅是监控方法的调用，那么你最好相当了解要重写的方法的行为。 因为在试图修改或重写已有方法的行为时，很可能会破坏 MyBatis 的核心模块。 这些都是更底层的类和方法，所以使用插件的时候要特别当心。</p><p>通过 MyBatis 提供的强大机制，使用插件是非常简单的，只需实现 Interceptor 接口，并指定想要拦截的方法签名即可。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// ExamplePlugin.java</span></span>
<span class="line"><span>@Intercepts({@Signature(</span></span>
<span class="line"><span>  type= Executor.class,</span></span>
<span class="line"><span>  method = &quot;update&quot;,</span></span>
<span class="line"><span>  args = {MappedStatement.class,Object.class})})</span></span>
<span class="line"><span>public class ExamplePlugin implements Interceptor {</span></span>
<span class="line"><span>  private Properties properties = new Properties();</span></span>
<span class="line"><span>  public Object intercept(Invocation invocation) throws Throwable {</span></span>
<span class="line"><span>    // implement pre processing if need</span></span>
<span class="line"><span>    Object returnObject = invocation.proceed();</span></span>
<span class="line"><span>    // implement post processing if need</span></span>
<span class="line"><span>    return returnObject;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  public void setProperties(Properties properties) {</span></span>
<span class="line"><span>    this.properties = properties;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;!-- mybatis-config.xml --&gt;</span></span>
<span class="line"><span>&lt;plugins&gt;</span></span>
<span class="line"><span>  &lt;plugin interceptor=&quot;org.mybatis.example.ExamplePlugin&quot;&gt;</span></span>
<span class="line"><span>    &lt;property name=&quot;someProperty&quot; value=&quot;100&quot;/&gt;</span></span>
<span class="line"><span>  &lt;/plugin&gt;</span></span>
<span class="line"><span>&lt;/plugins&gt;</span></span></code></pre></div><p>上面的插件将会拦截在 Executor 实例中所有的 “update” 方法调用， 这里的 Executor 是负责执行底层映射语句的内部对象。</p><blockquote><p>覆盖配置类: 除了用插件来修改 MyBatis 核心行为以外，还可以通过完全覆盖配置类来达到目的。只需继承配置类后覆盖其中的某个方法，再把它传递到 SqlSessionFactoryBuilder.build(myConfig) 方法即可。再次重申，这可能会极大影响 MyBatis 的行为，务请慎之又慎。</p></blockquote><h2 id="环境配置-environments" tabindex="-1">环境配置（environments） <a class="header-anchor" href="#环境配置-environments" aria-label="Permalink to &quot;环境配置（environments）&quot;">​</a></h2><p>MyBatis 可以配置成适应多种环境，这种机制有助于将 SQL 映射应用于多种数据库之中， 现实情况下有多种理由需要这么做。例如，开发、测试和生产环境需要有不同的配置；或者想在具有相同 Schema 的多个生产数据库中使用相同的 SQL 映射。还有许多类似的使用场景。</p><blockquote><p>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</p></blockquote><p>所以，如果你想连接两个数据库，就需要创建两个 SqlSessionFactory 实例，每个数据库对应一个。而如果是三个数据库，就需要三个实例，依此类推，记起来很简单：</p><ul><li>每个数据库对应一个 SqlSessionFactory 实例</li></ul><p>为了指定创建哪种环境，只要将它作为可选的参数传递给 SqlSessionFactoryBuilder 即可。可以接受环境配置的两个方法签名是：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, environment);</span></span>
<span class="line"><span>SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, environment, properties);</span></span></code></pre></div><p>如果忽略了环境参数，那么将会加载默认环境，如下所示：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader);</span></span>
<span class="line"><span>SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, properties);</span></span></code></pre></div><p>environments 元素定义了如何配置环境。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;environments default=&quot;development&quot;&gt;</span></span>
<span class="line"><span>  &lt;environment id=&quot;development&quot;&gt;</span></span>
<span class="line"><span>    &lt;transactionManager type=&quot;JDBC&quot;&gt;</span></span>
<span class="line"><span>      &lt;property name=&quot;...&quot; value=&quot;...&quot;/&gt;</span></span>
<span class="line"><span>    &lt;/transactionManager&gt;</span></span>
<span class="line"><span>    &lt;dataSource type=&quot;POOLED&quot;&gt;</span></span>
<span class="line"><span>      &lt;property name=&quot;driver&quot; value=&quot;\${driver}&quot;/&gt;</span></span>
<span class="line"><span>      &lt;property name=&quot;url&quot; value=&quot;\${url}&quot;/&gt;</span></span>
<span class="line"><span>      &lt;property name=&quot;username&quot; value=&quot;\${username}&quot;/&gt;</span></span>
<span class="line"><span>      &lt;property name=&quot;password&quot; value=&quot;\${password}&quot;/&gt;</span></span>
<span class="line"><span>    &lt;/dataSource&gt;</span></span>
<span class="line"><span>  &lt;/environment&gt;</span></span>
<span class="line"><span>&lt;/environments&gt;</span></span></code></pre></div><p>注意一些关键点:</p><ul><li>默认使用的环境 ID（比如：default=&quot;development&quot;）。</li><li>每个 environment 元素定义的环境 ID（比如：id=&quot;development&quot;）。</li><li>事务管理器的配置（比如：type=&quot;JDBC&quot;）。</li><li>数据源的配置（比如：type=&quot;POOLED&quot;）。</li><li>默认环境和环境 ID 顾名思义。 环境可以随意命名，但务必保证默认的环境 ID 要匹配其中一个环境 ID。</li></ul><h2 id="事务管理器-transactionmanager" tabindex="-1">事务管理器（transactionManager） <a class="header-anchor" href="#事务管理器-transactionmanager" aria-label="Permalink to &quot;事务管理器（transactionManager）&quot;">​</a></h2><p>在 MyBatis 中有两种类型的事务管理器（也就是 <code>type=&quot;[JDBC|MANAGED]&quot;</code>）：</p><ul><li><strong>JDBC</strong> – 这个配置直接使用了 JDBC 的提交和回滚设施，它依赖从数据源获得的连接来管理事务作用域。</li><li><strong>MANAGED</strong> – 这个配置几乎没做什么。它从不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。 默认情况下它会关闭连接。然而一些容器并不希望连接被关闭，因此需要将 closeConnection 属性设置为 false 来阻止默认的关闭行为。例如:</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;transactionManager type=&quot;MANAGED&quot;&gt;</span></span>
<span class="line"><span>  &lt;property name=&quot;closeConnection&quot; value=&quot;false&quot;/&gt;</span></span>
<span class="line"><span>&lt;/transactionManager&gt;</span></span></code></pre></div><blockquote><p>如果你正在使用 Spring + MyBatis，则没有必要配置事务管理器，因为 Spring 模块会使用自带的管理器来覆盖前面的配置。</p></blockquote><p>这两种事务管理器类型都不需要设置任何属性。它们其实是类型别名，换句话说，你可以用 TransactionFactory 接口实现类的全限定名或类型别名代替它们。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>public interface TransactionFactory {</span></span>
<span class="line"><span>  default void setProperties(Properties props) { // 从 3.5.2 开始，该方法为默认方法</span></span>
<span class="line"><span>    // 空实现</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  Transaction newTransaction(Connection conn);</span></span>
<span class="line"><span>  Transaction newTransaction(DataSource dataSource, TransactionIsolationLevel level, boolean autoCommit);</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>在事务管理器实例化后，所有在 XML 中配置的属性将会被传递给 setProperties() 方法。你的实现还需要创建一个 Transaction 接口的实现类，这个接口也很简单：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>public interface Transaction {</span></span>
<span class="line"><span>  Connection getConnection() throws SQLException;</span></span>
<span class="line"><span>  void commit() throws SQLException;</span></span>
<span class="line"><span>  void rollback() throws SQLException;</span></span>
<span class="line"><span>  void close() throws SQLException;</span></span>
<span class="line"><span>  Integer getTimeout() throws SQLException;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>使用这两个接口，你可以完全自定义 MyBatis 对事务的处理。</p><h2 id="数据源-datasource" tabindex="-1">数据源（dataSource） <a class="header-anchor" href="#数据源-datasource" aria-label="Permalink to &quot;数据源（dataSource）&quot;">​</a></h2><p>dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源。</p><p>大多数 MyBatis 应用程序会按示例中的例子来配置数据源。虽然数据源配置是可选的，但如果要启用延迟加载特性，就必须配置数据源。 有三种内建的数据源类型（也就是 <code>type=&quot;[UNPOOLED|POOLED|JNDI]&quot;</code>）：</p><h3 id="unpooled" tabindex="-1">UNPOOLED <a class="header-anchor" href="#unpooled" aria-label="Permalink to &quot;UNPOOLED&quot;">​</a></h3><p>这个数据源的实现会每次请求时打开和关闭连接。虽然有点慢，但对那些数据库连接可用性要求不高的简单应用程序来说，是一个很好的选择。 性能表现则依赖于使用的数据库，对某些数据库来说，使用连接池并不重要，这个配置就很适合这种情形。UNPOOLED 类型的数据源仅仅需要配置以下 5 种属性：</p><ul><li>driver – 这是 JDBC 驱动的 Java 类全限定名（并不是 JDBC 驱动中可能包含的数据源类）。</li><li>url – 这是数据库的 JDBC URL 地址。</li><li>username – 登录数据库的用户名。</li><li>password – 登录数据库的密码。</li><li>defaultTransactionIsolationLevel – 默认的连接事务隔离级别。</li><li>defaultNetworkTimeout – 等待数据库操作完成的默认网络超时时间（单位：毫秒）。查看 java.sql.Connection#setNetworkTimeout() 的 API 文档以获取更多信息。</li></ul><p>作为可选项，你也可以传递属性给数据库驱动。只需在属性名加上“driver.”前缀即可，例如：</p><ul><li>driver.encoding=UTF8</li></ul><p>这将通过 DriverManager.getConnection(url, driverProperties) 方法传递值为 UTF8 的 encoding 属性给数据库驱动。</p><h3 id="pooled" tabindex="-1">POOLED <a class="header-anchor" href="#pooled" aria-label="Permalink to &quot;POOLED&quot;">​</a></h3><p>这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，避免了创建新的连接实例时所必需的初始化和认证时间。 这种处理方式很流行，能使并发 Web 应用快速响应请求。</p><p>除了上述提到 UNPOOLED 下的属性外，还有更多属性用来配置 POOLED 的数据源：</p><ul><li>poolMaximumActiveConnections – 在任意时间可存在的活动（正在使用）连接数量，默认值：10</li><li>poolMaximumIdleConnections – 任意时间可能存在的空闲连接数。</li><li>poolMaximumCheckoutTime – 在被强制返回之前，池中连接被检出（checked out）时间，默认值：20000 毫秒（即 20 秒）</li><li>poolTimeToWait – 这是一个底层设置，如果获取连接花费了相当长的时间，连接池会打印状态日志并重新尝试获取一个连接（避免在误配置的情况下一直失败且不打印日志），默认值：20000 毫秒（即 20 秒）。</li><li>poolMaximumLocalBadConnectionTolerance – 这是一个关于坏连接容忍度的底层设置， 作用于每一个尝试从缓存池获取连接的线程。 如果这个线程获取到的是一个坏的连接，那么这个数据源允许这个线程尝试重新获取一个新的连接，但是这个重新尝试的次数不应该超过 poolMaximumIdleConnections 与 poolMaximumLocalBadConnectionTolerance 之和。 默认值：3（新增于 3.4.5）</li><li>poolPingQuery – 发送到数据库的侦测查询，用来检验连接是否正常工作并准备接受请求。默认是“NO PING QUERY SET”，这会导致多数数据库驱动出错时返回恰当的错误消息。</li><li>poolPingEnabled – 是否启用侦测查询。若开启，需要设置 poolPingQuery 属性为一个可执行的 SQL 语句（最好是一个速度非常快的 SQL 语句），默认值：false。</li><li>poolPingConnectionsNotUsedFor – 配置 poolPingQuery 的频率。可以被设置为和数据库连接超时时间一样，来避免不必要的侦测，默认值：0（即所有连接每一时刻都被侦测 — 当然仅当 poolPingEnabled 为 true 时适用）。</li></ul><h3 id="jndi" tabindex="-1">JNDI <a class="header-anchor" href="#jndi" aria-label="Permalink to &quot;JNDI&quot;">​</a></h3><p>这个数据源实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的数据源引用。这种数据源配置只需要两个属性：</p><ul><li>initial_context – 这个属性用来在 InitialContext 中寻找上下文（即，initialContext.lookup(initial_context)）。这是个可选属性，如果忽略，那么将会直接从 InitialContext 中寻找 data_source 属性。</li><li>data_source – 这是引用数据源实例位置的上下文路径。提供了 initial_context 配置时会在其返回的上下文中进行查找，没有提供时则直接在 InitialContext 中查找。</li></ul><p>和其他数据源配置类似，可以通过添加前缀“env.”直接把属性传递给 InitialContext。比如：</p><ul><li>env.encoding=UTF8</li></ul><p>这就会在 InitialContext 实例化时往它的构造方法传递值为 UTF8 的 encoding 属性。</p><p>你可以通过实现接口 org.apache.ibatis.datasource.DataSourceFactory 来使用第三方数据源实现：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>public interface DataSourceFactory {</span></span>
<span class="line"><span>  void setProperties(Properties props);</span></span>
<span class="line"><span>  DataSource getDataSource();</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>org.apache.ibatis.datasource.unpooled.UnpooledDataSourceFactory 可被用作父类来构建新的数据源适配器，比如下面这段插入 C3P0 数据源所必需的代码：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import org.apache.ibatis.datasource.unpooled.UnpooledDataSourceFactory;</span></span>
<span class="line"><span>import com.mchange.v2.c3p0.ComboPooledDataSource;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>public class C3P0DataSourceFactory extends UnpooledDataSourceFactory {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  public C3P0DataSourceFactory() {</span></span>
<span class="line"><span>    this.dataSource = new ComboPooledDataSource();</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>为了令其工作，记得在配置文件中为每个希望 MyBatis 调用的 setter 方法增加对应的属性。 下面是一个可以连接至 PostgreSQL 数据库的例子：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;dataSource type=&quot;org.myproject.C3P0DataSourceFactory&quot;&gt;</span></span>
<span class="line"><span>  &lt;property name=&quot;driver&quot; value=&quot;org.postgresql.Driver&quot;/&gt;</span></span>
<span class="line"><span>  &lt;property name=&quot;url&quot; value=&quot;jdbc:postgresql:mydb&quot;/&gt;</span></span>
<span class="line"><span>  &lt;property name=&quot;username&quot; value=&quot;postgres&quot;/&gt;</span></span>
<span class="line"><span>  &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;</span></span>
<span class="line"><span>&lt;/dataSource&gt;</span></span></code></pre></div><h2 id="数据库厂商标识-databaseidprovider" tabindex="-1">数据库厂商标识（databaseIdProvider） <a class="header-anchor" href="#数据库厂商标识-databaseidprovider" aria-label="Permalink to &quot;数据库厂商标识（databaseIdProvider）&quot;">​</a></h2><p>MyBatis 可以根据不同的数据库厂商执行不同的语句，这种多厂商的支持是基于映射语句中的 databaseId 属性。 MyBatis 会加载带有匹配当前数据库 databaseId 属性和所有不带 databaseId 属性的语句。 如果同时找到带有 databaseId 和不带 databaseId 的相同语句，则后者会被舍弃。 为支持多厂商特性，只要像下面这样在 mybatis-config.xml 文件中加入 databaseIdProvider 即可：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;databaseIdProvider type=&quot;DB_VENDOR&quot; /&gt;</span></span></code></pre></div><p>databaseIdProvider 对应的 DB_VENDOR 实现会将 databaseId 设置为 DatabaseMetaData#getDatabaseProductName() 返回的字符串。 由于通常情况下这些字符串都非常长，而且相同产品的不同版本会返回不同的值，你可能想通过设置属性别名来使其变短：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;databaseIdProvider type=&quot;DB_VENDOR&quot;&gt;</span></span>
<span class="line"><span>  &lt;property name=&quot;SQL Server&quot; value=&quot;sqlserver&quot;/&gt;</span></span>
<span class="line"><span>  &lt;property name=&quot;DB2&quot; value=&quot;db2&quot;/&gt;</span></span>
<span class="line"><span>  &lt;property name=&quot;Oracle&quot; value=&quot;oracle&quot; /&gt;</span></span>
<span class="line"><span>&lt;/databaseIdProvider&gt;</span></span></code></pre></div><p>在提供了属性别名时，databaseIdProvider 的 DB_VENDOR 实现会将 databaseId 设置为数据库产品名与属性中的名称第一个相匹配的值，如果没有匹配的属性，将会设置为 “null”。 在这个例子中，如果 getDatabaseProductName() 返回“Oracle (DataDirect)”，databaseId 将被设置为“oracle”。</p><p>你可以通过实现接口 org.apache.ibatis.mapping.DatabaseIdProvider 并在 mybatis-config.xml 中注册来构建自己的 DatabaseIdProvider：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>public interface DatabaseIdProvider {</span></span>
<span class="line"><span>  default void setProperties(Properties p) { // 从 3.5.2 开始，该方法为默认方法</span></span>
<span class="line"><span>    // 空实现</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  String getDatabaseId(DataSource dataSource) throws SQLException;</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="映射器-mappers" tabindex="-1">映射器（mappers） <a class="header-anchor" href="#映射器-mappers" aria-label="Permalink to &quot;映射器（mappers）&quot;">​</a></h2><p>既然 MyBatis 的行为已经由上述元素配置完了，我们现在就要来定义 SQL 映射语句了。 但首先，我们需要告诉 MyBatis 到哪里去找到这些语句。 在自动查找资源方面，Java 并没有提供一个很好的解决方案，所以最好的办法是直接告诉 MyBatis 到哪里去找映射文件。 你可以使用相对于类路径的资源引用，或完全限定资源定位符（包括 file:/// 形式的 URL），或类名和包名等。例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;!-- 使用相对于类路径的资源引用 --&gt;</span></span>
<span class="line"><span>&lt;mappers&gt;</span></span>
<span class="line"><span>  &lt;mapper resource=&quot;org/mybatis/builder/AuthorMapper.xml&quot;/&gt;</span></span>
<span class="line"><span>  &lt;mapper resource=&quot;org/mybatis/builder/BlogMapper.xml&quot;/&gt;</span></span>
<span class="line"><span>  &lt;mapper resource=&quot;org/mybatis/builder/PostMapper.xml&quot;/&gt;</span></span>
<span class="line"><span>&lt;/mappers&gt;</span></span>
<span class="line"><span>&lt;!-- 使用完全限定资源定位符（URL） --&gt;</span></span>
<span class="line"><span>&lt;mappers&gt;</span></span>
<span class="line"><span>  &lt;mapper url=&quot;file:///var/mappers/AuthorMapper.xml&quot;/&gt;</span></span>
<span class="line"><span>  &lt;mapper url=&quot;file:///var/mappers/BlogMapper.xml&quot;/&gt;</span></span>
<span class="line"><span>  &lt;mapper url=&quot;file:///var/mappers/PostMapper.xml&quot;/&gt;</span></span>
<span class="line"><span>&lt;/mappers&gt;</span></span>
<span class="line"><span>&lt;!-- 使用映射器接口实现类的完全限定类名 --&gt;</span></span>
<span class="line"><span>&lt;mappers&gt;</span></span>
<span class="line"><span>  &lt;mapper class=&quot;org.mybatis.builder.AuthorMapper&quot;/&gt;</span></span>
<span class="line"><span>  &lt;mapper class=&quot;org.mybatis.builder.BlogMapper&quot;/&gt;</span></span>
<span class="line"><span>  &lt;mapper class=&quot;org.mybatis.builder.PostMapper&quot;/&gt;</span></span>
<span class="line"><span>&lt;/mappers&gt;</span></span>
<span class="line"><span>&lt;!-- 将包内的映射器接口实现全部注册为映射器 --&gt;</span></span>
<span class="line"><span>&lt;mappers&gt;</span></span>
<span class="line"><span>  &lt;package name=&quot;org.mybatis.builder&quot;/&gt;</span></span>
<span class="line"><span>&lt;/mappers&gt;</span></span></code></pre></div><p>这些配置会告诉 MyBatis 去哪里找映射文件，剩下的细节就应该是每个 SQL 映射文件了，也就是接下来我们要讨论的。</p><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>`,143)]))}const b=t(p,[["render",l]]);export{g as __pageData,b as default};
