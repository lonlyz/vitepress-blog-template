import{_ as e}from"./chunks/tomcat-x-design-2-1.DoncdYAn.js";import{_ as a}from"./chunks/tomcat-x-start-1.Cdb8mF_w.js";import{_ as r,c as l,ai as o,o as c}from"./chunks/framework.BrYByd3F.js";const b=JSON.parse('{"title":"♥Tomcat源码详解知识体系详解♥","description":"","frontmatter":{},"headers":[],"relativePath":"framework/tomcat/tomcat-overview.md","filePath":"framework/tomcat/tomcat-overview.md","lastUpdated":1737706346000}'),i={name:"framework/tomcat/tomcat-overview.md"};function m(n,t,h,s,p,f){return c(),l("div",null,t[0]||(t[0]=[o('<h1 id="♥tomcat源码详解知识体系详解♥" tabindex="-1">♥Tomcat源码详解知识体系详解♥ <a class="header-anchor" href="#♥tomcat源码详解知识体系详解♥" aria-label="Permalink to &quot;♥Tomcat源码详解知识体系详解♥&quot;">​</a></h1><blockquote><p>本系列主要对Tomcat源码知识体系进行深入理解。</p></blockquote><h2 id="知识体系" tabindex="-1">知识体系 <a class="header-anchor" href="#知识体系" aria-label="Permalink to &quot;知识体系&quot;">​</a></h2><p><em>结构图</em></p><p><img src="'+e+'" alt="error.图片加载失败"></p><p><em>初始化和启动流程</em></p><p><img src="'+a+'" alt="error.图片加载失败"></p><p><em>相关文章</em></p><ul><li><a href="https://pdai.tech/md/framework/tomcat/tomcat-x-design-web-container.html" target="_blank" rel="noreferrer">Tomcat - 如何设计一个简单的web容器</a><ul><li>在学习Tomcat前，很多人先入为主的对它的认知是巨复杂的；所以第一步，在学习它之前，要打破这种观念，我们通过学习如何设计一个最基本的web容器来看它需要考虑什么；进而在真正学习Tomcat时，多把重点放在它的顶层设计上，而不是某一块代码上, 思路永远比具体实现重要的多。</li></ul></li><li><a href="https://pdai.tech/md/framework/tomcat/tomcat-x-arch.html" target="_blank" rel="noreferrer">Tomcat - 理解Tomcat架构设计</a><ul><li>前文我们已经介绍了一个简单的Servlet容器是如何设计出来，我们就可以开始正式学习Tomcat了，在学习开始，我们有必要站在高点去看看Tomcat的架构设计。</li></ul></li><li><a href="https://pdai.tech/md/framework/tomcat/tomcat-x-sourcecode.html" target="_blank" rel="noreferrer">Tomcat - 源码分析准备和分析入口</a><ul><li>上文我们介绍了Tomcat的架构设计，接下来我们便可以下载源码以及寻找源码入口了。</li></ul></li><li><a href="https://pdai.tech/md/framework/tomcat/tomcat-x-start.html" target="_blank" rel="noreferrer">Tomcat - 启动过程：初始化和启动流程</a><ul><li>在有了Tomcat架构设计和源码入口以后，我们便可以开始真正读源码了。</li></ul></li><li><a href="https://pdai.tech/md/framework/tomcat/tomcat-x-classloader.html" target="_blank" rel="noreferrer">Tomcat - 启动过程:类加载机制详解</a><ul><li>上文我们讲了Tomcat在初始化时会初始化classLoader。本文将具体分析Tomcat的类加载机制，特别是区别于传统的<code>双亲委派模型</code>的加载机制。</li></ul></li><li><a href="https://pdai.tech/md/framework/tomcat/tomcat-x-catalina.html" target="_blank" rel="noreferrer">Tomcat - 启动过程:Catalina的加载</a><ul><li>通过前两篇文章，我们知道了<a href="https://pdai.tech/md/framework/tomcat/tomcat-x-classloader.html" target="_blank" rel="noreferrer">Tomcat的类加载机制</a>和<a href="https://pdai.tech/md/framework/tomcat/tomcat-x-start.html" target="_blank" rel="noreferrer">整体的组件加载流程</a>；我们也知道通过Bootstrap初始化的catalinaClassLoader加载了Catalina，那么进而引入了一个问题就是Catalina是如何加载的呢？加载了什么呢？本文将带你进一步分析。</li></ul></li><li><a href="https://pdai.tech/md/framework/tomcat/tomcat-x-lifecycle.html" target="_blank" rel="noreferrer">Tomcat - 组件生命周期管理:LifeCycle</a><ul><li>上文中，我们已经知道Catalina初始化了Server（它调用了 Server 类的 init 和 start 方法来启动 Tomcat）；你会发现Server是Tomcat的配置文件server.xml的顶层元素，那这个阶段其实我们已经进入到Tomcat内部组件的详解；这时候有一个问题，这么多组件是如何管理它的生命周期的呢？</li></ul></li><li><a href="https://pdai.tech/md/framework/tomcat/tomcat-x-jmx.html" target="_blank" rel="noreferrer">Tomcat - 组件拓展管理:JMX和MBean</a><ul><li>我们在前文中讲Lifecycle以及组件，怎么会突然讲JMX和MBean呢？本文通过承接上文Lifecycle讲Tomcat基于JMX的实现。</li></ul></li><li><a href="https://pdai.tech/md/framework/tomcat/tomcat-x-listener.html" target="_blank" rel="noreferrer">Tomcat - 事件的监听机制：观察者模式</a><ul><li>本文承接上文中Lifecycle中实现，引出Tomcat的监听机制。</li></ul></li><li><a href="https://pdai.tech/md/framework/tomcat/tomcat-x-server.html" target="_blank" rel="noreferrer">Tomcat - Server的设计和实现: StandardServer</a><ul><li>基于前面的几篇文章，我们终于可以总体上梳理Server的具体实现了，这里体现在StandardServer具体的功能实现上。</li></ul></li><li><a href="https://pdai.tech/md/framework/tomcat/tomcat-x-service.html" target="_blank" rel="noreferrer">Tomcat - Service的设计和实现: StandardService</a><ul><li>上文讲了Server的具体实现了，本文主要讲Service的设计和实现；我们从上文其实已经知道Server中包含多个service了。</li></ul></li><li><a href="https://pdai.tech/md/framework/tomcat/tomcat-x-executor.html" target="_blank" rel="noreferrer">Tomcat - 线程池的设计与实现：StandardThreadExecutor</a><ul><li>上文中我们研究了下Service的设计和实现，StandardService中包含Executor的调用；这个比较好理解，Tomcat需要并发处理用户的请求，自然而言就想到线程池，那么Tomcat中线程池（Executor）具体是如何实现的？本文带你继续深度解析。</li></ul></li><li><a href="https://pdai.tech/md/framework/tomcat/tomcat-x-container.html" target="_blank" rel="noreferrer">Tomcat - Request请求处理: Container设计</a><ul><li>在理解了Server，Service和Executor后，我们可以进入Request处理环节了。我们知道客户端是可以发起多个请求的，Tomcat也是可以支持多个webapp的，有多个上下文，且一个webapp中可以有多个Servlet...等等，那么Tomcat是如何设计组件来支撑请求处理的呢？本节文将介绍Tomcat的Container设计。</li></ul></li><li><a href="https://pdai.tech/md/framework/tomcat/tomcat-x-container-engine.html" target="_blank" rel="noreferrer">Tomcat - Container容器之Engine：StandardEngine</a><ul><li>上文已经知道Container的整体结构和设计，其中Engine其实就是Servlet Engine，负责处理request的顶层容器。</li></ul></li><li><a href="https://pdai.tech/md/framework/tomcat/tomcat-x-container-pipline.html" target="_blank" rel="noreferrer">Tomcat - Container的管道机制：责任链模式</a><ul><li>上文中介绍了Engine的设计，其中有Pipline相关内容没有介绍，本文将向你阐述Tomcat的管道机制以及它要解决的问题。</li></ul></li><li><a href="https://pdai.tech/md/framework/tomcat/tomcat-x-connector.html" target="_blank" rel="noreferrer">Tomcat - Request请求处理过程：Connector</a><ul><li>本文主要介绍request请求的处理过程。</li></ul></li></ul><h2 id="参考文章" tabindex="-1">参考文章 <a class="header-anchor" href="#参考文章" aria-label="Permalink to &quot;参考文章&quot;">​</a></h2><ul><li>Tomcat - 如何设计一个最简单的web容器 <ul><li><a href="https://segmentfault.com/q/1010000024466207?utm%5C_source=tag-newest" target="_blank" rel="noreferrer">https://segmentfault.com/q/1010000024466207?utm\\_source=tag-newest</a></li><li><a href="https://www.jianshu.com/p/e438d2f1e4c2" target="_blank" rel="noreferrer">https://www.jianshu.com/p/e438d2f1e4c2</a></li></ul></li><li>Tomcat整体架构 <ul><li><a href="https://www.jianshu.com/p/2b6359daf5c8" target="_blank" rel="noreferrer">https://www.jianshu.com/p/2b6359daf5c8</a></li><li><a href="https://www.jianshu.com/p/8b7f81bd5e26" target="_blank" rel="noreferrer">https://www.jianshu.com/p/8b7f81bd5e26</a></li><li><a href="https://www.cnblogs.com/wangjiming/p/12519306.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/wangjiming/p/12519306.html</a></li><li><a href="https://www.cnblogs.com/tanshaoshenghao/p/10932306.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/tanshaoshenghao/p/10932306.html</a></li></ul></li><li>Tomcat源码下载和源码入口 <ul><li><a href="https://tomcat.apache.org/download-90.cgi" target="_blank" rel="noreferrer">https://tomcat.apache.org/download-90.cgi</a></li><li><a href="https://www.cnblogs.com/tanshaoshenghao/p/10932306.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/tanshaoshenghao/p/10932306.html</a></li></ul></li><li>Tomcat - Tomcat启动过程：Bootstrap和Catina详解 <ul><li><a href="https://www.jianshu.com/p/2ec610e923ff" target="_blank" rel="noreferrer">https://www.jianshu.com/p/2ec610e923ff</a></li></ul></li><li>Tomcat - Tomcat启动过程：Tomcat中类加载 <ul><li><a href="https://www.jianshu.com/p/51b2c50c58eb" target="_blank" rel="noreferrer">https://www.jianshu.com/p/51b2c50c58eb</a></li><li><a href="https://www.jianshu.com/p/abf6fd4531e7" target="_blank" rel="noreferrer">https://www.jianshu.com/p/abf6fd4531e7</a></li></ul></li><li>Tomcat - Tomcat启动过程：生命周期Lifecycle <ul><li><a href="https://www.jianshu.com/p/2a9ffbd00724" target="_blank" rel="noreferrer">https://www.jianshu.com/p/2a9ffbd00724</a></li></ul></li><li>Tomcat - Tomcat启动过程：组件管理JMX <ul><li><a href="https://www.jianshu.com/p/d417f308f4f5" target="_blank" rel="noreferrer">https://www.jianshu.com/p/d417f308f4f5</a></li></ul></li><li>Tomcat - 连接器Connector详解 <ul><li><a href="https://www.jianshu.com/p/f67f613ebc79" target="_blank" rel="noreferrer">https://www.jianshu.com/p/f67f613ebc79</a></li></ul></li><li>Tomcat - 请求过程详解 <ul><li><a href="https://www.jianshu.com/p/857baa251902" target="_blank" rel="noreferrer">https://www.jianshu.com/p/857baa251902</a></li></ul></li><li>Tomcat - 设计模式 <ul><li><a href="https://developer.ibm.com/zh/articles/j-lo-tomcat2/" target="_blank" rel="noreferrer">https://developer.ibm.com/zh/articles/j-lo-tomcat2/</a></li><li><a href="https://blog.csdn.net/Allen202/article/details/91346855" target="_blank" rel="noreferrer">https://blog.csdn.net/Allen202/article/details/91346855</a></li></ul></li></ul><p>系列</p><ul><li><p><a href="https://www.jianshu.com/p/c74d2df8bc8a" target="_blank" rel="noreferrer">https://www.jianshu.com/p/c74d2df8bc8a</a></p></li><li><p><a href="https://www.jianshu.com/nb/18936835" target="_blank" rel="noreferrer">https://www.jianshu.com/nb/18936835</a></p></li><li><p><a href="https://segmentfault.com/u/keguan/articles" target="_blank" rel="noreferrer">https://segmentfault.com/u/keguan/articles</a></p></li></ul><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>',14)]))}const g=r(i,[["render",m]]);export{b as __pageData,g as default};
