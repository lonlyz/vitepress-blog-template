import{_ as e,c as t,ai as l,o as r}from"./chunks/framework.BrYByd3F.js";const i="/vitepress-blog-template/images/java_collections_overview.png",b=JSON.parse('{"title":"Collection 类关系图","description":"","frontmatter":{},"headers":[],"relativePath":"java/collection/java-collection-all.md","filePath":"java/collection/java-collection-all.md","lastUpdated":1737706346000}'),o={name:"java/collection/java-collection-all.md"};function h(n,a,s,c,d,p){return r(),t("div",null,a[0]||(a[0]=[l('<h1 id="collection-类关系图" tabindex="-1">Collection 类关系图 <a class="header-anchor" href="#collection-类关系图" aria-label="Permalink to &quot;Collection 类关系图&quot;">​</a></h1><blockquote><p>本文主要介绍JDK中Collection和Map相关知识体系，后续章节将对主要对类进行源码解读。@pdai</p></blockquote><h2 id="知识体系结构" tabindex="-1">知识体系结构 <a class="header-anchor" href="#知识体系结构" aria-label="Permalink to &quot;知识体系结构&quot;">​</a></h2><p><img src="'+i+'" alt="error.图片加载失败"></p><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><p>容器，就是可以容纳其他Java对象的对象。*Java Collections Framework(JCF)*为Java开发者提供了通用的容器，其始于JDK 1.2，优点是:</p><ul><li>降低编程难度</li><li>提高程序性能</li><li>提高API间的互操作性</li><li>降低学习难度</li><li>降低设计和实现相关API的难度</li><li>增加程序的重用性</li></ul><p>Java容器里只能放对象，对于基本类型(int, long, float, double等)，需要将其包装成对象类型后(Integer, Long, Float, Double等)才能放到容器里。很多时候拆包装和解包装能够自动完成。这虽然会导致额外的性能和空间开销，但简化了设计和编程。</p><h2 id="collection" tabindex="-1">Collection <a class="header-anchor" href="#collection" aria-label="Permalink to &quot;Collection&quot;">​</a></h2><blockquote><p>容器主要包括 Collection 和 Map 两种，Collection 存储着对象的集合，而 Map 存储着键值对(两个对象)的映射表。</p></blockquote><h3 id="set" tabindex="-1">Set <a class="header-anchor" href="#set" aria-label="Permalink to &quot;Set&quot;">​</a></h3><h4 id="treeset" tabindex="-1">TreeSet <a class="header-anchor" href="#treeset" aria-label="Permalink to &quot;TreeSet&quot;">​</a></h4><p>基于红黑树实现，支持有序性操作，例如根据一个范围查找元素的操作。但是查找效率不如 HashSet，HashSet 查找的时间复杂度为 O(1)，TreeSet 则为 O(logN)。</p><h4 id="hashset" tabindex="-1">HashSet <a class="header-anchor" href="#hashset" aria-label="Permalink to &quot;HashSet&quot;">​</a></h4><p>基于哈希表实现，支持快速查找，但不支持有序性操作。并且失去了元素的插入顺序信息，也就是说使用 Iterator 遍历 HashSet 得到的结果是不确定的。</p><h4 id="linkedhashset" tabindex="-1">LinkedHashSet <a class="header-anchor" href="#linkedhashset" aria-label="Permalink to &quot;LinkedHashSet&quot;">​</a></h4><p>具有 HashSet 的查找效率，且内部使用双向链表维护元素的插入顺序。</p><h3 id="list" tabindex="-1">List <a class="header-anchor" href="#list" aria-label="Permalink to &quot;List&quot;">​</a></h3><h4 id="arraylist" tabindex="-1">ArrayList <a class="header-anchor" href="#arraylist" aria-label="Permalink to &quot;ArrayList&quot;">​</a></h4><p>基于动态数组实现，支持随机访问。</p><h4 id="vector" tabindex="-1">Vector <a class="header-anchor" href="#vector" aria-label="Permalink to &quot;Vector&quot;">​</a></h4><p>和 ArrayList 类似，但它是线程安全的。</p><h4 id="linkedlist" tabindex="-1">LinkedList <a class="header-anchor" href="#linkedlist" aria-label="Permalink to &quot;LinkedList&quot;">​</a></h4><p>基于双向链表实现，只能顺序访问，但是可以快速地在链表中间插入和删除元素。不仅如此，LinkedList 还可以用作栈、队列和双向队列。</p><h3 id="queue" tabindex="-1">Queue <a class="header-anchor" href="#queue" aria-label="Permalink to &quot;Queue&quot;">​</a></h3><h4 id="linkedlist-1" tabindex="-1">LinkedList <a class="header-anchor" href="#linkedlist-1" aria-label="Permalink to &quot;LinkedList&quot;">​</a></h4><p>可以用它来实现双向队列。</p><h4 id="priorityqueue" tabindex="-1">PriorityQueue <a class="header-anchor" href="#priorityqueue" aria-label="Permalink to &quot;PriorityQueue&quot;">​</a></h4><p>基于堆结构实现，可以用它来实现优先队列。</p><h2 id="map" tabindex="-1">Map <a class="header-anchor" href="#map" aria-label="Permalink to &quot;Map&quot;">​</a></h2><h3 id="treemap" tabindex="-1">TreeMap <a class="header-anchor" href="#treemap" aria-label="Permalink to &quot;TreeMap&quot;">​</a></h3><p>基于红黑树实现。</p><h3 id="hashmap" tabindex="-1">HashMap <a class="header-anchor" href="#hashmap" aria-label="Permalink to &quot;HashMap&quot;">​</a></h3><p>基于哈希表实现。</p><h3 id="hashtable" tabindex="-1">HashTable <a class="header-anchor" href="#hashtable" aria-label="Permalink to &quot;HashTable&quot;">​</a></h3><p>和 HashMap 类似，但它是线程安全的，这意味着同一时刻多个线程可以同时写入 HashTable 并且不会导致数据不一致。它是遗留类，不应该去使用它。现在可以使用 ConcurrentHashMap 来支持线程安全，并且 ConcurrentHashMap 的效率会更高，因为 ConcurrentHashMap 引入了分段锁。</p><h3 id="linkedhashmap" tabindex="-1">LinkedHashMap <a class="header-anchor" href="#linkedhashmap" aria-label="Permalink to &quot;LinkedHashMap&quot;">​</a></h3><p>使用双向链表来维护元素的顺序，顺序为插入顺序或者最近最少使用(LRU)顺序。</p><h2 id="参考内容" tabindex="-1">参考内容 <a class="header-anchor" href="#参考内容" aria-label="Permalink to &quot;参考内容&quot;">​</a></h2><ul><li>CarpenterLee/JCFInternals <a href="https://github.com/CarpenterLee/JCFInternals" target="_blank" rel="noreferrer">https://github.com/CarpenterLee/JCFInternals</a></li></ul><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>',41)]))}const q=e(o,[["render",h]]);export{b as __pageData,q as default};
