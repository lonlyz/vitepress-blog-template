import{_ as e}from"./chunks/DP-Decorator-java.io.8q2eIUDI.js";import{_ as t,c as r,ai as p,o as n}from"./chunks/framework.BrYByd3F.js";const i="/vitepress-blog-template/images/pics/137c593d-0a9e-47b8-a9e6-b71f540b82dd.png",f=JSON.parse('{"title":"Java IO - 设计模式(装饰者模式)","description":"","frontmatter":{},"headers":[],"relativePath":"java/io/java-io-basic-design-pattern.md","filePath":"java/io/java-io-basic-design-pattern.md","lastUpdated":1737706346000}'),o={name:"java/io/java-io-basic-design-pattern.md"};function s(l,a,d,c,m,h){return n(),r("div",null,a[0]||(a[0]=[p('<h1 id="java-io-设计模式-装饰者模式" tabindex="-1">Java IO - 设计模式(装饰者模式) <a class="header-anchor" href="#java-io-设计模式-装饰者模式" aria-label="Permalink to &quot;Java IO - 设计模式(装饰者模式)&quot;">​</a></h1><blockquote><p>Java I/O 使用了装饰者模式来实现。@pdai</p></blockquote><h2 id="装饰者模式" tabindex="-1">装饰者模式 <a class="header-anchor" href="#装饰者模式" aria-label="Permalink to &quot;装饰者模式&quot;">​</a></h2><p>请参考<a href="https://pdai.tech/md/dev-spec/pattern/12_decorator.html" target="_blank" rel="noreferrer">装饰者模式详解</a></p><p>装饰者(Decorator)和具体组件(ConcreteComponent)都继承自组件(Component)，具体组件的方法实现不需要依赖于其它对象，而装饰者组合了一个组件，这样它可以装饰其它装饰者或者具体组件。所谓装饰，就是把这个装饰者套在被装饰者之上，从而动态扩展被装饰者的功能。装饰者的方法有一部分是自己的，这属于它的功能，然后调用被装饰者的方法实现，从而也保留了被装饰者的功能。可以看到，具体组件应当是装饰层次的最低层，因为只有具体组件的方法实现不需要依赖于其它对象。</p><p><img src="'+i+'" alt="error.图片加载失败"></p><h2 id="io-装饰者模式" tabindex="-1">IO 装饰者模式 <a class="header-anchor" href="#io-装饰者模式" aria-label="Permalink to &quot;IO 装饰者模式&quot;">​</a></h2><p>以 InputStream 为例，</p><p><img src="'+e+`" alt="image"></p><p>实例化一个具有缓存功能的字节流对象时，只需要在 FileInputStream 对象上再套一层 BufferedInputStream 对象即可。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>FileInputStream fileInputStream = new FileInputStream(filePath);</span></span>
<span class="line"><span>BufferedInputStream bufferedInputStream = new BufferedInputStream(fileInputStream);</span></span></code></pre></div><p>DataInputStream 装饰者提供了对更多数据类型进行输入的操作，比如 int、double 等基本类型。</p><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>`,13)]))}const b=t(o,[["render",s]]);export{f as __pageData,b as default};
