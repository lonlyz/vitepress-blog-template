import{_ as e,c as t,ai as l,o as i}from"./chunks/framework.BrYByd3F.js";const r="/vitepress-blog-template/images/io/java-io-overview2.png",b=JSON.parse('{"title":"♥Java IO知识体系详解♥","description":"","frontmatter":{},"headers":[],"relativePath":"java/io/java-io-overview.md","filePath":"java/io/java-io-overview.md","lastUpdated":1737706346000}'),n={name:"java/io/java-io-overview.md"};function o(s,a,p,d,h,c){return i(),t("div",null,a[0]||(a[0]=[l('<h1 id="♥java-io知识体系详解♥" tabindex="-1">♥Java IO知识体系详解♥ <a class="header-anchor" href="#♥java-io知识体系详解♥" aria-label="Permalink to &quot;♥Java IO知识体系详解♥&quot;">​</a></h1><blockquote><p>本文主要梳理Java IO/NIO/AIO的知识体系。@pdai</p></blockquote><h2 id="知识体系" tabindex="-1">知识体系 <a class="header-anchor" href="#知识体系" aria-label="Permalink to &quot;知识体系&quot;">​</a></h2><p><img src="'+r+'" alt="error.图片加载失败"></p><h2 id="相关文章" tabindex="-1">相关文章 <a class="header-anchor" href="#相关文章" aria-label="Permalink to &quot;相关文章&quot;">​</a></h2><blockquote><p><strong>A. Java进阶 - IO框架之知识体系</strong>：首先了解下Java IO框架包含什么，同时推荐下如何学习IO框架。@pdai</p></blockquote><ul><li><a href="https://pdai.tech/md/java/io/java-io-overview.html" target="_blank" rel="noreferrer">Java IO/NIO/AIO - Overview</a><ul><li>本文主要梳理Java IO/NIO/AIO的知识体系</li></ul></li></ul><blockquote><p><strong>B. Java进阶 - IO框架之基础IO</strong>：其次对Java基础IO框架进行梳理，包括其分类，使用和源码详解。@pdai</p></blockquote><ul><li><a href="https://pdai.tech/md/java/io/java-io-basic-category.html" target="_blank" rel="noreferrer">Java IO - 分类(传输，操作)</a><ul><li>本文主要从<code>传输方式</code>和<code>数据操作</code>两个方面分析Java IO的分类</li></ul></li><li><a href="https://pdai.tech/md/java/io/java-io-basic-design-pattern.html" target="_blank" rel="noreferrer">Java IO - 设计模式(装饰者模式)</a><ul><li>Java I/O 使用了装饰者模式来实现</li></ul></li><li><a href="https://pdai.tech/md/java/io/java-io-basic-code-inputstream.html" target="_blank" rel="noreferrer">Java IO - 源码: InputStream</a><ul><li>本文主要从JDK源码角度分析InputStream</li></ul></li><li><a href="https://pdai.tech/md/java/io/java-io-basic-code-outputstream.html" target="_blank" rel="noreferrer">Java IO - 源码: OutputStream</a><ul><li>本文主要从JDK源码角度分析 OutputStream</li></ul></li><li><a href="https://pdai.tech/md/java/io/java-io-basic-usage.html" target="_blank" rel="noreferrer">Java IO - 常见类使用</a><ul><li>本文主要介绍Java IO常见类的使用，包括：磁盘操作，字节操作，字符操作，对象操作和网络操作</li></ul></li></ul><blockquote><p><strong>C. Java进阶 - IO框架之NIO/AIO等</strong>：然后再对Unix IO模型学习，引入到Java BIO/NIO/AIO相关知识详解。@pdai</p></blockquote><ul><li><a href="https://pdai.tech/md/java/io/java-io-model.html" target="_blank" rel="noreferrer">IO 模型 - Unix IO 模型</a><ul><li>本文主要简要介绍 Unix I/O 5种模型，并对5大模型比较，并重点为后续章节解释IO多路复用做铺垫</li></ul></li><li><a href="https://pdai.tech/md/java/io/java-io-bio.html" target="_blank" rel="noreferrer">Java IO - BIO 详解</a><ul><li>BIO就是: blocking IO。最容易理解、最容易实现的IO工作方式，应用程序向操作系统请求网络IO操作，这时应用程序会一直等待；另一方面，操作系统收到请求后，也会等待，直到网络上有数据传到监听端口；操作系统在收集数据后，会把数据发送给应用程序；最后应用程序受到数据，并解除等待状态</li></ul></li><li><a href="https://pdai.tech/md/java/io/java-io-nio.html" target="_blank" rel="noreferrer">Java NIO - 基础详解</a><ul><li>新的输入/输出 (NIO) 库是在 JDK 1.4 中引入的，弥补了原来的 I/O 的不足，提供了高速的、面向块的 I/O</li></ul></li><li><a href="https://pdai.tech/md/java/io/java-io-nio-select-epoll.html" target="_blank" rel="noreferrer">Java NIO - IO多路复用详解</a><ul><li>本文主要对IO多路复用，Ractor模型以及Java NIO对其的支持</li></ul></li><li><a href="https://pdai.tech/md/java/io/java-io-aio.html" target="_blank" rel="noreferrer">Java AIO - 异步IO详解</a><ul><li>本文主要对异步IO和Java中对AIO的支持详解。@pdai</li></ul></li></ul><blockquote><p><strong>D. Java进阶 - IO框架之开源框架</strong>：最后再对常用的开源框架进行分析和详解。@pdai</p></blockquote><ul><li><p><a href="https://pdai.tech/md/java/io/java-io-nio-zerocopy.html" target="_blank" rel="noreferrer">Java NIO - 零拷贝实现</a>这里转一篇Java NIO 零拷贝的实现文章，在此之前建议先理解什么是Linux中零拷贝，可以先看这篇文章。本文从源码着手分析了 Java NIO 对零拷贝的实现，主要包括基于内存映射（mmap）方式的 MappedByteBuffer 以及基于 sendfile 方式的 FileChannel。最后在篇末简单的阐述了一下 Netty 中的零拷贝机制，以及 RocketMQ 和 Kafka 两种消息队列在零拷贝实现方式上的区别。</p></li><li><p><a href="https://pdai.tech/md/java/io/java-io-nio-netty.html" target="_blank" rel="noreferrer">Java N(A)IO - 框架: Netty</a></p><ul><li>Netty是一个高性能、异步事件驱动的NIO框架，提供了对TCP、UDP和文件传输的支持。作为当前最流行的NIO框架，Netty在互联网领域、大数据分布式计算领域、游戏行业、通信行业等获得了广泛的应用，一些业界著名的开源组件也基于Netty构建，比如RPC框架、zookeeper等</li></ul></li></ul><h2 id="参考文章" tabindex="-1">参考文章 <a class="header-anchor" href="#参考文章" aria-label="Permalink to &quot;参考文章&quot;">​</a></h2><ul><li>Java 基础IO源码 <a href="https://blog.csdn.net/panweiwei1994/article/details/78046000" target="_blank" rel="noreferrer">https://blog.csdn.net/panweiwei1994/article/details/78046000</a></li><li>Linux 网络 I/O 模型简介(图文)<a href="https://blog.csdn.net/anxpp/article/details/51503329" target="_blank" rel="noreferrer">https://blog.csdn.net/anxpp/article/details/51503329</a></li><li>Java 网络IO编程总结(BIO、NIO、AIO均含完整实例代码) <a href="https://blog.csdn.net/anxpp/article/details/51512200" target="_blank" rel="noreferrer">https://blog.csdn.net/anxpp/article/details/51512200</a></li><li>Java 编程思想(八)BIO/NIO/AIO的具体实现 <a href="https://blog.csdn.net/KingCat666/article/details/77689627" target="_blank" rel="noreferrer">https://blog.csdn.net/KingCat666/article/details/77689627</a></li></ul><p>Java IO</p><ul><li>架构设计: 系统间通信(1)——概述从“聊天”开始上篇 <a href="https://blog.csdn.net/yinwenjie/article/list/6" target="_blank" rel="noreferrer">https://blog.csdn.net/yinwenjie/article/list/6</a>?</li><li><a href="https://blog.csdn.net/yinwenjie/article/details/48274255" target="_blank" rel="noreferrer">https://blog.csdn.net/yinwenjie/article/details/48274255</a></li><li><a href="https://blog.csdn.net/yinwenjie/article/details/48344989" target="_blank" rel="noreferrer">https://blog.csdn.net/yinwenjie/article/details/48344989</a></li><li><a href="https://blog.csdn.net/yinwenjie/article/details/48472237" target="_blank" rel="noreferrer">https://blog.csdn.net/yinwenjie/article/details/48472237</a></li><li><a href="https://blog.csdn.net/yinwenjie/article/details/48522403" target="_blank" rel="noreferrer">https://blog.csdn.net/yinwenjie/article/details/48522403</a></li><li><a href="https://blog.csdn.net/yinwenjie/article/details/48784375" target="_blank" rel="noreferrer">https://blog.csdn.net/yinwenjie/article/details/48784375</a></li></ul><p>Netty</p><ul><li><a href="https://blog.csdn.net/yinwenjie/article/details/48829419" target="_blank" rel="noreferrer">https://blog.csdn.net/yinwenjie/article/details/48829419</a></li><li><a href="https://blog.csdn.net/yinwenjie/article/details/48969853" target="_blank" rel="noreferrer">https://blog.csdn.net/yinwenjie/article/details/48969853</a></li><li><a href="https://blog.csdn.net/woaixiaopangniu521/article/details/70279143" target="_blank" rel="noreferrer">https://blog.csdn.net/woaixiaopangniu521/article/details/70279143</a></li></ul><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>',20)]))}const I=e(n,[["render",o]]);export{b as __pageData,I as default};
