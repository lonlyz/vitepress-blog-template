import{_ as e,c as n,ai as s,o as t}from"./chunks/framework.BrYByd3F.js";const r="/vitepress-blog-template/images/java/java8-javafx-1.png",b=JSON.parse('{"title":"Java 8 - JavaFx 2.0","description":"","frontmatter":{},"headers":[],"relativePath":"java/java8/java8-javafx.md","filePath":"java/java8/java8-javafx.md","lastUpdated":1737706346000}'),i={name:"java/java8/java8-javafx.md"};function l(p,a,o,c,h,d){return t(),n("div",null,a[0]||(a[0]=[s('<h1 id="java-8-javafx-2-0" tabindex="-1">Java 8 - JavaFx 2.0 <a class="header-anchor" href="#java-8-javafx-2-0" aria-label="Permalink to &quot;Java 8 - JavaFx 2.0&quot;">​</a></h1><blockquote><p>JavaFX主要致力于富客户端开发，以弥补swing的缺陷，主要提供图形库与media库，支持audio,video,graphics,animation,3D等，同时采用现代化的css方式支持界面设计。同时又采用XUI方式以XML方式设计UI界面，达到显示与逻辑的分离。与android这方面确实有点相似性。</p></blockquote><h2 id="javafx历史" tabindex="-1">JavaFX历史 <a class="header-anchor" href="#javafx历史" aria-label="Permalink to &quot;JavaFX历史&quot;">​</a></h2><p>跟java在服务器端和web端成绩相比，桌面一直是java的软肋，于是Sun公司在2008年推出JavaFX，弥补桌面软件的缺陷，请看下图JavaFX一路走过来的改进</p><p><img src="'+r+`" alt="error.图片加载失败"></p><p>从上图看出，一开始推出时候，开发者需使用一种名为JavaFX Script的静态的、声明式的编程语言来开发JavaFX应用程序。因为JavaFX Script将会被编译为Java bytecode，程序员可以使用Java代码代替。</p><p>JavaFX 2.0之后的版本摒弃了JavaFX Script语言，而作为一个Java API来使用。因此使用JavaFX平台实现的应用程序将直接通过标准Java代码来实现。</p><p>JavaFX 2.0 包含非常丰富的 UI 控件、图形和多媒体特性用于简化可视化应用的开发，WebView可直接在应用中嵌入网页；另外 2.0 版本允许使用 FXML 进行 UI 定义，这是一个脚本化基于 XML 的标识语言。</p><p>从JDK 7u6开始，JavaFx就与JDK捆绑在一起了，JavaFX团队称，下一个版本将是8.0，目前所有的工作都已经围绕8.0库进行。这是因为JavaFX将捆绑在Java 8中，因此该团队决定跳过几个版本号，迎头赶上Java 8。</p><h2 id="javafx8的新特性" tabindex="-1">JavaFx8的新特性 <a class="header-anchor" href="#javafx8的新特性" aria-label="Permalink to &quot;JavaFx8的新特性&quot;">​</a></h2><h4 id="全新现代主题-modena" tabindex="-1">全新现代主题: Modena <a class="header-anchor" href="#全新现代主题-modena" aria-label="Permalink to &quot;全新现代主题: Modena&quot;">​</a></h4><p>新的Modena主题来替换原来的Caspian主题。不过在Application的start()方法中，可以通过setUserAgentStylesheet(STYLESHEET_CASPIAN)来继续使用Caspian主题。</p><p>参考<a href="http://fxexperience.com/2013/03/modena-theme-update/" target="_blank" rel="noreferrer">http://fxexperience.com/2013/03/modena-theme-update/</a></p><h4 id="javafx-3d" tabindex="-1">JavaFX 3D <a class="header-anchor" href="#javafx-3d" aria-label="Permalink to &quot;JavaFX 3D&quot;">​</a></h4><p>在JavaFX8中提供了3D图像处理API，包括Shape3D (Box, Cylinder, MeshView, Sphere子类),SubScene, Material, PickResult, LightBase (AmbientLight 和PointLight子类),SceneAntialiasing等。Camera类也得到了更新。从JavaDoc中可以找到更多信息。</p><h4 id="富文本" tabindex="-1">富文本 <a class="header-anchor" href="#富文本" aria-label="Permalink to &quot;富文本&quot;">​</a></h4><p>强化了富文本的支持</p><h4 id="treetableview" tabindex="-1">TreeTableView <a class="header-anchor" href="#treetableview" aria-label="Permalink to &quot;TreeTableView&quot;">​</a></h4><h4 id="日期控件datepicker" tabindex="-1">日期控件DatePicker <a class="header-anchor" href="#日期控件datepicker" aria-label="Permalink to &quot;日期控件DatePicker&quot;">​</a></h4><p>增加日期控件</p><h4 id="用于-css-结构的公共-api" tabindex="-1">用于 CSS 结构的公共 API <a class="header-anchor" href="#用于-css-结构的公共-api" aria-label="Permalink to &quot;用于 CSS 结构的公共 API&quot;">​</a></h4><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CSS 样式设置是 JavaFX 的一项主要特性</span></span>
<span class="line"><span>CSS 已专门在私有 API 中实现(com.sun.javafx.css 软件包)</span></span>
<span class="line"><span>多种工具(例如 Scene Builder)需要 CSS 公共 API</span></span>
<span class="line"><span>开发人员将能够定义自定义 CSS 样式</span></span></code></pre></div><h4 id="webview-增强功能" tabindex="-1">WebView 增强功能 <a class="header-anchor" href="#webview-增强功能" aria-label="Permalink to &quot;WebView 增强功能&quot;">​</a></h4><ul><li>Nashorn JavaScript 引擎 <a href="https://blogs.oracle.com/nashorn/entry/open%5C_for%5C_business" target="_blank" rel="noreferrer">https://blogs.oracle.com/nashorn/entry/open\\_for\\_business</a></li><li>WebSocket <a href="http://javafx-jira.kenai.com/browse/RT-14947" target="_blank" rel="noreferrer">http://javafx-jira.kenai.com/browse/RT-14947</a></li><li>Web Workers <a href="http://javafx-jira.kenai.com/browse/RT-9782" target="_blank" rel="noreferrer">http://javafx-jira.kenai.com/browse/RT-9782</a></li></ul><h4 id="javafx-scene-builder-2-0" tabindex="-1">JavaFX Scene Builder 2.0 <a class="header-anchor" href="#javafx-scene-builder-2-0" aria-label="Permalink to &quot;JavaFX Scene Builder 2.0&quot;">​</a></h4><p>可视化工具，加速JavaFX图形界面的开发，下载地址</p><p>JavaFX Scene Builder如同NetBeans一般，通过拖拽的方式配置界面，待完成界面之後，保存为FXML格式文件，此文件以XML描述物件配置，再交由JavaFX程式处理，因此可減少直接以JavaFX编写界面的困難度。</p><p>JavaFX Scene Builder 2.0新增JavaFX Theme预览功能，菜单「Preview」→「JavaFX Theme」选择不同的主題，包括:</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Modena (FX8).</span></span>
<span class="line"><span>Modena Touch (FX8).</span></span>
<span class="line"><span>Modena High Contrast – Black on White (FX8).</span></span>
<span class="line"><span>Modena High Contrast – White on Black (FX8).</span></span>
<span class="line"><span>Modena High Contrast – Yellow on Black (FX8).</span></span>
<span class="line"><span>Caspian (FX2).</span></span>
<span class="line"><span>Caspian Embedded (FX2).</span></span>
<span class="line"><span>Caspian Embedded QVGA (FX2).</span></span></code></pre></div><h2 id="javafx-8开发2048游戏" tabindex="-1">JavaFX 8开发2048游戏 <a class="header-anchor" href="#javafx-8开发2048游戏" aria-label="Permalink to &quot;JavaFX 8开发2048游戏&quot;">​</a></h2><p>2048虽然不像前段时间那么火了，但个人还是非常喜欢玩2048，空闲时间都忍不住来一发，感谢 Gabriele Cirulli 发明了这了不起 (并且会上瘾)的2048游戏，因为是用MIT协议开源出来，各种语言版本的2048游戏横空出世，下图是用JavaFX 8来开发的一款2048。</p><p>所用到的技术</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Lambda expressions</span></span>
<span class="line"><span>Stream API</span></span>
<span class="line"><span>JavaFX 8</span></span>
<span class="line"><span>JavaFX CSS basics</span></span>
<span class="line"><span>JavaFX animationsfx2048相关类的说明</span></span>
<span class="line"><span>Game2048,游戏主类</span></span>
<span class="line"><span>GameManager,包含游戏界面布局(Board)以及Grid的操作(GridOperator)</span></span>
<span class="line"><span>Board,包含labels ，分数，grid ，Tile</span></span>
<span class="line"><span>Tile,游戏中的数字块</span></span>
<span class="line"><span>GridOperator,Grid操作类</span></span>
<span class="line"><span>Location,Direction 位置帮助类</span></span>
<span class="line"><span>RecordManager，SessionManager，纪录游戏分数，会话类</span></span></code></pre></div><p>这里是源码地址，大家感兴趣的可以去学习下git.oschina.net/benhail/javase8-sample/tree/master/src/main/java/javase8sample/chapter13/javafx8/fx2048</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>比起AWT和SWING，JavaFX的优势很明显，各大主流IDE已经支持JavaFX的开发了，最佳的工具莫过于NetBeans，且随着lambda带来的好处，JavaFX的事件处理简洁了不少，以前需要写匿名函数类。另外JavaFX开源以来，JavaFX的生态环境也越来越活跃了，包括各种教程，嵌入式尝试，还有一些开源项目，比如: ControlsFX，JRebirth，DataFX Flow，mvvmFX，TestFX 等等。还有JavaFX是可以运行在Android和ios上面，这个很赞！</p><p>好了，总结到这里也差不多了，在RIA平台上面，有HTML5、Flex和微软的Sliverlight，JavaFX能否表现优秀，在于大家的各位，只要我们多用JavaFX，那么JavaFX也会越来越优秀，任何语言都是这样, THE END .</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><p><a href="https://github.com/oimchat/oim-fx" target="_blank" rel="noreferrer">https://github.com/oimchat/oim-fx</a></p></li><li><p><a href="https://github.com/goxr3plus/FX-BorderlessScene" target="_blank" rel="noreferrer">https://github.com/goxr3plus/FX-BorderlessScene</a></p></li><li><p><a href="https://github.com/topics/material-ui" target="_blank" rel="noreferrer">https://github.com/topics/material-ui</a></p></li><li><p><a href="https://github.com/in-sideFX/Undecorator" target="_blank" rel="noreferrer">https://github.com/in-sideFX/Undecorator</a></p></li><li><p><a href="https://github.com/brunoborges/webfx" target="_blank" rel="noreferrer">https://github.com/brunoborges/webfx</a></p></li><li><p><a href="https://blog.csdn.net/loongshawn/article/details/52805751" target="_blank" rel="noreferrer">https://blog.csdn.net/loongshawn/article/details/52805751</a></p></li><li><p><a href="https://docs.oracle.com/javafx/2/ui%5C_controls/overview.htm#BABJACHC" target="_blank" rel="noreferrer">https://docs.oracle.com/javafx/2/ui\\_controls/overview.htm#BABJACHC</a></p></li><li><p><a href="https://www.oracle.com/technetwork/cn/articles/java/layoutfx-1536156-zhs.html" target="_blank" rel="noreferrer">https://www.oracle.com/technetwork/cn/articles/java/layoutfx-1536156-zhs.html</a></p></li></ul><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>`,40)]))}const u=e(i,[["render",l]]);export{b as __pageData,u as default};
