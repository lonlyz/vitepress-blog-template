import{_ as e,c as t,ai as s,o as n}from"./chunks/framework.BrYByd3F.js";const h=JSON.parse('{"title":"Java 8 - 类型推断优化","description":"","frontmatter":{},"headers":[],"relativePath":"java/java8/java8-type.md","filePath":"java/java8/java8-type.md","lastUpdated":1737706346000}'),p={name:"java/java8/java8-type.md"};function l(i,a,r,o,c,b){return n(),t("div",null,a[0]||(a[0]=[s(`<h1 id="java-8-类型推断优化" tabindex="-1">Java 8 - 类型推断优化 <a class="header-anchor" href="#java-8-类型推断优化" aria-label="Permalink to &quot;Java 8 - 类型推断优化&quot;">​</a></h1><blockquote><p>理解Java 8 类型推断需理解几个问题: @pdai</p></blockquote><ul><li><a href="about:blank#java-8---%e7%b1%bb%e5%9e%8b%e6%8e%a8%e6%96%ad%e4%bc%98%e5%8c%96" target="_blank" rel="noreferrer">Java 8 - 类型推断优化</a><ul><li><a href="about:blank#%e7%ae%80%e5%8d%95%e7%90%86%e8%a7%a3%e6%b3%9b%e5%9e%8b" target="_blank" rel="noreferrer">简单理解泛型</a></li><li><a href="about:blank#%e6%b3%9b%e5%9e%8b%e7%9a%84%e5%b0%b4%e5%b0%ac" target="_blank" rel="noreferrer">泛型的尴尬</a></li><li><a href="about:blank#java7%e7%9a%84%e6%b3%9b%e5%9e%8b%e7%b1%bb%e5%9e%8b%e6%8e%a8%e6%96%ad%e6%94%b9%e8%bf%9b" target="_blank" rel="noreferrer">java7的泛型类型推断改进</a></li><li><a href="about:blank#java8%e7%9a%84%e6%b3%9b%e5%9e%8b%e7%b1%bb%e5%9e%8b%e6%8e%a8%e6%96%ad%e6%94%b9%e8%bf%9b" target="_blank" rel="noreferrer">Java8的泛型类型推断改进</a></li><li><a href="about:blank#%e6%80%bb%e7%bb%93" target="_blank" rel="noreferrer">总结</a></li></ul></li></ul><h2 id="简单理解泛型" tabindex="-1">简单理解泛型 <a class="header-anchor" href="#简单理解泛型" aria-label="Permalink to &quot;简单理解泛型&quot;">​</a></h2><p>泛型是Java SE 1.5的新特性，泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。通俗点将就是“类型的变量”。这种类型变量可以用在类、接口和方法的创建中。</p><p>理解Java泛型最简单的方法是把它看成一种便捷语法，能节省你某些Java类型转换(casting)上的操作:</p><p><code>List&lt;Apple&gt; box = new ArrayList&lt;Apple&gt;();box.add(new Apple());Apple apple =box.get(0);</code></p><p>上面的代码自身已表达的很清楚: box是一个装有Apple对象的List。get方法返回一个Apple对象实例，这个过程不需要进行类型转换。没有泛型，上面的代码需要写成这样:</p><p><code>Apple apple = (Apple)box.get(0);</code></p><h2 id="泛型的尴尬" tabindex="-1">泛型的尴尬 <a class="header-anchor" href="#泛型的尴尬" aria-label="Permalink to &quot;泛型的尴尬&quot;">​</a></h2><p>泛型的最大优点是提供了程序的类型安全同时可以向后兼容，但也有尴尬的地方，就是每次定义时都要写明泛型的类型，这样显示指定不仅感觉有些冗长，最主要是很多程序员不熟悉泛型，因此很多时候不能够给出正确的类型参数，现在通过编译器自动推断泛型的参数类型，能够减少这样的情况，并提高代码可读性。</p><h2 id="java7的泛型类型推断改进" tabindex="-1">java7的泛型类型推断改进 <a class="header-anchor" href="#java7的泛型类型推断改进" aria-label="Permalink to &quot;java7的泛型类型推断改进&quot;">​</a></h2><p>在以前的版本中使用泛型类型，需要在声明并赋值的时候，两侧都加上泛型类型。例如:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Map&lt;String, String&gt; myMap = new HashMap&lt;String, String&gt;();</span></span></code></pre></div><p>你可能觉得:老子在声明变量的的时候已经指明了参数类型，为毛还要在初始化对象时再指定? 幸好，在Java SE 7中，这种方式得以改进，现在你可以使用如下语句进行声明并赋值:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Map&lt;String, String&gt; myMap = new HashMap&lt;&gt;(); //注意后面的&quot;&lt;&gt;&quot;</span></span></code></pre></div><p>在这条语句中，编译器会根据变量声明时的泛型类型自动推断出实例化HashMap时的泛型类型。再次提醒一定要注意new HashMap后面的“&lt;&gt;”，只有加上这个“&lt;&gt;”才表示是自动类型推断，否则就是非泛型类型的HashMap，并且在使用编译器编译源代码时会给出一个警告提示。</p><p>但是: Java SE 7在创建泛型实例时的类型推断是有限制的: 只有构造器的参数化类型在上下文中被显著的声明了，才可以使用类型推断，否则不行。例如: 下面的例子在java 7无法正确编译(但现在在java8里面可以编译，因为根据方法参数来自动推断泛型的类型):</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>List&lt;String&gt; list = new ArrayList&lt;&gt;();</span></span>
<span class="line"><span>list.add(&quot;A&quot;);// 由于addAll期望获得Collection&lt;? extends String&gt;类型的参数，因此下面的语句无法通过</span></span>
<span class="line"><span>list.addAll(new ArrayList&lt;&gt;());</span></span></code></pre></div><h2 id="java8的泛型类型推断改进" tabindex="-1">Java8的泛型类型推断改进 <a class="header-anchor" href="#java8的泛型类型推断改进" aria-label="Permalink to &quot;Java8的泛型类型推断改进&quot;">​</a></h2><p>java8里面泛型的目标类型推断主要2个:</p><p>1.支持通过方法上下文推断泛型目标类型</p><p>2.支持在方法调用链路当中，泛型类型推断传递到最后一个方法</p><p>让我们看看官网的例子</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>class List&lt;E&gt; {</span></span>
<span class="line"><span>   static &lt;Z&gt; List&lt;Z&gt; nil() { ... };</span></span>
<span class="line"><span>   static &lt;Z&gt; List&lt;Z&gt; cons(Z head, List&lt;Z&gt; tail) { ... };</span></span>
<span class="line"><span>   E head() { ... }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>根据JEP101的特性，我们在调用上面方法的时候可以这样写</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>//通过方法赋值的目标参数来自动推断泛型的类型</span></span>
<span class="line"><span>List&lt;String&gt; l = List.nil();</span></span>
<span class="line"><span>//而不是显示的指定类型</span></span>
<span class="line"><span>//List&lt;String&gt; l = List.&lt;String&gt;nil();</span></span>
<span class="line"><span>//通过前面方法参数类型推断泛型的类型</span></span>
<span class="line"><span>List.cons(42, List.nil());</span></span>
<span class="line"><span>//而不是显示的指定类型</span></span>
<span class="line"><span>//List.cons(42, List.&lt;Integer&gt;nil());</span></span></code></pre></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>以上是JEP101的特性内容了，Java作为静态语言的代表者，可以说类型系统相当丰富。导致类型间互相转换的问题困扰着每个java程序员，通过编译器自动推断类型的东西可以稍微缓解一下类型转换太复杂的问题。 虽然说是小进步，但对于我们天天写代码的程序员，肯定能带来巨大的作用，至少心情更愉悦了</p><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>`,30)]))}const g=e(p,[["render",l]]);export{h as __pageData,g as default};
