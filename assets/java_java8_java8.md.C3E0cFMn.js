import{_ as e,c as l,ai as r,o as t}from"./chunks/framework.BrYByd3F.js";const o="/vitepress-blog-template/images/java/java8-overview.png",v=JSON.parse('{"title":"♥Java8特性知识体系详解♥","description":"","frontmatter":{},"headers":[],"relativePath":"java/java8/java8.md","filePath":"java/java8/java8.md","lastUpdated":1737706346000}'),i={name:"java/java8/java8.md"};function n(h,a,p,c,d,b){return t(),l("div",null,a[0]||(a[0]=[r('<h1 id="♥java8特性知识体系详解♥" tabindex="-1">♥Java8特性知识体系详解♥ <a class="header-anchor" href="#♥java8特性知识体系详解♥" aria-label="Permalink to &quot;♥Java8特性知识体系详解♥&quot;">​</a></h1><blockquote><p>Java 8 新特性详解汇总。@pdai</p></blockquote><ul><li><a href="about:blank#java8%E7%89%B9%E6%80%A7%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E8%AF%A6%E8%A7%A3" target="_blank" rel="noreferrer">♥Java8特性知识体系详解♥</a><ul><li><a href="about:blank#%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB" target="_blank" rel="noreferrer">知识体系</a></li><li><a href="about:blank#%E7%9B%B8%E5%85%B3%E6%96%87%E7%AB%A0" target="_blank" rel="noreferrer">相关文章</a><ul><li><a href="about:blank#%E5%87%BD%E6%95%B0%E7%BC%96%E7%A8%8B" target="_blank" rel="noreferrer">函数编程</a></li><li><a href="about:blank#optional%E7%B1%BB" target="_blank" rel="noreferrer">Optional类</a></li><li><a href="about:blank#default%E6%96%B9%E6%B3%95" target="_blank" rel="noreferrer">default方法</a></li><li><a href="about:blank#%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3" target="_blank" rel="noreferrer">类型注解</a></li><li><a href="about:blank#%E9%87%8D%E5%A4%8D%E6%B3%A8%E8%A7%A3" target="_blank" rel="noreferrer">重复注解</a></li><li><a href="about:blank#%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD" target="_blank" rel="noreferrer">类型推断</a></li><li><a href="about:blank#jre-%E7%B2%BE%E7%AE%80" target="_blank" rel="noreferrer">JRE 精简</a></li><li><a href="about:blank#localdatelocaldatetime" target="_blank" rel="noreferrer">LocalDate/LocalDateTime</a></li><li><a href="about:blank#javafx" target="_blank" rel="noreferrer">JavaFX</a></li><li><a href="about:blank#permgen%E7%A7%BB%E9%99%A4" target="_blank" rel="noreferrer">PermGen移除</a></li><li><a href="about:blank#stampedlock" target="_blank" rel="noreferrer">StampedLock</a></li><li><a href="about:blank#%E5%85%B6%E5%AE%83%E6%9B%B4%E6%96%B0" target="_blank" rel="noreferrer">其它更新</a></li></ul></li><li><a href="about:blank#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3" target="_blank" rel="noreferrer">参考文档</a></li></ul></li></ul><h2 id="知识体系" tabindex="-1">知识体系 <a class="header-anchor" href="#知识体系" aria-label="Permalink to &quot;知识体系&quot;">​</a></h2><p><img src="'+o+'" alt="error.图片加载失败"></p><h2 id="相关文章" tabindex="-1">相关文章 <a class="header-anchor" href="#相关文章" aria-label="Permalink to &quot;相关文章&quot;">​</a></h2><h3 id="函数编程" tabindex="-1">函数编程 <a class="header-anchor" href="#函数编程" aria-label="Permalink to &quot;函数编程&quot;">​</a></h3><blockquote><p>面向对象编程是对数据进行抽象；函数式编程是对行为进行抽象。</p></blockquote><ul><li>Lambda 表达式的特点</li><li>Lambda 表达式使用和Stream下的接口</li><li>函数接口定义和使用，四大内置函数接口Consumer，Function，Supplier, Predicate.</li><li>Comparator排序为例贯穿所有知识点。</li></ul><p>详细分析请参看: <a href="https://pdai.tech/md/java/java8/java8-stream.html" target="_blank" rel="noreferrer">Java 8 - 函数编程</a></p><h3 id="optional类" tabindex="-1">Optional类 <a class="header-anchor" href="#optional类" aria-label="Permalink to &quot;Optional类&quot;">​</a></h3><blockquote><p>这是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。</p></blockquote><ul><li>Optional类的意义</li><li>Optional类有哪些常用的方法</li><li>Optional举例贯穿所有知识点</li><li>多重类嵌套Null值判断</li></ul><p>详细分析请参看: <a href="https://pdai.tech/md/java/java8/java8-optional.html" target="_blank" rel="noreferrer">Java 8 - Optional类</a></p><h3 id="default方法" tabindex="-1">default方法 <a class="header-anchor" href="#default方法" aria-label="Permalink to &quot;default方法&quot;">​</a></h3><blockquote><p>默认方法给予我们修改接口而不破坏原来的实现类的结构提供了便利，目前java 8的集合框架已经大量使用了默认方法来改进了，当我们最终开始使用Java 8的lambdas表达式时，提供给我们一个平滑的过渡体验。</p></blockquote><ul><li>为什么会出现默认方法?</li><li>接口中出现默认方法，且类可以实现多接口的，那和抽象类有啥区别?</li><li>多重实现的默认方法冲突怎么办?</li></ul><p>详细分析请参看: <a href="https://pdai.tech/md/java/java8/java8-default.html" target="_blank" rel="noreferrer">Java 8 - default方法</a></p><h3 id="类型注解" tabindex="-1">类型注解 <a class="header-anchor" href="#类型注解" aria-label="Permalink to &quot;类型注解&quot;">​</a></h3><blockquote><p>那充满争议的类型注解究竟是什么? 复杂还是便捷?</p></blockquote><ul><li>注解在JDK哪个版本中出现的，可以在哪些地方用注解?</li><li>什么是类型注解?</li><li>类型注解的作用是什么?</li><li>为什么会出现类型注解(JSR308)?</li></ul><p>详细分析请参看: <a href="https://pdai.tech/md/java/java8/java8-type-anno.html" target="_blank" rel="noreferrer">Java 8 - 类型注解</a></p><h3 id="重复注解" tabindex="-1">重复注解 <a class="header-anchor" href="#重复注解" aria-label="Permalink to &quot;重复注解&quot;">​</a></h3><ul><li>Java8之前对重复注解是怎么做的?</li><li>Java8对重复注解添加了什么支持?</li></ul><p>详细分析请参看: <a href="https://pdai.tech/md/java/java8/java8-anno-repeat.html" target="_blank" rel="noreferrer">Java 8 - 重复注解</a></p><h3 id="类型推断" tabindex="-1">类型推断 <a class="header-anchor" href="#类型推断" aria-label="Permalink to &quot;类型推断&quot;">​</a></h3><blockquote><p>导致类型间互相转换的问题困扰着每个java程序员，通过编译器自动推断类型的东西可以稍微缓解一下类型转换太复杂的问题。</p></blockquote><ul><li>什么是泛型?</li><li>Java7对泛型推断做了哪些优化?</li><li>Java8对此有做了哪些优化?</li></ul><p>详细分析请参看: <a href="https://pdai.tech/md/java/java8/java8-type.html" target="_blank" rel="noreferrer">Java 8 - 类型推断优化</a></p><h3 id="jre-精简" tabindex="-1">JRE 精简 <a class="header-anchor" href="#jre-精简" aria-label="Permalink to &quot;JRE 精简&quot;">​</a></h3><blockquote><p>模块化特性是javaer所期待的特性, 一个占用资源少的JRE运行环境，紧凑的JRE特性的出现，能带来以后的物联网的发展，甚至还是会有大量的java应用程序出现在物联网上面。</p></blockquote><ul><li>为什么精简Java8 JRE，及好处是啥?</li><li>紧凑的JRE分3种，分别是compact1、compact2、compact3，他们的关系是?</li><li>在不同平台上如何编译等?</li></ul><p>详细分析请参看: <a href="https://pdai.tech/md/java/java8/java8-jre.html" target="_blank" rel="noreferrer">Java 8 - JRE精简</a></p><h3 id="localdate-localdatetime" tabindex="-1">LocalDate/LocalDateTime <a class="header-anchor" href="#localdate-localdatetime" aria-label="Permalink to &quot;LocalDate/LocalDateTime&quot;">​</a></h3><blockquote><p>Date/Calendar槽点, java8对其进行了重写。</p></blockquote><ul><li>Java8之前的Date有哪些槽点? (Calendar的所有属性都是可变的，SimpleDateFormat的线程不安全性等)</li><li>Java8之前使用哪些常用的第三方时间库?</li><li>Java8关于时间和日期有哪些类和方法，变比Java8之前它的特点是什么?</li><li>其它语言时间库?</li></ul><p>详细分析请参看: <a href="https://pdai.tech/md/java/java8/java8-localdatetime.html" target="_blank" rel="noreferrer">Java 8 - LocalDate/LocalDateTime</a></p><h3 id="javafx" tabindex="-1">JavaFX <a class="header-anchor" href="#javafx" aria-label="Permalink to &quot;JavaFX&quot;">​</a></h3><blockquote><p>JavaFX主要致力于富客户端开发，以弥补swing的缺陷，主要提供图形库与media库，支持audio,video,graphics,animation,3D等，同时采用现代化的css方式支持界面设计。同时又采用XUI方式以XML方式设计UI界面，达到显示与逻辑的分离。</p></blockquote><ul><li>javaFX发展历程?</li><li>Java8对其增加了哪些特性?</li></ul><p>详细分析请参看: <a href="https://pdai.tech/md/java/java8/java8-javafx.html" target="_blank" rel="noreferrer">Java 8 - JavaFX</a></p><h3 id="permgen移除" tabindex="-1">PermGen移除 <a class="header-anchor" href="#permgen移除" aria-label="Permalink to &quot;PermGen移除&quot;">​</a></h3><blockquote><p>PermGen space的全称是Permanent Generation space,是指内存的永久保存区域。PermGen space是Oracle-Sun Hotspot才有，JRockit以及J9是没有这个区域。</p></blockquote><ul><li>Java8之前 “java.lang.OutOfMemoryError: PermGen space”是怎么引起的，怎么解决的?</li><li>新增加的元空间(Metaspace)包含哪些东西，画出图</li><li>元空间(Metaspace)和PermGen对比</li></ul><p>详细分析请参看: <a href="https://pdai.tech/md/java/java8/java8-permgen.html" target="_blank" rel="noreferrer">Java 8 - 移除Permgen</a></p><h3 id="stampedlock" tabindex="-1">StampedLock <a class="header-anchor" href="#stampedlock" aria-label="Permalink to &quot;StampedLock&quot;">​</a></h3><ul><li>为什么会引入StampedLock</li><li>用Lock写悲观锁和乐观锁举例</li><li>用StampedLock写悲观锁和乐观锁举例</li><li>性能对比</li></ul><p>详细分析请参看: <a href="https://pdai.tech/md/java/java8/java8-stampedlock.html" target="_blank" rel="noreferrer">Java 8 - StampedLock</a></p><h3 id="其它更新" tabindex="-1">其它更新 <a class="header-anchor" href="#其它更新" aria-label="Permalink to &quot;其它更新&quot;">​</a></h3><ul><li>Java8 还有哪些其它更新 <ul><li>字符串</li><li>Base64</li><li>Random</li><li>Nashorn</li><li>...</li></ul></li></ul><p>详细分析请参看: <a href="https://pdai.tech/md/java/java8/java8-others.html" target="_blank" rel="noreferrer">Java 8 - 其它更新</a></p><h2 id="参考文档" tabindex="-1">参考文档 <a class="header-anchor" href="#参考文档" aria-label="Permalink to &quot;参考文档&quot;">​</a></h2><blockquote><p>主要参考自以下文档:</p></blockquote><ul><li><p>Java 8 教程汇总 <a href="https://wizardforcel.gitbooks.io/java8-tutorials/content/index.html" target="_blank" rel="noreferrer">https://wizardforcel.gitbooks.io/java8-tutorials/content/index.html</a></p></li><li><p>Java8简明教程gitbook <a href="https://wizardforcel.gitbooks.io/modern-java" target="_blank" rel="noreferrer">https://wizardforcel.gitbooks.io/modern-java</a></p></li><li><p>Java8简明教程 <a href="https://github.com/wizardforcel/modern-java-zh" target="_blank" rel="noreferrer">https://github.com/wizardforcel/modern-java-zh</a></p></li><li><p>Java8新特性探究 <a href="https://wizardforcel.gitbooks.io/java8-new-features/content/" target="_blank" rel="noreferrer">https://wizardforcel.gitbooks.io/java8-new-features/content/</a></p></li></ul><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>',55)]))}const f=e(i,[["render",n]]);export{v as __pageData,f as default};
