import{_ as n}from"./chunks/java-12.DcKU27M3.js";import{_ as e,c as s,ai as p,o as t}from"./chunks/framework.BrYByd3F.js";const m=JSON.parse('{"title":"Java 12 新特性概述","description":"","frontmatter":{},"headers":[],"relativePath":"java/java8up/java12.md","filePath":"java/java8up/java12.md","lastUpdated":1737706346000}'),r={name:"java/java8up/java12.md"};function i(o,a,l,c,h,d){return t(),s("div",null,a[0]||(a[0]=[p('<h1 id="java-12-新特性概述" tabindex="-1">Java 12 新特性概述 <a class="header-anchor" href="#java-12-新特性概述" aria-label="Permalink to &quot;Java 12 新特性概述&quot;">​</a></h1><blockquote><p>JDK12 在 2019 年 3 月 19 号正式发布，不同于JDK11，JDK12并不是一个LTS版本。作为一个中间版本，JDK12版本特性增加较少。 2017年宣布的加速发布节奏要求每六个月发布一次功能，每季度更新一次，每三年发布一次长期支持（LTS）更新版本（或每六个版本一次）。</p></blockquote><h2 id="知识体系" tabindex="-1">知识体系 <a class="header-anchor" href="#知识体系" aria-label="Permalink to &quot;知识体系&quot;">​</a></h2><p><img src="'+n+`" alt="error.图片加载失败"></p><h2 id="新功能和库的更新" tabindex="-1">新功能和库的更新 <a class="header-anchor" href="#新功能和库的更新" aria-label="Permalink to &quot;新功能和库的更新&quot;">​</a></h2><h3 id="jep334-jvm常量api" tabindex="-1">JEP334: JVM常量API <a class="header-anchor" href="#jep334-jvm常量api" aria-label="Permalink to &quot;JEP334: JVM常量API&quot;">​</a></h3><p>每个Java类文件都有一个常量池，该池存储该类中字节码指令的操作。广义上讲，常量池中的条目要么描述运行时artifacts（例如类和方法），要么描述简单值（例如字符串和整数）。</p><p>所有这些条目都称为可加载常量，因为它们可以用作ldc指令的参数（“加载常量”）。它们也可能出现在invokedynamic指令的引导方法的静态参数列表中。执行ldc或invokedynamic指令会导致将可加载常量解析为标准Java类型（如Class，String或int）的“实时”值。</p><p>处理类文件的程序需要对字节码指令进行建模，然后对可加载常量进行建模。但是，使用标准Java类型对可加载常量进行建模是不够的。</p><p>描述一个字符串（一个CONSTANT_String_info条目）的可加载常量可能是可以接受的，因为生成一个“live” String对象是很简单的，但是对于描述一个类（一个CONSTANT_Class_info条目）的一个可加载常量来说，这是有问题的，因为生成一个“live”类对象依赖于类加载的正确性和一致性。</p><p>在实际应用中，类加载具有许多环境依赖性和失败的情况，例如：所需的类不存在或请求者可能无法访问；类加载的结果随上下文而变化；加载类具有副作用；有时根本不可能加载类。</p><p>因此，处理可加载常量的程序如果能够操纵类和方法，并且以纯名义上的符号形式操纵诸如方法句柄和动态计算的常量之类的artifacts，则它们将变得更加简单。</p><p>JDK12在新包java.lang.invoke.constant中定义了一系列基于值的符号引用（JVMS 5.1）类型，它们能够描述每种可加载常量。符号引用以纯字面的形式描述了可加载常量，与类加载或可访问性上下文分开。某些类可以充当自己的符号引用（例如String）；对于可链接常量，JDK12定义了一系列符号引用类型（ClassDesc，MethodTypeDesc，MethodHandleDesc和DynamicConstantDesc），来包含描述这些常量的信息。</p><h3 id="jep341-默认cds归档" tabindex="-1">JEP341: 默认CDS归档 <a class="header-anchor" href="#jep341-默认cds归档" aria-label="Permalink to &quot;JEP341: 默认CDS归档&quot;">​</a></h3><p>通过在64位平台上的默认类列表的帮助下生成CDS归档来改进JDK构建过程，从而有效地消除了运行<code>java -Xshare：dump</code>。 此功能的目标包括：</p><ul><li>改进开箱即用的启动时间</li><li>摆脱使用<code>-Xshare：dump</code>。</li></ul><h3 id="jep230-microbenchmark测试套件" tabindex="-1">JEP230: Microbenchmark测试套件 <a class="header-anchor" href="#jep230-microbenchmark测试套件" aria-label="Permalink to &quot;JEP230: Microbenchmark测试套件&quot;">​</a></h3><p>此功能为JDK源代码添加了一套Microbenchmark测试（大约100个），简化了现有Microbenchmark测试的运行和新基准测试的创建过程。 它基于Java Microbenchmark Harness（JMH）并支持JMH更新。</p><p>此功能使开发人员可以轻松运行当前的Microbenchmark测试并为JDK源代码添加新的Microbenchmark测试。 可以基于Java Microbenchmark Harness（JMH）轻松测试JDK性能。 它将支持JMH更新，并在套件中包含一组（约100个）基准测试。</p><h2 id="新的平台支持" tabindex="-1">新的平台支持 <a class="header-anchor" href="#新的平台支持" aria-label="Permalink to &quot;新的平台支持&quot;">​</a></h2><h3 id="jep340-移除多余arm64实现" tabindex="-1">JEP340: 移除多余ARM64实现 <a class="header-anchor" href="#jep340-移除多余arm64实现" aria-label="Permalink to &quot;JEP340: 移除多余ARM64实现&quot;">​</a></h3><p>Java 12将只有一个ARM 64位实现（aarch64）。 目标是删除所有与arm64实现相关的代码，同时保留32位ARM端口和64位aarch64实现。</p><p>这将把重点转移到单个64位ARM实现，并消除维护两个实现所需的重复工作。 当前的JDK 11实现中有两个64位ARM实现。</p><h2 id="jvm-优化" tabindex="-1">JVM 优化 <a class="header-anchor" href="#jvm-优化" aria-label="Permalink to &quot;JVM 优化&quot;">​</a></h2><h3 id="jpe-344-g1的可中断-mixed-gc" tabindex="-1">JPE 344: G1的可中断 mixed GC <a class="header-anchor" href="#jpe-344-g1的可中断-mixed-gc" aria-label="Permalink to &quot;JPE 344: G1的可中断 mixed GC&quot;">​</a></h3><p>此功能通过将Mixed GC集拆分为强制部分和可选部分，使G1垃圾收集器更有效地中止垃圾收集过程。通过允许垃圾收集过程优先处理强制集，g1可以更多满足满足暂停时间目标。</p><p>G1是一个垃圾收集器，设计用于具有大量内存的多处理器机器。由于它提高了性能效率，g1垃圾收集器最终将取代cms垃圾收集器。</p><p>G1垃圾收集器的主要目标之一是满足用户设置的暂停时间。G1采用一个分析引擎来选择在收集期间要处理的工作量。此选择过程的结果是一组称为GC集的区域。一旦GC集建立并且GC已经开始，那么G1就无法停止。</p><p>如果G1发现GC集选择选择了错误的区域，它会将GC区域的拆分为两部分（强制部分和可选部分）来切换到处理Mix GC的增量模式。如果未达到暂停时间目标，则停止对可选部分的垃圾收集。</p><h3 id="jep-346-g1归还不使用的内存" tabindex="-1">JEP 346: G1归还不使用的内存 <a class="header-anchor" href="#jep-346-g1归还不使用的内存" aria-label="Permalink to &quot;JEP 346: G1归还不使用的内存&quot;">​</a></h3><p>此功能的主要目标是改进G1垃圾收集器，以便在不活动时将Java堆内存归还给操作系统。 为实现此目标，G1将在低应用程序活动期间定期生成或持续循环检查完整的Java堆使用情况。</p><p>这将立即归还未使用的部分Java堆内存给操作系统。 用户可以选择执行FULL GC以最大化返回的内存量。</p><h2 id="新功能的预览和实验" tabindex="-1">新功能的预览和实验 <a class="header-anchor" href="#新功能的预览和实验" aria-label="Permalink to &quot;新功能的预览和实验&quot;">​</a></h2><h3 id="jep-189-shenandoah-低暂停时间垃圾收集器-实验" tabindex="-1">JEP 189: Shenandoah：低暂停时间垃圾收集器（实验） <a class="header-anchor" href="#jep-189-shenandoah-低暂停时间垃圾收集器-实验" aria-label="Permalink to &quot;JEP 189: Shenandoah：低暂停时间垃圾收集器（实验）&quot;">​</a></h3><blockquote><p>JDK 12 引入的回收算法（实验阶段），该算法通过与正在运行的 Java 线程同时进行疏散工作来减少 GC 暂停时间。Shenandoah 的暂停时间与堆大小无关，无论堆栈是 200 MB 还是 200 GB，都具有相同的一致暂停时间。</p></blockquote><p><strong>Shenandoah适用于高吞吐和大内存场景，不适合高实时性场景</strong>。Shenandoah算法设计目标主要是响应性和一致可控的短暂停顿，对于垃圾回收生命周期中安全点停顿（TTSP)和内存增长监控的时间开销并无帮助。</p><p>Shenandoah算法为每个Java对象添加了一个间接指针，使得GC线程能够在Java线程运行时压缩堆。标记和压缩是同时执行的，因此我们只需要暂停Java线程在一致可控的时间内扫描线程堆栈以查找和更新对象图的根。</p><p><strong>怎么形容Shenandoah和ZGC的关系呢</strong>？异同点大概如下：</p><ul><li>相同点：性能几乎可认为是相同的</li><li>不同点：ZGC是Oracle JDK的。而Shenandoah只存在于OpenJDK中，因此使用时需注意你的JDK版本</li><li>打开方式：使用<code>-XX:+UseShenandoahGC</code>命令行参数打开。</li></ul><h3 id="jep-325-switch-表达式-预览版本" tabindex="-1">JEP 325: Switch 表达式 (预览版本) <a class="header-anchor" href="#jep-325-switch-表达式-预览版本" aria-label="Permalink to &quot;JEP 325: Switch 表达式 (预览版本)&quot;">​</a></h3><blockquote><p>在 Java 12 中引入了 Switch 表达式作为预览特性</p></blockquote><p>在 Java 12 之前，传统 Switch 语句写法为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>private static String getText(int number) {</span></span>
<span class="line"><span>    String result = &quot;&quot;;</span></span>
<span class="line"><span>    switch (number) {</span></span>
<span class="line"><span>        case 1, 2:</span></span>
<span class="line"><span>            result = &quot;one or two&quot;;</span></span>
<span class="line"><span>            break;</span></span>
<span class="line"><span>        case 3:</span></span>
<span class="line"><span>            result = &quot;three&quot;;</span></span>
<span class="line"><span>            break;</span></span>
<span class="line"><span>        case 4, 5, 6:</span></span>
<span class="line"><span>            result = &quot;four or five or six&quot;;</span></span>
<span class="line"><span>            break;</span></span>
<span class="line"><span>        default:</span></span>
<span class="line"><span>            result = &quot;unknown&quot;;</span></span>
<span class="line"><span>            break;</span></span>
<span class="line"><span>    };</span></span>
<span class="line"><span>    return result;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>在 Java 12 之后，关于 Switch 表达式的写法改进为如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>private static String getText(int number) {</span></span>
<span class="line"><span>    String result = switch (number) {</span></span>
<span class="line"><span>        case 1, 2 -&gt; &quot;one or two&quot;;</span></span>
<span class="line"><span>        case 3 -&gt; &quot;three&quot;;</span></span>
<span class="line"><span>        case 4, 5, 6 -&gt; &quot;four or five or six&quot;;</span></span>
<span class="line"><span>        default -&gt; &quot;unknown&quot;;</span></span>
<span class="line"><span>    };</span></span>
<span class="line"><span>    return result;</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="参考文章" tabindex="-1">参考文章 <a class="header-anchor" href="#参考文章" aria-label="Permalink to &quot;参考文章&quot;">​</a></h2><p><a href="http://openjdk.java.net/projects/jdk/12/" target="_blank" rel="noreferrer">http://openjdk.java.net/projects/jdk/12/</a></p><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>`,48)]))}const v=e(r,[["render",i]]);export{m as __pageData,v as default};
