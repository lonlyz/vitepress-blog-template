import{_ as s}from"./chunks/java-15.BWg_BrlV.js";import{_ as n}from"./chunks/java-15-1.CHXKqhTc.js";import{_ as e}from"./chunks/java-11-1.ypQPAzv3.js";import{_ as p}from"./chunks/java-fma-1.BwfeY09m.js";import{_ as l,c as t,ai as i,o}from"./chunks/framework.BrYByd3F.js";const C=JSON.parse('{"title":"Java 15 新特性概述","description":"","frontmatter":{},"headers":[],"relativePath":"java/java8up/java15.md","filePath":"java/java8up/java15.md","lastUpdated":1737706346000}'),c={name:"java/java8up/java15.md"};function r(d,a,h,u,g,b){return o(),t("div",null,a[0]||(a[0]=[i('<h1 id="java-15-新特性概述" tabindex="-1">Java 15 新特性概述 <a class="header-anchor" href="#java-15-新特性概述" aria-label="Permalink to &quot;Java 15 新特性概述&quot;">​</a></h1><blockquote><p>JDK 15 在 2020 年 9 月 15 号正式发布了！根据发布的规划，这次发布的 JDK 15 将是一个短期的过度版，只会被 Oracle 支持（维护）6 个月，直到明年 3 月的 JDK 16 发布此版本将停止维护。而 Oracle 下一个长期支持版（LTS 版）会在明年的 9 月份候发布（Java 17），LTS 版每 3 年发布一个，上一次长期支持版是 18 年 9 月发布的 JDK 11。@pdai</p></blockquote><h2 id="知识体系" tabindex="-1">知识体系 <a class="header-anchor" href="#知识体系" aria-label="Permalink to &quot;知识体系&quot;">​</a></h2><p><img src="'+s+`" alt="error.图片加载失败"></p><ul><li><a href="about:blank#%E6%96%B0%E5%8A%9F%E8%83%BD%E5%92%8C%E5%BA%93%E7%9A%84%E6%9B%B4%E6%96%B0" target="_blank" rel="noreferrer"></a><ul><li><a href="about:blank#jep350-%E5%8A%A8%E6%80%81%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E7%B1%BB-%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB" target="_blank" rel="noreferrer">JEP350: 动态应用程序类-数据共享</a></li><li><a href="about:blank#jep353-socket-api-%E9%87%8D%E6%9E%84" target="_blank" rel="noreferrer">JEP353: Socket API 重构</a></li></ul></li><li><a href="about:blank#jvm-%E4%BC%98%E5%8C%96" target="_blank" rel="noreferrer"></a><ul><li><a href="about:blank#jep351-%E5%A2%9E%E5%BC%BA-zgc-%E9%87%8A%E6%94%BE%E6%9C%AA%E4%BD%BF%E7%94%A8%E5%86%85%E5%AD%98" target="_blank" rel="noreferrer">JEP351: 增强 ZGC 释放未使用内存</a></li></ul></li><li><a href="about:blank#%E6%96%B0%E5%8A%9F%E8%83%BD%E9%A2%84%E8%A7%88" target="_blank" rel="noreferrer">新功能预览</a><ul><li><a href="about:blank#jep354-switch-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%89%A9%E5%B1%95%E9%A2%84%E8%A7%88%E5%8A%9F%E8%83%BD" target="_blank" rel="noreferrer">JEP354: Switch 表达式扩展（预览功能）</a></li><li>[JEP355: 文本块（预览功能）</li></ul></li></ul><h2 id="语言特性增强" tabindex="-1">语言特性增强 <a class="header-anchor" href="#语言特性增强" aria-label="Permalink to &quot;语言特性增强&quot;">​</a></h2><h3 id="jep-378-文本块-text-blocks" tabindex="-1">JEP 378: 文本块(Text Blocks) <a class="header-anchor" href="#jep-378-文本块-text-blocks" aria-label="Permalink to &quot;JEP 378: 文本块(Text Blocks)&quot;">​</a></h3><blockquote><p>文本块，是一个多行字符串，它可以避免使用大多数转义符号，自动以可预测的方式格式化字符串，并让开发人员在需要时可以控制格式。</p></blockquote><p>Text Blocks首次是在JDK 13中以预览功能出现的，然后在JDK 14中又预览了一次，终于在JDK 15中被确定下来，可放心使用了。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>public static void main(String[] args) {</span></span>
<span class="line"><span>    String query = &quot;&quot;&quot;</span></span>
<span class="line"><span>           SELECT * from USER \\</span></span>
<span class="line"><span>           WHERE \`id\` = 1 \\</span></span>
<span class="line"><span>           ORDER BY \`id\`, \`name\`;\\</span></span>
<span class="line"><span>           &quot;&quot;&quot;;</span></span>
<span class="line"><span>    System.out.println(query);</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>运行程序，输出（可以看到展示为一行了）：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT * from USER WHERE \`id\` = 1 ORDER BY \`id\`, \`name\`;</span></span></code></pre></div><p><a href="https://pdai.tech/md/java/java8up/java14.html#%E6%96%87%E6%9C%AC%E5%9D%97%E7%AC%AC%E4%BA%8C%E9%A2%84%E8%A7%88%E7%89%88%E6%9C%AC" target="_blank" rel="noreferrer">Java14中文本块相关介绍</a></p><h2 id="新功能和库的更新" tabindex="-1">新功能和库的更新 <a class="header-anchor" href="#新功能和库的更新" aria-label="Permalink to &quot;新功能和库的更新&quot;">​</a></h2><h3 id="jep-339-edwards-curve-数字签名算法-eddsa" tabindex="-1">JEP 339: Edwards-Curve 数字签名算法 (EdDSA) <a class="header-anchor" href="#jep-339-edwards-curve-数字签名算法-eddsa" aria-label="Permalink to &quot;JEP 339: Edwards-Curve 数字签名算法 (EdDSA)&quot;">​</a></h3><blockquote><p>Edwards-Curve 数字签名算法（EdDSA），一种根据 RFC 8032 规范所描述的 Edwards-Curve 数字签名算法（EdDSA）实现加密签名，实现了一种 RFC 8032 标准化方案，但它不能代替 ECDSA。</p></blockquote><p>与 JDK 中的现有签名方案相比，EdDSA 具有更高的安全性和性能，因此备受关注。它已经在OpenSSL和BoringSSL等加密库中得到支持，在区块链领域用的比较多。</p><p>EdDSA是一种现代的椭圆曲线方案，具有JDK中现有签名方案的优点。EdDSA将只在SunEC提供商中实现。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// example: generate a key pair and sign</span></span>
<span class="line"><span>KeyPairGenerator kpg = KeyPairGenerator.getInstance(&quot;Ed25519&quot;);</span></span>
<span class="line"><span>KeyPair kp = kpg.generateKeyPair();</span></span>
<span class="line"><span>// algorithm is pure Ed25519</span></span>
<span class="line"><span>Signature sig = Signature.getInstance(&quot;Ed25519&quot;);</span></span>
<span class="line"><span>sig.initSign(kp.getPrivate());</span></span>
<span class="line"><span>sig.update(msg);</span></span>
<span class="line"><span>byte[] s = sig.sign();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// example: use KeyFactory to contruct a public key</span></span>
<span class="line"><span>KeyFactory kf = KeyFactory.getInstance(&quot;EdDSA&quot;);</span></span>
<span class="line"><span>boolean xOdd = ...</span></span>
<span class="line"><span>BigInteger y = ...</span></span>
<span class="line"><span>NamedParameterSpec paramSpec = new NamedParameterSpec(&quot;Ed25519&quot;);</span></span>
<span class="line"><span>EdECPublicKeySpec pubSpec = new EdECPublicKeySpec(paramSpec, new EdPoint(xOdd, y));</span></span>
<span class="line"><span>PublicKey pubKey = kf.generatePublic(pubSpec);</span></span></code></pre></div><h3 id="jep-371-隐藏类-hidden-classes" tabindex="-1">JEP 371: 隐藏类 Hidden Classes <a class="header-anchor" href="#jep-371-隐藏类-hidden-classes" aria-label="Permalink to &quot;JEP 371: 隐藏类 Hidden Classes&quot;">​</a></h3><blockquote><p>隐藏类是为框架（frameworks）所设计的，隐藏类不能直接被其他类的字节码使用，只能在运行时生成类并通过反射间接使用它们。</p></blockquote><p>该提案通过启用标准 API 来定义 无法发现 且 具有有限生命周期 的隐藏类，从而提高 JVM 上所有语言的效率。JDK内部和外部的框架将能够动态生成类，而这些类可以定义隐藏类。通常来说基于JVM的很多语言都有动态生成类的机制，这样可以提高语言的灵活性和效率。</p><ul><li>隐藏类天生为框架设计的，在运行时生成内部的class。</li><li>隐藏类只能通过反射访问，不能直接被其他类的字节码访问。</li><li>隐藏类可以独立于其他类加载、卸载，这可以减少框架的内存占用。</li></ul><p><strong>Hidden Classes是什么呢</strong>？</p><p>Hidden Classes就是不能直接被其他class的二进制代码使用的class。Hidden Classes主要被一些框架用来生成运行时类，但是这些类不是被用来直接使用的，而是通过反射机制来调用。</p><p>比如在JDK8中引入的lambda表达式，JVM并不会在编译的时候将lambda表达式转换成为专门的类，而是在运行时将相应的字节码动态生成相应的类对象。</p><p>另外使用动态代理也可以为某些类生成新的动态类。</p><p><strong>那么我们希望这些动态生成的类需要具有什么特性呢</strong>？</p><ul><li><strong>不可发现性</strong>。 因为我们是为某些静态的类动态生成的动态类，所以我们希望把这个动态生成的类看做是静态类的一部分。所以我们不希望除了该静态类之外的其他机制发现。</li><li><strong>访问控制</strong>。 我们希望在访问控制静态类的同时，也能控制到动态生成的类。</li><li><strong>生命周期</strong>。 动态生成类的生命周期一般都比较短，我们并不需要将其保存和静态类的生命周期一致。</li></ul><p><strong>API的支持</strong></p><p>所以我们需要一些API来定义无法发现的且具有有限生命周期的隐藏类。这将提高所有基于JVM的语言实现的效率。</p><p>比如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>java.lang.reflect.Proxy // 可以定义隐藏类作为实现代理接口的代理类。 </span></span>
<span class="line"><span>java.lang.invoke.StringConcatFactory // 可以生成隐藏类来保存常量连接方法； </span></span>
<span class="line"><span>java.lang.invoke.LambdaMetaFactory //可以生成隐藏的nestmate类，以容纳访问封闭变量的lambda主体；</span></span></code></pre></div><p>普通类是通过调用<code>ClassLoader::defineClass</code>创建的，而隐藏类是通过调用<code>Lookup::defineHiddenClass</code>创建的。这使JVM从提供的字节中派生一个隐藏类，链接该隐藏类，并返回提供对隐藏类的反射访问的查找对象。调用程序可以通过返回的查找对象来获取隐藏类的Class对象。</p><h3 id="jep-373-重新实现-datagramsocket-api" tabindex="-1">JEP 373: 重新实现 DatagramSocket API <a class="header-anchor" href="#jep-373-重新实现-datagramsocket-api" aria-label="Permalink to &quot;JEP 373: 重新实现 DatagramSocket API&quot;">​</a></h3><blockquote><p>重新实现了老的 DatagramSocket API 接口，更改了 java.net.DatagramSocket 和 java.net.MulticastSocket 为更加简单、现代化的底层实现，更易于维护和调试。</p></blockquote><p><img src="`+n+'" alt="error.图片加载失败"></p><p><code>java.net.datagram.Socket</code>和<code>java.net.MulticastSocket</code>的当前实现可以追溯到JDK 1.0，那时IPv6还在开发中。因此，当前的多播套接字实现尝试调和IPv4和IPv6难以维护的方式。</p><ul><li>通过替换 java.net.datagram 的基础实现，重新实现旧版 DatagramSocket API。</li><li>更改<code>java.net.DatagramSocket</code> 和 <code>java.net.MulticastSocket</code> 为更加简单、现代化的底层实现。提高了 JDK 的可维护性和稳定性。</li><li>通过将<code>java.net.datagram.Socket</code>和<code>java.net.MulticastSocket</code> API的底层实现替换为更简单、更现代的实现来重新实现遗留的DatagramSocket API。</li></ul><p><strong>新的实现</strong>：</p><ul><li>易于调试和维护;</li><li>与Project Loom中正在探索的虚拟线程协同。</li></ul><h2 id="jvm-优化" tabindex="-1">JVM 优化 <a class="header-anchor" href="#jvm-优化" aria-label="Permalink to &quot;JVM 优化&quot;">​</a></h2><h3 id="jep-373-zgc-可伸缩低延迟垃圾收集器" tabindex="-1">JEP 373: ZGC: 可伸缩低延迟垃圾收集器 <a class="header-anchor" href="#jep-373-zgc-可伸缩低延迟垃圾收集器" aria-label="Permalink to &quot;JEP 373: ZGC: 可伸缩低延迟垃圾收集器&quot;">​</a></h3><blockquote><p>ZGC是Java 11引入的新的垃圾收集器（JDK9以后默认的垃圾回收器是G1），经过了多个实验阶段，自此终于成为正式特性。ZGC是一个重新设计的并发的垃圾回收器，可以极大的提升GC的性能。支持任意堆大小而保持稳定的低延迟（10ms以内），性能非常可观。目前默认垃圾回收器仍然是 G1，后续很有可以能将ZGC设为默认垃圾回收器。之前需要通过<code>-XX:+UnlockExperimentalVMOptions -XX:+UseZGC</code>来启用ZGC，现在只需要<code>-XX:+UseZGC</code>就可以。</p></blockquote><p>以下是相关介绍：</p><p>ZGC 是一个可伸缩的、低延迟的垃圾收集器，主要为了满足如下目标进行设计：</p><ul><li>GC 停顿时间不超过 10ms</li><li>即能处理几百 MB 的小堆，也能处理几个 TB 的大堆</li><li>应用吞吐能力不会下降超过 15%（与 G1 回收算法相比）</li><li>方便在此基础上引入新的 GC 特性和利用 colord</li><li>针以及 Load barriers 优化奠定基础</li><li>当前只支持 Linux/x64 位平台 停顿时间在 10ms 以下，10ms 其实是一个很保守的数据，即便是 10ms 这个数据，也是 GC 调优几乎达不到的极值。根据 SPECjbb 2015 的基准测试，128G 的大堆下最大停顿时间才 1.68ms，远低于 10ms，和 G1 算法相比，改进非常明显。</li></ul><p><img src="'+e+`" alt="error.图片加载失败"></p><p>本图片引用自： The Z Garbage Collector – An Introduction</p><p>不过目前 ZGC 还处于实验阶段，目前只在 Linux/x64 上可用，如果有足够的需求，将来可能会增加对其他平台的支持。同时作为实验性功能的 ZGC 将不会出现在 JDK 构建中，除非在编译时使用 configure 参数： <code>--with-jvm-features=zgc</code> 显式启用。</p><p>在实验阶段，编译完成之后，已经迫不及待的想试试 ZGC，需要配置以下 JVM 参数，才能使用 ZGC，具体启动 ZGC 参数如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-XX：+ UnlockExperimentalVMOptions -XX：+ UseZGC -Xmx10g</span></span></code></pre></div><p>其中参数： -Xmx 是 ZGC 收集器中最重要的调优选项，大大解决了程序员在 JVM 参数调优上的困扰。ZGC 是一个并发收集器，必须要设置一个最大堆的大小，应用需要多大的堆，主要有下面几个考量：</p><ul><li>对象的分配速率，要保证在 GC 的时候，堆中有足够的内存分配新对象。</li><li>一般来说，给 ZGC 的内存越多越好，但是也不能浪费内存，所以要找到一个平衡。</li></ul><h3 id="jep-374-禁用偏向锁定" tabindex="-1">JEP 374: 禁用偏向锁定 <a class="header-anchor" href="#jep-374-禁用偏向锁定" aria-label="Permalink to &quot;JEP 374: 禁用偏向锁定&quot;">​</a></h3><blockquote><p>准备禁用和废除偏向锁，在 JDK 15 中，默认情况下禁用偏向锁，并弃用所有相关的命令行选项。</p></blockquote><p>在默认情况下禁用偏向锁定，并弃用所有相关命令行选项。目标是确定是否需要继续支持偏置锁定的 <strong>高维护成本</strong> 的遗留同步优化， HotSpot虚拟机使用该优化来减少非竞争锁定的开销。 尽管某些Java应用程序在禁用偏向锁后可能会出现性能下降，但偏向锁的性能提高通常不像以前那么明显。</p><p>该特性默认禁用了<code>biased locking(-XX:+UseBiasedLocking)</code>，并且废弃了所有相关的命令行选型(<code>BiasedLockingStartupDelay</code>, <code>BiasedLockingBulkRebiasThreshold</code>, <code>BiasedLockingBulkRevokeThreshold</code>, <code>BiasedLockingDecayTime</code>, <code>UseOptoBiasInlining</code>, <code>PrintBiasedLockingStatistics</code> and <code>PrintPreciseBiasedLockingStatistics</code>)</p><h3 id="jep-379-shenandoah-低暂停时间垃圾收集器-转正" tabindex="-1">JEP 379: Shenandoah：低暂停时间垃圾收集器(转正) <a class="header-anchor" href="#jep-379-shenandoah-低暂停时间垃圾收集器-转正" aria-label="Permalink to &quot;JEP 379: Shenandoah：低暂停时间垃圾收集器(转正)&quot;">​</a></h3><blockquote><p>Shenandoah垃圾回收算法终于从实验特性转变为产品特性，这是一个从 JDK 12 引入的回收算法，该算法通过与正在运行的 Java 线程同时进行疏散工作来减少 GC 暂停时间。Shenandoah 的暂停时间与堆大小无关，无论堆栈是 200 MB 还是 200 GB，都具有相同的一致暂停时间。</p></blockquote><p><strong>Shenandoah适用于高吞吐和大内存场景，不适合高实时性场景</strong>。Shenandoah算法设计目标主要是响应性和一致可控的短暂停顿，对于垃圾回收生命周期中安全点停顿（TTSP)和内存增长监控的时间开销并无帮助。</p><p>Shenandoah算法为每个Java对象添加了一个间接指针，使得GC线程能够在Java线程运行时压缩堆。标记和压缩是同时执行的，因此我们只需要暂停Java线程在一致可控的时间内扫描线程堆栈以查找和更新对象图的根。</p><p><strong>怎么形容Shenandoah和ZGC的关系呢</strong>？异同点大概如下：</p><ul><li>相同点：性能几乎可认为是相同的</li><li>不同点：ZGC是Oracle JDK的。而Shenandoah只存在于OpenJDK中，因此使用时需注意你的JDK版本</li><li>打开方式：使用<code>-XX:+UseShenandoahGC</code>命令行参数打开。</li></ul><p>Shenandoah在JDK12被作为experimental引入，在JDK15变为Production；之前需要通过<code>-XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC</code>来启用，现在只需要<code>-XX:+UseShenandoahGC</code>即可启用</p><h2 id="旧功能的删除和弃用" tabindex="-1">旧功能的删除和弃用 <a class="header-anchor" href="#旧功能的删除和弃用" aria-label="Permalink to &quot;旧功能的删除和弃用&quot;">​</a></h2><h3 id="jep-372-移除nashorn-javascript引擎" tabindex="-1">JEP 372: 移除Nashorn JavaScript引擎 <a class="header-anchor" href="#jep-372-移除nashorn-javascript引擎" aria-label="Permalink to &quot;JEP 372: 移除Nashorn JavaScript引擎&quot;">​</a></h3><blockquote><p>移除了 Nashorn JavaScript 脚本引擎、APIs，以及 jjs 工具。这些早在 JDK 11 中就已经被标记为 deprecated 了，JDK 15 被移除就很正常了。</p></blockquote><p><strong>Nashorn引擎是什么</strong>？</p><p>Nashorn 是 JDK 1.8 引入的一个 JavaScript 脚本引擎，用来取代 Rhino 脚本引擎。Nashorn 是 ECMAScript-262 5.1 的完整实现，增强了 Java 和 JavaScript 的兼容性，并且大大提升了性能。</p><p><strong>为什么要移除</strong>？</p><p>官方的描述是，随着 ECMAScript 脚本语言的结构、API 的改编速度越来越快，维护 Nashorn 太有挑战性了，所以……。</p><h3 id="jep-381-移除了-solaris-和-sparc-端口。" tabindex="-1">JEP 381: 移除了 Solaris 和 SPARC 端口。 <a class="header-anchor" href="#jep-381-移除了-solaris-和-sparc-端口。" aria-label="Permalink to &quot;JEP 381: 移除了 Solaris 和 SPARC 端口。&quot;">​</a></h3><blockquote><p>移除了 Solaris/SPARC、Solaris/x64 和 Linux/SPARC 端口的源代码及构建支持。这些端口在 JDK 14 中就已经被标记为 deprecated 了，JDK 15 被移除也不奇怪。</p></blockquote><p>删除对Solaris/SPARC、Solaris/x64和Linux/SPARC端口的源代码和构建支持，在JDK 14中被标记为废弃，在JDK15版本正式移除。 许多正在开发的项目和功能（如Valhalla、Loom和Panama）需要进行重大更改以适应CPU架构和操作系统特定代码。</p><p>近年来，Solaris 和 SPARC 都已被 Linux 操作系统和英特尔处理器取代。放弃对 Solaris 和 SPARC 端口的支持将使 OpenJDK 社区的贡献者能够加速开发新功能，从而推动平台向前发展。</p><h3 id="jep-385-废除-rmi-激活" tabindex="-1">JEP 385: 废除 RMI 激活 <a class="header-anchor" href="#jep-385-废除-rmi-激活" aria-label="Permalink to &quot;JEP 385: 废除 RMI 激活&quot;">​</a></h3><blockquote><p>RMI Activation被标记为Deprecate,将会在未来的版本中删除。RMI激活机制是RMI中一个过时的部分，<strong>自Java 8以来一直是可选的而非必选项</strong>。RMI激活机制增加了持续的维护负担。RMI的其他部分暂时不会被弃用。</p></blockquote><p>RMI jdk1.2引入，EJB在RMI系统中，我们使用延迟激活。延迟激活将激活对象推迟到客户第一次使用（即第一次方法调用）之前。 既然RMI Activation这么好用，为什么要废弃呢？</p><p>因为对于现代应用程序来说，分布式系统大部分都是基于Web的，web服务器已经解决了穿越防火墙，过滤请求，身份验证和安全性的问题，并且也提供了很多延迟加载的技术。</p><p>所以在现代应用程序中，RMI Activation已经很少被使用到了。并且在各种开源的代码库中，也基本上找不到RMI Activation的使用代码了。 为了减少RMI Activation的维护成本，在JDK8中，RMI Activation被置为可选的。现在在JDK15中，终于可以废弃了。</p><h2 id="新功能的预览和孵化" tabindex="-1">新功能的预览和孵化 <a class="header-anchor" href="#新功能的预览和孵化" aria-label="Permalink to &quot;新功能的预览和孵化&quot;">​</a></h2><h3 id="jep-375-instanceof-自动匹配模式-第二次预览" tabindex="-1">JEP 375: instanceof 自动匹配模式（第二次预览） <a class="header-anchor" href="#jep-375-instanceof-自动匹配模式-第二次预览" aria-label="Permalink to &quot;JEP 375: instanceof 自动匹配模式（第二次预览）&quot;">​</a></h3><blockquote><p>模式匹配（第二次预览），第一次预览是 JDK 14 中提出来的。</p></blockquote><p>Java 14 之前：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>if (object instanceof Kid) {</span></span>
<span class="line"><span>    Kid kid = (Kid) object;</span></span>
<span class="line"><span>    // ...</span></span>
<span class="line"><span>} else if (object instanceof Kiddle) {</span></span>
<span class="line"><span>    Kid kid = (Kid) object;</span></span>
<span class="line"><span>    // ...</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>Java 14+：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>if (object instanceof Kid kid) {</span></span>
<span class="line"><span>    // ...</span></span>
<span class="line"><span>} else if (object instanceof Kiddle kiddle) {</span></span>
<span class="line"><span>    // ...</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>Java 15 并没有对此特性进行调整，继续预览特性，只是为了收集更多的用户反馈，可能还不成熟吧。</p><h3 id="jep-360-密封的类和接口-预览" tabindex="-1">JEP 360: 密封的类和接口（预览） <a class="header-anchor" href="#jep-360-密封的类和接口-预览" aria-label="Permalink to &quot;JEP 360: 密封的类和接口（预览）&quot;">​</a></h3><blockquote><p>封闭类（预览特性），可以是封闭类和或者封闭接口，用来增强 Java 编程语言，<strong>防止其他类或接口扩展或实现它们</strong>。</p></blockquote><p>因为我们引入了<code>sealed</code> <code>class</code>或<code>interfaces</code>，这些class或者interfaces只允许被指定的类或者interface进行扩展和实现。</p><p>使用修饰符<code>sealed</code>，您可以将一个类声明为密封类。密封的类使用reserved关键字permits列出可以直接扩展它的类。子类可以是最终的，非密封的或密封的。</p><p>之前我们的代码是这样的。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>public class Person { } //人</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>class Teacher extends Person { }//教师</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>class Worker extends Person { }  //工人</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>class Student extends Person{ } //学生</span></span></code></pre></div><p>但是我们现在要限制 Person类 只能被这三个类继承，不能被其他类继承，需要这么做。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 添加sealed修饰符，permits后面跟上只能被继承的子类名称</span></span>
<span class="line"><span>public sealed class Person permits Teacher, Worker, Student{ } //人</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>// 子类可以被修饰为 final</span></span>
<span class="line"><span>final class Teacher extends Person { }//教师</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>// 子类可以被修饰为 non-sealed，此时 Worker类就成了普通类，谁都可以继承它</span></span>
<span class="line"><span>non-sealed class Worker extends Person { }  //工人</span></span>
<span class="line"><span>// 任何类都可以继承Worker</span></span>
<span class="line"><span>class AnyClass extends Worker{}</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>//子类可以被修饰为 sealed,同上</span></span>
<span class="line"><span>sealed class Student extends Person permits MiddleSchoolStudent,GraduateStudent{ } //学生</span></span>
<span class="line"><span> </span></span>
<span class="line"><span> </span></span>
<span class="line"><span>final class MiddleSchoolStudent extends Student { }  //中学生</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>final class GraduateStudent extends Student { }  //研究生</span></span></code></pre></div><p>很强很实用的一个特性，可以限制类的层次结构。</p><h3 id="jep-383-外部存储器访问-api-二次孵化器版" tabindex="-1">JEP 383: 外部存储器访问 API（二次孵化器版） <a class="header-anchor" href="#jep-383-外部存储器访问-api-二次孵化器版" aria-label="Permalink to &quot;JEP 383: 外部存储器访问 API（二次孵化器版）&quot;">​</a></h3><blockquote><p>外存访问 API（二次孵化），可以允许 Java 应用程序安全有效地访问 Java 堆之外的外部内存。目的是引入一个 API，以允许 Java 程序安全、有效地访问 Java 堆之外的外部存储器。如本机、持久和托管堆。如下内容来源于<a href="https://xie.infoq.cn/article/8304c894c4e38318d38ceb116%EF%BC%8C%E4%BD%9C%E8%80%85%E6%98%AF%E4%B9%9D%E5%8F%94" target="_blank" rel="noreferrer">https://xie.infoq.cn/article/8304c894c4e38318d38ceb116，作者是九叔</a></p></blockquote><p>在实际的开发过程中，绝大多数的开发人员基本都不会直接与堆外内存打交道，但这并不代表你从未接触过堆外内存，像大家经常使用的诸如：RocketMQ、MapDB 等中间件产品底层实现都是基于堆外存储的，换句话说，我们几乎每天都在间接与堆外内存打交道。那么究竟为什么需要使用到堆外内存呢？简单来说，主要是出于以下 3 个方面的考虑：</p><ul><li>减少 GC 次数和降低 Stop-the-world 时间；</li><li>可以扩展和使用更大的内存空间；</li><li>可以省去物理内存和堆内存之间的数据复制步骤。</li></ul><p>在 Java14 之前，如果开发人员想要操作堆外内存，通常的做法就是使用 ByteBuffer 或者 Unsafe，甚至是 JNI 等方式，但无论使用哪一种方式，均<strong>无法同时有效解决安全性和高效性等 2 个问题</strong>，并且，堆外内存的释放也是一个令人头痛的问题。以 DirectByteBuffer 为例，该对象仅仅只是一个引用，其背后还关联着一大段堆外内存，由于 DirectByteBuffer 对象实例仍然是存储在堆空间内，只有当 DirectByteBuffer 对象被 GC 回收时，其背后的堆外内存才会被进一步释放。</p><p><img src="`+p+`" alt="error.图片加载失败"></p><p>在此大家需要注意，程序中通过 ByteBuffer.allocateDirect()方法来申请物理内存资源所耗费的成本远远高于直接在 on-heap 中的操作，而且实际开发过程中还需要考虑数据结构如何设计、序列化/反序列化如何支撑等诸多难题，所以与其使用语法层面的 API 倒不如直接使用 MapDB 等开源产品来得更实惠。</p><p>如今，在堆外内存领域，我们似乎又多了一个选择，<strong>从 Java14 开始，Java 的设计者们在语法层面为大家带来了崭新的 Memory Access API，极大程度上简化了开发难度，并得以有效的解决了安全性和高效性等 2 个核心问题</strong>。示例：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 获取内存访问var句柄</span></span>
<span class="line"><span>var handle = MemoryHandles.varHandle(char.class,</span></span>
<span class="line"><span>        ByteOrder.nativeOrder());</span></span>
<span class="line"><span>// 申请200字节的堆外内存</span></span>
<span class="line"><span>try (MemorySegment segment = MemorySegment.allocateNative(200)) {</span></span>
<span class="line"><span>    for (int i = 0; i &lt; 25; i++) {</span></span>
<span class="line"><span>        handle.set(segment, i &lt;&lt; 2, (char) (i + 1 + 64));</span></span>
<span class="line"><span>        System.out.println(handle.get(segment, i &lt;&lt; 2));</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>关于堆外内存段的释放，Memory Access API 提供有显式和隐式 2 种方式，开发人员除了可以在程序中通过 MemorySegment 的 close()方法来显式释放所申请的内存资源外，还可以注册 Cleaner 清理器来实现资源的隐式释放，后者会在 GC 确定目标内存段不再可访问时，释放与之关联的堆外内存资源。</p><h3 id="jep-384-records-二次预览" tabindex="-1">JEP 384: Records (二次预览) <a class="header-anchor" href="#jep-384-records-二次预览" aria-label="Permalink to &quot;JEP 384: Records (二次预览)&quot;">​</a></h3><blockquote><p>Records 最早在 JDK 14 中成为预览特性，JDK 15 继续二次预览。</p></blockquote><p><strong>如下内容来自Java14</strong></p><p>Record 类型允许在代码中使用紧凑的语法形式来声明类，而这些类能够作为不可变数据类型的封装持有者。Record 这一特性主要用在特定领域的类上；与枚举类型一样，Record 类型是一种受限形式的类型，主要用于存储、保存数据，并且没有其它额外自定义行为的场景下。</p><p>在以往开发过程中，被当作数据载体的类对象，在正确声明定义过程中，通常需要编写大量的无实际业务、重复性质的代码，其中包括：构造函数、属性调用、访问以及 equals() 、hashCode()、toString() 等方法，因此在 Java 14 中引入了 Record 类型，其效果有些类似 Lombok 的 @Data 注解、Kotlin 中的 data class，但是又不尽完全相同，它们的共同点都是类的部分或者全部可以直接在类头中定义、描述，并且这个类只用于存储数据而已。对于 Record 类型，具体可以用下面代码来说明：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>public record Person(String name, int age) {</span></span>
<span class="line"><span>    public static String address;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public String getName() {</span></span>
<span class="line"><span>        return name;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>对上述代码进行编译，然后反编译之后可以看到如下结果：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>public final class Person extends java.lang.Record {</span></span>
<span class="line"><span>    private final java.lang.String name;</span></span>
<span class="line"><span>    private final java.lang.String age;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public Person(java.lang.String name, java.lang.String age) { /* compiled code */ }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public java.lang.String getName() { /* compiled code */ }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public java.lang.String toString() { /* compiled code */ }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public final int hashCode() { /* compiled code */ }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public final boolean equals(java.lang.Object o) { /* compiled code */ }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public java.lang.String name() { /* compiled code */ }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public java.lang.String age() { /* compiled code */ }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>根据反编译结果，可以得出，当用 Record 来声明一个类时，该类将自动拥有下面特征：</p><ul><li>拥有一个构造方法</li><li>获取成员属性值的方法：name()、age()</li><li>hashCode() 方法和 euqals() 方法</li><li>toString() 方法</li><li>类对象和属性被 final 关键字修饰，不能被继承，类的示例属性也都被 final 修饰，不能再被赋值使用。</li><li>还可以在 Record 声明的类中定义静态属性、方法和示例方法。注意，不能在 Record 声明的类中定义示例字段，类也不能声明为抽象类等。</li></ul><p>可以看到，该预览特性提供了一种更为紧凑的语法来声明类，并且可以大幅减少定义类似数据类型时所需的重复性代码。</p><p>另外 Java 14 中为了引入 Record 这种新的类型，在 java.lang.Class 中引入了下面两个新方法：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>RecordComponent[] getRecordComponents()</span></span>
<span class="line"><span>boolean isRecord()</span></span></code></pre></div><p>其中 getRecordComponents() 方法返回一组 java.lang.reflect.RecordComponent 对象组成的数组，java.lang.reflect.RecordComponent也是一个新引入类，该数组的元素与 Record 类中的组件相对应，其顺序与在记录声明中出现的顺序相同，可以从该数组中的每个 RecordComponent 中提取到组件信息，包括其名称、类型、泛型类型、注释及其访问方法。</p><p>而 isRecord() 方法，则返回所在类是否是 Record 类型，如果是，则返回 true。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li>OracleJDK 15 下载地址：</li></ul><p><a href="https://www.oracle.com/java/technologies/javase-downloads.html" target="_blank" rel="noreferrer">https://www.oracle.com/java/technologies/javase-downloads.html</a></p><ul><li>OpenJDK 15 地址：</li></ul><p><a href="https://openjdk.java.net/projects/jdk/15/" target="_blank" rel="noreferrer">https://openjdk.java.net/projects/jdk/15/</a></p><ul><li>参考文章</li></ul><p><a href="https://openjdk.java.net/projects/jdk/15/" target="_blank" rel="noreferrer">https://openjdk.java.net/projects/jdk/15/</a></p><p><a href="https://www.cnblogs.com/javastack/p/13683220.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/javastack/p/13683220.html</a></p><p><a href="https://blog.csdn.net/cyberherman/article/details/109253931" target="_blank" rel="noreferrer">https://blog.csdn.net/cyberherman/article/details/109253931</a></p><p><a href="https://my.oschina.net/u/4262150/blog/4656149" target="_blank" rel="noreferrer">https://my.oschina.net/u/4262150/blog/4656149</a></p><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>`,134)]))}const P=l(c,[["render",r]]);export{C as __pageData,P as default};
