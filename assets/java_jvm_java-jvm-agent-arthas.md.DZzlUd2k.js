import{_ as s,c as e,ai as n,o as t}from"./chunks/framework.BrYByd3F.js";const l="/vitepress-blog-template/images/java/java-jvm-agent-arthas-dashboard.png",r="/vitepress-blog-template/images/java/java-jvm-agent-arthas-trace.png",p="/vitepress-blog-template/images/java/java-jvm-agent-arthas-webconsole.png",i="/vitepress-blog-template/images/java/java-jvm-agent-arthas-2.jpg",v=JSON.parse('{"title":"调试排错 - Java 问题排查之应用在线调试Arthas","description":"","frontmatter":{},"headers":[],"relativePath":"java/jvm/java-jvm-agent-arthas.md","filePath":"java/jvm/java-jvm-agent-arthas.md","lastUpdated":1737706346000}'),o={name:"java/jvm/java-jvm-agent-arthas.md"};function c(h,a,d,b,m,u){return t(),e("div",null,a[0]||(a[0]=[n(`<h1 id="调试排错-java-问题排查之应用在线调试arthas" tabindex="-1">调试排错 - Java 问题排查之应用在线调试Arthas <a class="header-anchor" href="#调试排错-java-问题排查之应用在线调试arthas" aria-label="Permalink to &quot;调试排错 - Java 问题排查之应用在线调试Arthas&quot;">​</a></h1><blockquote><p>本文主要介绍Alibaba开源的Java诊断工具，开源到现在已经几万个点赞了，深受开发者喜爱。@pdai</p></blockquote><h2 id="arthas简介" tabindex="-1">Arthas简介 <a class="header-anchor" href="#arthas简介" aria-label="Permalink to &quot;Arthas简介&quot;">​</a></h2><blockquote><p>在学习Arthas之前，推荐先看上一篇美团技术团队的<a href="https://pdai.tech/md/java/jvm/java-jvm-agent-usage.html" target="_blank" rel="noreferrer">Java 动态调试技术原理及实践</a>，这样你会对它最底层技术有个了解。可以看下文中最后有个对比图：Greys(Arthas也是基于它做的二次开发)和Java-debug-tool。</p></blockquote><h3 id="arthas是什么" tabindex="-1">Arthas是什么 <a class="header-anchor" href="#arthas是什么" aria-label="Permalink to &quot;Arthas是什么&quot;">​</a></h3><p><code>Arthas</code> 是Alibaba开源的Java诊断工具，深受开发者喜爱。</p><h3 id="arthas能解决什么问题" tabindex="-1">Arthas能解决什么问题 <a class="header-anchor" href="#arthas能解决什么问题" aria-label="Permalink to &quot;Arthas能解决什么问题&quot;">​</a></h3><p>当你遇到以下类似问题而束手无策时，<code>Arthas</code>可以帮助你解决：</p><ul><li>这个类从哪个 jar 包加载的? 为什么会报各种类相关的 Exception?</li><li>我改的代码为什么没有执行到? 难道是我没 commit? 分支搞错了?</li><li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗?</li><li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li><li>是否有一个全局视角来查看系统的运行状况?</li><li>有什么办法可以监控到JVM的实时运行状态?</li></ul><p><code>Arthas</code>支持JDK 6+，支持Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 <code>Tab</code> 自动补全功能，进一步方便进行问题的定位和诊断。</p><h3 id="arthas资源推荐" tabindex="-1">Arthas资源推荐 <a class="header-anchor" href="#arthas资源推荐" aria-label="Permalink to &quot;Arthas资源推荐&quot;">​</a></h3><ul><li><a href="https://alibaba.github.io/arthas/" target="_blank" rel="noreferrer">用户文档在新窗口打开</a></li><li><a href="https://alibaba.github.io/arthas/arthas-tutorials?language=cn" target="_blank" rel="noreferrer">官方在线教程(推荐)在新窗口打开</a></li><li><a href="https://alibaba.github.io/arthas/quick-start.html" target="_blank" rel="noreferrer">快速入门在新窗口打开</a></li><li><a href="https://alibaba.github.io/arthas/advanced-use.html" target="_blank" rel="noreferrer">进阶使用在新窗口打开</a></li><li><a href="https://alibaba.github.io/arthas/commands.html" target="_blank" rel="noreferrer">命令列表在新窗口打开</a></li><li><a href="https://alibaba.github.io/arthas/web-console.html" target="_blank" rel="noreferrer">WebConsole在新窗口打开</a></li><li><a href="https://alibaba.github.io/arthas/docker.html" target="_blank" rel="noreferrer">Docker在新窗口打开</a></li><li><a href="https://github.com/alibaba/arthas/issues?q=label%3Auser-case" target="_blank" rel="noreferrer">用户案例在新窗口打开</a></li><li><a href="https://github.com/alibaba/arthas/issues?utf8=%E2%9C%93&amp;q=label%3Aquestion-answered+" target="_blank" rel="noreferrer">常见问题在新窗口打开</a></li></ul><h3 id="arthas基于了哪些工具上发展而来" tabindex="-1">Arthas基于了哪些工具上发展而来 <a class="header-anchor" href="#arthas基于了哪些工具上发展而来" aria-label="Permalink to &quot;Arthas基于了哪些工具上发展而来&quot;">​</a></h3><ul><li><a href="https://github.com/oldmanpushcart/greys-anatomy" target="_blank" rel="noreferrer">greys-anatomy在新窗口打开</a>: Arthas代码基于Greys二次开发而来，非常感谢Greys之前所有的工作，以及Greys原作者对Arthas提出的意见和建议！</li><li><a href="https://github.com/termd/termd" target="_blank" rel="noreferrer">termd在新窗口打开</a>: Arthas的命令行实现基于termd开发，是一款优秀的命令行程序开发框架，感谢termd提供了优秀的框架。</li><li><a href="https://github.com/crashub/crash" target="_blank" rel="noreferrer">crash在新窗口打开</a>: Arthas的文本渲染功能基于crash中的文本渲染功能开发，可以从<a href="https://github.com/crashub/crash/tree/1.3.2/shell" target="_blank" rel="noreferrer">这里在新窗口打开</a>看到源码，感谢crash在这方面所做的优秀工作。</li><li><a href="https://github.com/eclipse-vertx/vert.x/tree/master/src/main/java/io/vertx/core/cli" target="_blank" rel="noreferrer">cli在新窗口打开</a>: Arthas的命令行界面基于vert.x提供的cli库进行开发，感谢vert.x在这方面做的优秀工作。</li><li><a href="https://github.com/skalogs/SkaETL/tree/master/compiler" target="_blank" rel="noreferrer">compiler在新窗口打开</a> Arthas里的内存编绎器代码来源</li><li><a href="https://commons.apache.org/proper/commons-net/" target="_blank" rel="noreferrer">Apache Commons Net在新窗口打开</a> Arthas里的Telnet Client代码来源</li><li><code>JavaAgent</code>：运行在 main方法之前的拦截器，它内定的方法名叫 premain ，也就是说先执行 premain 方法然后再执行 main 方法</li><li><code>ASM</code>：一个通用的Java字节码操作和分析框架。它可以用于修改现有的类或直接以二进制形式动态生成类。ASM提供了一些常见的字节码转换和分析算法，可以从它们构建定制的复杂转换和代码分析工具。ASM提供了与其他Java字节码框架类似的功能，但是主要关注性能。因为它被设计和实现得尽可能小和快，所以非常适合在动态系统中使用(当然也可以以静态方式使用，例如在编译器中)</li></ul><h3 id="同类工具有哪些" tabindex="-1">同类工具有哪些 <a class="header-anchor" href="#同类工具有哪些" aria-label="Permalink to &quot;同类工具有哪些&quot;">​</a></h3><ul><li>BTrace</li><li>美团 Java-debug-tool</li><li><a href="https://github.com/qunarcorp/bistoury" target="_blank" rel="noreferrer">去哪儿Bistoury: 一个集成了Arthas的项目在新窗口打开</a></li><li><a href="https://github.com/XhinLiang/arthas" target="_blank" rel="noreferrer">一个使用MVEL脚本的fork在新窗口打开</a></li></ul><h2 id="arthas入门" tabindex="-1">Arthas入门 <a class="header-anchor" href="#arthas入门" aria-label="Permalink to &quot;Arthas入门&quot;">​</a></h2><h3 id="arthas-上手前" tabindex="-1">Arthas 上手前 <a class="header-anchor" href="#arthas-上手前" aria-label="Permalink to &quot;Arthas 上手前&quot;">​</a></h3><p>推荐先在线使用下arthas：<a href="https://alibaba.github.io/arthas/arthas-tutorials?language=cn" target="_blank" rel="noreferrer">官方在线教程(推荐)在新窗口打开</a></p><h3 id="arthas-安装" tabindex="-1">Arthas 安装 <a class="header-anchor" href="#arthas-安装" aria-label="Permalink to &quot;Arthas 安装&quot;">​</a></h3><p>下载<code>arthas-boot.jar</code>，然后用<code>java -jar</code>的方式启动：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>curl -O https://alibaba.github.io/arthas/arthas-boot.jar</span></span>
<span class="line"><span>java -jar arthas-boot.jar</span></span></code></pre></div><h3 id="arthas-官方案例展示" tabindex="-1">Arthas 官方案例展示 <a class="header-anchor" href="#arthas-官方案例展示" aria-label="Permalink to &quot;Arthas 官方案例展示&quot;">​</a></h3><h4 id="dashboard" tabindex="-1">Dashboard <a class="header-anchor" href="#dashboard" aria-label="Permalink to &quot;Dashboard&quot;">​</a></h4><ul><li><a href="https://alibaba.github.io/arthas/dashboard" target="_blank" rel="noreferrer">https://alibaba.github.io/arthas/dashboard</a></li></ul><p><img src="`+l+`" alt="dashboard"></p><h4 id="thread" tabindex="-1">Thread <a class="header-anchor" href="#thread" aria-label="Permalink to &quot;Thread&quot;">​</a></h4><p>一目了然的了解系统的状态，哪些线程比较占cpu? 他们到底在做什么?</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ thread -n 3</span></span>
<span class="line"><span>&quot;as-command-execute-daemon&quot; Id=29 cpuUsage=75% RUNNABLE</span></span>
<span class="line"><span>    at sun.management.ThreadImpl.dumpThreads0(Native Method)</span></span>
<span class="line"><span>    at sun.management.ThreadImpl.getThreadInfo(ThreadImpl.java:440)</span></span>
<span class="line"><span>    at com.taobao.arthas.core.command.monitor200.ThreadCommand$1.action(ThreadCommand.java:58)</span></span>
<span class="line"><span>    at com.taobao.arthas.core.command.handler.AbstractCommandHandler.execute(AbstractCommandHandler.java:238)</span></span>
<span class="line"><span>    at com.taobao.arthas.core.command.handler.DefaultCommandHandler.handleCommand(DefaultCommandHandler.java:67)</span></span>
<span class="line"><span>    at com.taobao.arthas.core.server.ArthasServer$4.run(ArthasServer.java:276)</span></span>
<span class="line"><span>    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</span></span>
<span class="line"><span>    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</span></span>
<span class="line"><span>    at java.lang.Thread.run(Thread.java:745)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    Number of locked synchronizers = 1</span></span>
<span class="line"><span>    - java.util.concurrent.ThreadPoolExecutor$Worker@6cd0b6f8</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&quot;as-session-expire-daemon&quot; Id=25 cpuUsage=24% TIMED_WAITING</span></span>
<span class="line"><span>    at java.lang.Thread.sleep(Native Method)</span></span>
<span class="line"><span>    at com.taobao.arthas.core.server.DefaultSessionManager$2.run(DefaultSessionManager.java:85)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&quot;Reference Handler&quot; Id=2 cpuUsage=0% WAITING on java.lang.ref.Reference$Lock@69ba0f27</span></span>
<span class="line"><span>    at java.lang.Object.wait(Native Method)</span></span>
<span class="line"><span>    -  waiting on java.lang.ref.Reference$Lock@69ba0f27</span></span>
<span class="line"><span>    at java.lang.Object.wait(Object.java:503)</span></span>
<span class="line"><span>    at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:133)</span></span></code></pre></div><h4 id="jad" tabindex="-1">jad <a class="header-anchor" href="#jad" aria-label="Permalink to &quot;jad&quot;">​</a></h4><p>对类进行反编译:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ jad javax.servlet.Servlet</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ClassLoader:</span></span>
<span class="line"><span>+-java.net.URLClassLoader@6108b2d7</span></span>
<span class="line"><span>  +-sun.misc.Launcher$AppClassLoader@18b4aac2</span></span>
<span class="line"><span>    +-sun.misc.Launcher$ExtClassLoader@1ddf84b8</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Location:</span></span>
<span class="line"><span>/Users/xxx/work/test/lib/servlet-api.jar</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/*</span></span>
<span class="line"><span> * Decompiled with CFR 0_122.</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>package javax.servlet;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import java.io.IOException;</span></span>
<span class="line"><span>import javax.servlet.ServletConfig;</span></span>
<span class="line"><span>import javax.servlet.ServletException;</span></span>
<span class="line"><span>import javax.servlet.ServletRequest;</span></span>
<span class="line"><span>import javax.servlet.ServletResponse;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>public interface Servlet {</span></span>
<span class="line"><span>    public void init(ServletConfig var1) throws ServletException;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public ServletConfig getServletConfig();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public void service(ServletRequest var1, ServletResponse var2) throws ServletException, IOException;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public String getServletInfo();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public void destroy();</span></span>
<span class="line"><span>}</span></span></code></pre></div><h4 id="mc" tabindex="-1">mc <a class="header-anchor" href="#mc" aria-label="Permalink to &quot;mc&quot;">​</a></h4><p>Memory Compiler/内存编译器，编译<code>.java</code>文件生成<code>.class</code>。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mc /tmp/Test.java</span></span></code></pre></div><h4 id="redefine" tabindex="-1">redefine <a class="header-anchor" href="#redefine" aria-label="Permalink to &quot;redefine&quot;">​</a></h4><p>加载外部的<code>.class</code>文件，redefine jvm已加载的类。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>redefine /tmp/Test.class</span></span>
<span class="line"><span>redefine -c 327a647b /tmp/Test.class /tmp/Test\\$Inner.class</span></span></code></pre></div><h4 id="sc" tabindex="-1">sc <a class="header-anchor" href="#sc" aria-label="Permalink to &quot;sc&quot;">​</a></h4><p>查找JVM中已经加载的类</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ sc -d org.springframework.web.context.support.XmlWebApplicationContext</span></span>
<span class="line"><span> class-info        org.springframework.web.context.support.XmlWebApplicationContext</span></span>
<span class="line"><span> code-source       /Users/xxx/work/test/WEB-INF/lib/spring-web-3.2.11.RELEASE.jar</span></span>
<span class="line"><span> name              org.springframework.web.context.support.XmlWebApplicationContext</span></span>
<span class="line"><span> isInterface       false</span></span>
<span class="line"><span> isAnnotation      false</span></span>
<span class="line"><span> isEnum            false</span></span>
<span class="line"><span> isAnonymousClass  false</span></span>
<span class="line"><span> isArray           false</span></span>
<span class="line"><span> isLocalClass      false</span></span>
<span class="line"><span> isMemberClass     false</span></span>
<span class="line"><span> isPrimitive       false</span></span>
<span class="line"><span> isSynthetic       false</span></span>
<span class="line"><span> simple-name       XmlWebApplicationContext</span></span>
<span class="line"><span> modifier          public</span></span>
<span class="line"><span> annotation</span></span>
<span class="line"><span> interfaces</span></span>
<span class="line"><span> super-class       +-org.springframework.web.context.support.AbstractRefreshableWebApplicationContext</span></span>
<span class="line"><span>                     +-org.springframework.context.support.AbstractRefreshableConfigApplicationContext</span></span>
<span class="line"><span>                       +-org.springframework.context.support.AbstractRefreshableApplicationContext</span></span>
<span class="line"><span>                         +-org.springframework.context.support.AbstractApplicationContext</span></span>
<span class="line"><span>                           +-org.springframework.core.io.DefaultResourceLoader</span></span>
<span class="line"><span>                             +-java.lang.Object</span></span>
<span class="line"><span> class-loader      +-org.apache.catalina.loader.ParallelWebappClassLoader</span></span>
<span class="line"><span>                     +-java.net.URLClassLoader@6108b2d7</span></span>
<span class="line"><span>                       +-sun.misc.Launcher$AppClassLoader@18b4aac2</span></span>
<span class="line"><span>                         +-sun.misc.Launcher$ExtClassLoader@1ddf84b8</span></span>
<span class="line"><span> classLoaderHash   25131501</span></span></code></pre></div><h4 id="stack" tabindex="-1">stack <a class="header-anchor" href="#stack" aria-label="Permalink to &quot;stack&quot;">​</a></h4><p>查看方法 <code>test.arthas.TestStack#doGet</code> 的调用堆栈：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ stack test.arthas.TestStack doGet</span></span>
<span class="line"><span>Press Ctrl+C to abort.</span></span>
<span class="line"><span>Affect(class-cnt:1 , method-cnt:1) cost in 286 ms.</span></span>
<span class="line"><span>ts=2018-09-18 10:11:45;thread_name=http-bio-8080-exec-10;id=d9;is_daemon=true;priority=5;TCCL=org.apache.catalina.loader.ParallelWebappClassLoader@25131501</span></span>
<span class="line"><span>    @test.arthas.TestStack.doGet()</span></span>
<span class="line"><span>        at javax.servlet.http.HttpServlet.service(HttpServlet.java:624)</span></span>
<span class="line"><span>        at javax.servlet.http.HttpServlet.service(HttpServlet.java:731)</span></span>
<span class="line"><span>        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:303)</span></span>
<span class="line"><span>        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)</span></span>
<span class="line"><span>        at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)</span></span>
<span class="line"><span>        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)</span></span>
<span class="line"><span>        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)</span></span>
<span class="line"><span>        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)</span></span>
<span class="line"><span>        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)</span></span>
<span class="line"><span>        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:220)</span></span>
<span class="line"><span>        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:110)</span></span>
<span class="line"><span>        ...</span></span>
<span class="line"><span>        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:169)</span></span>
<span class="line"><span>        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:103)</span></span>
<span class="line"><span>        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116)</span></span>
<span class="line"><span>        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:451)</span></span>
<span class="line"><span>        at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1121)</span></span>
<span class="line"><span>        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:637)</span></span>
<span class="line"><span>        at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:316)</span></span>
<span class="line"><span>        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)</span></span>
<span class="line"><span>        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)</span></span>
<span class="line"><span>        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)</span></span>
<span class="line"><span>        at java.lang.Thread.run(Thread.java:745)</span></span></code></pre></div><h4 id="trace" tabindex="-1">Trace <a class="header-anchor" href="#trace" aria-label="Permalink to &quot;Trace&quot;">​</a></h4><p>观察方法执行的时候哪个子调用比较慢:</p><p><img src="`+r+`" alt="trace"></p><h4 id="watch" tabindex="-1">Watch <a class="header-anchor" href="#watch" aria-label="Permalink to &quot;Watch&quot;">​</a></h4><p>观察方法 <code>test.arthas.TestWatch#doGet</code> 执行的入参，仅当方法抛出异常时才输出。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ watch test.arthas.TestWatch doGet {params[0], throwExp} -e</span></span>
<span class="line"><span>Press Ctrl+C to abort.</span></span>
<span class="line"><span>Affect(class-cnt:1 , method-cnt:1) cost in 65 ms.</span></span>
<span class="line"><span>ts=2018-09-18 10:26:28;result=@ArrayList[</span></span>
<span class="line"><span>    @RequestFacade[org.apache.catalina.connector.RequestFacade@79f922b2],</span></span>
<span class="line"><span>    @NullPointerException[java.lang.NullPointerException],</span></span>
<span class="line"><span>]</span></span></code></pre></div><h4 id="monitor" tabindex="-1">Monitor <a class="header-anchor" href="#monitor" aria-label="Permalink to &quot;Monitor&quot;">​</a></h4><p>监控某个特殊方法的调用统计数据，包括总调用次数，平均rt，成功率等信息，每隔5秒输出一次。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ monitor -c 5 org.apache.dubbo.demo.provider.DemoServiceImpl sayHello</span></span>
<span class="line"><span>Press Ctrl+C to abort.</span></span>
<span class="line"><span>Affect(class-cnt:1 , method-cnt:1) cost in 109 ms.</span></span>
<span class="line"><span> timestamp            class                                           method    total  success  fail  avg-rt(ms)  fail-rate</span></span>
<span class="line"><span>----------------------------------------------------------------------------------------------------------------------------</span></span>
<span class="line"><span> 2018-09-20 09:45:32  org.apache.dubbo.demo.provider.DemoServiceImpl  sayHello  5      5        0     0.67        0.00%</span></span>
<span class="line"><span></span></span>
<span class="line"><span> timestamp            class                                           method    total  success  fail  avg-rt(ms)  fail-rate</span></span>
<span class="line"><span>----------------------------------------------------------------------------------------------------------------------------</span></span>
<span class="line"><span> 2018-09-20 09:45:37  org.apache.dubbo.demo.provider.DemoServiceImpl  sayHello  5      5        0     1.00        0.00%</span></span>
<span class="line"><span></span></span>
<span class="line"><span> timestamp            class                                           method    total  success  fail  avg-rt(ms)  fail-rate</span></span>
<span class="line"><span>----------------------------------------------------------------------------------------------------------------------------</span></span>
<span class="line"><span> 2018-09-20 09:45:42  org.apache.dubbo.demo.provider.DemoServiceImpl  sayHello  5      5        0     0.43        0.00%</span></span></code></pre></div><h4 id="time-tunnel-tt" tabindex="-1">Time Tunnel(tt) <a class="header-anchor" href="#time-tunnel-tt" aria-label="Permalink to &quot;Time Tunnel(tt)&quot;">​</a></h4><p>记录方法调用信息，支持事后查看方法调用的参数，返回值，抛出的异常等信息，仿佛穿越时空隧道回到调用现场一般。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ tt -t org.apache.dubbo.demo.provider.DemoServiceImpl sayHello</span></span>
<span class="line"><span>Press Ctrl+C to abort.</span></span>
<span class="line"><span>Affect(class-cnt:1 , method-cnt:1) cost in 75 ms.</span></span>
<span class="line"><span> INDEX   TIMESTAMP            COST(ms)  IS-RET  IS-EXP   OBJECT         CLASS                          METHOD</span></span>
<span class="line"><span>-------------------------------------------------------------------------------------------------------------------------------------</span></span>
<span class="line"><span> 1000    2018-09-20 09:54:10  1.971195  true    false    0x55965cca     DemoServiceImpl                sayHello</span></span>
<span class="line"><span> 1001    2018-09-20 09:54:11  0.215685  true    false    0x55965cca     DemoServiceImpl                sayHello</span></span>
<span class="line"><span> 1002    2018-09-20 09:54:12  0.236303  true    false    0x55965cca     DemoServiceImpl                sayHello</span></span>
<span class="line"><span> 1003    2018-09-20 09:54:13  0.159598  true    false    0x55965cca     DemoServiceImpl                sayHello</span></span>
<span class="line"><span> 1004    2018-09-20 09:54:14  0.201982  true    false    0x55965cca     DemoServiceImpl                sayHello</span></span>
<span class="line"><span> 1005    2018-09-20 09:54:15  0.214205  true    false    0x55965cca     DemoServiceImpl                sayHello</span></span>
<span class="line"><span> 1006    2018-09-20 09:54:16  0.241863  true    false    0x55965cca     DemoServiceImpl                sayHello</span></span>
<span class="line"><span> 1007    2018-09-20 09:54:17  0.305747  true    false    0x55965cca     DemoServiceImpl                sayHello</span></span>
<span class="line"><span> 1008    2018-09-20 09:54:18  0.18468   true    false    0x55965cca     DemoServiceImpl                sayHello</span></span></code></pre></div><h4 id="classloader" tabindex="-1">Classloader <a class="header-anchor" href="#classloader" aria-label="Permalink to &quot;Classloader&quot;">​</a></h4><p>了解当前系统中有多少类加载器，以及每个加载器加载的类数量，帮助您判断是否有类加载器泄露。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ classloader</span></span>
<span class="line"><span> name                                                  numberOfInstances  loadedCountTotal</span></span>
<span class="line"><span> BootstrapClassLoader                                  1                  3346</span></span>
<span class="line"><span> com.taobao.arthas.agent.ArthasClassloader             1                  1262</span></span>
<span class="line"><span> java.net.URLClassLoader                               2                  1033</span></span>
<span class="line"><span> org.apache.catalina.loader.ParallelWebappClassLoader  1                  628</span></span>
<span class="line"><span> sun.reflect.DelegatingClassLoader                     166                166</span></span>
<span class="line"><span> sun.misc.Launcher$AppClassLoader                      1                  31</span></span>
<span class="line"><span> com.alibaba.fastjson.util.ASMClassLoader              6                  15</span></span>
<span class="line"><span> sun.misc.Launcher$ExtClassLoader                      1                  7</span></span>
<span class="line"><span> org.jvnet.hk2.internal.DelegatingClassLoader          2                  2</span></span>
<span class="line"><span> sun.reflect.misc.MethodUtil                           1                  1</span></span></code></pre></div><h4 id="web-console" tabindex="-1">Web Console <a class="header-anchor" href="#web-console" aria-label="Permalink to &quot;Web Console&quot;">​</a></h4><ul><li><a href="https://alibaba.github.io/arthas/web-console" target="_blank" rel="noreferrer">https://alibaba.github.io/arthas/web-console</a></li></ul><p><img src="`+p+`" alt="web console"></p><h3 id="arthas-命令集" tabindex="-1">Arthas 命令集 <a class="header-anchor" href="#arthas-命令集" aria-label="Permalink to &quot;Arthas 命令集&quot;">​</a></h3><h4 id="基础命令" tabindex="-1">基础命令 <a class="header-anchor" href="#基础命令" aria-label="Permalink to &quot;基础命令&quot;">​</a></h4><ul><li>help——查看命令帮助信息</li><li><a href="https://github.com/alibaba/arthas/blob/master/site/src/site/sphinx/cat.md" target="_blank" rel="noreferrer">cat在新窗口打开</a>——打印文件内容，和linux里的cat命令类似</li><li>[grep]](<a href="https://github.com/alibaba/arthas/blob/master/site/src/site/sphinx/grep.md" target="_blank" rel="noreferrer">https://github.com/alibaba/arthas/blob/master/site/src/site/sphinx/grep.md</a>)——匹配查找，和linux里的grep命令类似</li><li><a href="https://github.com/alibaba/arthas/blob/master/site/src/site/sphinx/pwd.md" target="_blank" rel="noreferrer">pwd在新窗口打开</a>——返回当前的工作目录，和linux命令类似</li><li>cls——清空当前屏幕区域</li><li>session——查看当前会话的信息</li><li><a href="https://github.com/alibaba/arthas/blob/master/site/src/site/sphinx/reset.md" target="_blank" rel="noreferrer">reset在新窗口打开</a>——重置增强类，将被 Arthas 增强过的类全部还原，Arthas 服务端关闭时会重置所有增强过的类</li><li>version——输出当前目标 Java 进程所加载的 Arthas 版本号</li><li>history——打印命令历史</li><li>quit——退出当前 Arthas 客户端，其他 Arthas 客户端不受影响</li><li>stop/shutdown——关闭 Arthas 服务端，所有 Arthas 客户端全部退出</li><li><a href="https://github.com/alibaba/arthas/blob/master/site/src/site/sphinx/keymap.md" target="_blank" rel="noreferrer">keymap在新窗口打开</a>——Arthas快捷键列表及自定义快捷键</li></ul><h4 id="jvm相关" tabindex="-1">jvm相关 <a class="header-anchor" href="#jvm相关" aria-label="Permalink to &quot;jvm相关&quot;">​</a></h4><ul><li><a href="https://github.com/alibaba/arthas/blob/master/site/src/site/sphinx/dashboard.md" target="_blank" rel="noreferrer">dashboard在新窗口打开</a>——当前系统的实时数据面板</li><li><a href="https://github.com/alibaba/arthas/blob/master/site/src/site/sphinx/thread.md" target="_blank" rel="noreferrer">thread在新窗口打开</a>——查看当前 JVM 的线程堆栈信息</li><li><a href="https://github.com/alibaba/arthas/blob/master/site/src/site/sphinx/jvm.md" target="_blank" rel="noreferrer">jvm在新窗口打开</a>——查看当前 JVM 的信息</li><li><a href="https://github.com/alibaba/arthas/blob/master/site/src/site/sphinx/sysprop.md" target="_blank" rel="noreferrer">sysprop在新窗口打开</a>——查看和修改JVM的系统属性</li><li><a href="https://github.com/alibaba/arthas/blob/master/site/src/site/sphinx/sysenv.md" target="_blank" rel="noreferrer">sysenv在新窗口打开</a>——查看JVM的环境变量</li><li><a href="https://github.com/alibaba/arthas/blob/master/site/src/site/sphinx/vmoption.md" target="_blank" rel="noreferrer">vmoption在新窗口打开</a>——查看和修改JVM里诊断相关的option</li><li><a href="https://github.com/alibaba/arthas/blob/master/site/src/site/sphinx/logger.md" target="_blank" rel="noreferrer">logger在新窗口打开</a>——查看和修改logger</li><li><a href="https://github.com/alibaba/arthas/blob/master/site/src/site/sphinx/getstatic.md" target="_blank" rel="noreferrer">getstatic在新窗口打开</a>——查看类的静态属性</li><li><a href="https://github.com/alibaba/arthas/blob/master/site/src/site/sphinx/ognl.md" target="_blank" rel="noreferrer">ognl在新窗口打开</a>——执行ognl表达式</li><li><a href="https://github.com/alibaba/arthas/blob/master/site/src/site/sphinx/mbean.md" target="_blank" rel="noreferrer">mbean在新窗口打开</a>——查看 Mbean 的信息</li><li><a href="https://github.com/alibaba/arthas/blob/master/site/src/site/sphinx/heapdump.md" target="_blank" rel="noreferrer">heapdump在新窗口打开</a>——dump java heap, 类似jmap命令的heap dump功能</li></ul><h4 id="class-classloader相关" tabindex="-1">class/classloader相关 <a class="header-anchor" href="#class-classloader相关" aria-label="Permalink to &quot;class/classloader相关&quot;">​</a></h4><ul><li><a href="https://github.com/alibaba/arthas/blob/master/site/src/site/sphinx/sc.md" target="_blank" rel="noreferrer">sc在新窗口打开</a>——查看JVM已加载的类信息</li><li><a href="https://github.com/alibaba/arthas/blob/master/site/src/site/sphinx/sm.md" target="_blank" rel="noreferrer">sm在新窗口打开</a>——查看已加载类的方法信息</li><li><a href="https://github.com/alibaba/arthas/blob/master/site/src/site/sphinx/jad.md" target="_blank" rel="noreferrer">jad在新窗口打开</a>——反编译指定已加载类的源码</li><li><a href="https://github.com/alibaba/arthas/blob/master/site/src/site/sphinx/mc.md" target="_blank" rel="noreferrer">mc在新窗口打开</a>——内存编绎器，内存编绎<code>.java</code>文件为<code>.class</code>文件</li><li><a href="https://github.com/alibaba/arthas/blob/master/site/src/site/sphinx/redefine.md" target="_blank" rel="noreferrer">redefine在新窗口打开</a>——加载外部的<code>.class</code>文件，redefine到JVM里</li><li><a href="https://github.com/alibaba/arthas/blob/master/site/src/site/sphinx/dump.md" target="_blank" rel="noreferrer">dump在新窗口打开</a>——dump 已加载类的 byte code 到特定目录</li><li><a href="https://github.com/alibaba/arthas/blob/master/site/src/site/sphinx/classloader.md" target="_blank" rel="noreferrer">classloader在新窗口打开</a>——查看classloader的继承树，urls，类加载信息，使用classloader去getResource</li></ul><h4 id="monitor-watch-trace相关" tabindex="-1">monitor/watch/trace相关 <a class="header-anchor" href="#monitor-watch-trace相关" aria-label="Permalink to &quot;monitor/watch/trace相关&quot;">​</a></h4><blockquote><p>请注意，这些命令，都通过字节码增强技术来实现的，会在指定类的方法中插入一些切面来实现数据统计和观测，因此在线上、预发使用时，请尽量明确需要观测的类、方法以及条件，诊断结束要执行 <code>shutdown</code> 或将增强过的类执行 <code>reset</code> 命令。</p></blockquote><ul><li><a href="https://github.com/alibaba/arthas/blob/master/site/src/site/sphinx/monitor.md" target="_blank" rel="noreferrer">monitor在新窗口打开</a>——方法执行监控</li><li><a href="https://github.com/alibaba/arthas/blob/master/site/src/site/sphinx/watch.md" target="_blank" rel="noreferrer">watch在新窗口打开</a>——方法执行数据观测</li><li><a href="https://github.com/alibaba/arthas/blob/master/site/src/site/sphinx/trace.md" target="_blank" rel="noreferrer">trace在新窗口打开</a>——方法内部调用路径，并输出方法路径上的每个节点上耗时</li><li><a href="https://github.com/alibaba/arthas/blob/master/site/src/site/sphinx/stack.md" target="_blank" rel="noreferrer">stack在新窗口打开</a>——输出当前方法被调用的调用路径</li><li><a href="https://github.com/alibaba/arthas/blob/master/site/src/site/sphinx/tt.md" target="_blank" rel="noreferrer">tt在新窗口打开</a>——方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测</li></ul><h4 id="options" tabindex="-1">options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;options&quot;">​</a></h4><ul><li><a href="https://github.com/alibaba/arthas/blob/master/site/src/site/sphinx/options.md" target="_blank" rel="noreferrer">options在新窗口打开</a>——查看或设置Arthas全局开关</li></ul><h4 id="管道" tabindex="-1">管道 <a class="header-anchor" href="#管道" aria-label="Permalink to &quot;管道&quot;">​</a></h4><p>Arthas支持使用管道对上述命令的结果进行进一步的处理，如<code>sm java.lang.String * | grep &#39;index&#39;</code></p><ul><li>grep——搜索满足条件的\b结果</li><li>plaintext——将\b命令的结果去除ANSI颜色</li><li>wc——按行统计输出结果</li></ul><h4 id="后台异步任务" tabindex="-1">后台异步任务 <a class="header-anchor" href="#后台异步任务" aria-label="Permalink to &quot;后台异步任务&quot;">​</a></h4><p>当线上出现偶发的问题，比如需要watch某个条件，而这个条件一天可能才会出现一次时，异步后台任务就派上用场了，详情请参考<a href="https://github.com/alibaba/arthas/blob/master/site/src/site/sphinx/async.md" target="_blank" rel="noreferrer">这里在新窗口打开</a></p><ul><li>使用 &gt; 将结果重写向到日志文件，使用 &amp; 指定命令是后台运行，session断开不影响任务执行(生命周期默认为1天)</li><li>jobs——列出所有job</li><li>kill——强制终止任务</li><li>fg——将暂停的任务拉到前台执行</li><li>bg——将暂停的任务放到后台执行</li></ul><h4 id="web-console-1" tabindex="-1">Web Console <a class="header-anchor" href="#web-console-1" aria-label="Permalink to &quot;Web Console&quot;">​</a></h4><p>通过websocket连接Arthas。</p><ul><li><a href="https://github.com/alibaba/arthas/blob/master/site/src/site/sphinx/web-console.md" target="_blank" rel="noreferrer">Web Console在新窗口打开</a></li></ul><h4 id="用户数据回报" tabindex="-1">用户数据回报 <a class="header-anchor" href="#用户数据回报" aria-label="Permalink to &quot;用户数据回报&quot;">​</a></h4><p>在<code>3.1.4</code>版本后，增加了用户数据回报功能，方便统一做安全或者历史数据统计。</p><p>在启动时，指定<code>stat-url</code>，就会回报执行的每一行命令，比如： <code>./as.sh --stat-url &#39;http://192.168.10.11:8080/api/stat&#39;</code></p><p>在tunnel server里有一个示例的回报代码，用户可以自己在服务器上实现。</p><p><a href="https://github.com/alibaba/arthas/blob/master/site/src/site/sphinx/https://github.com/alibaba/arthas/blob/master/tunnel-server/src/main/java/com/alibaba/arthas/tunnel/server/app/web/StatController.java" target="_blank" rel="noreferrer">StatController.java在新窗口打开</a></p><h4 id="其他特性" tabindex="-1">其他特性 <a class="header-anchor" href="#其他特性" aria-label="Permalink to &quot;其他特性&quot;">​</a></h4><ul><li><a href="https://github.com/alibaba/arthas/blob/master/site/src/site/sphinx/async.md" target="_blank" rel="noreferrer">异步命令支持在新窗口打开</a></li><li><a href="https://github.com/alibaba/arthas/blob/master/site/src/site/sphinx/save-log.md" target="_blank" rel="noreferrer">执行结果存日志在新窗口打开</a></li><li><a href="https://github.com/alibaba/arthas/blob/master/site/src/site/sphinx/batch-support.md" target="_blank" rel="noreferrer">批处理的支持在新窗口打开</a></li><li><a href="https://github.com/alibaba/arthas/blob/master/site/src/site/sphinx/https://github.com/alibaba/arthas/issues/11" target="_blank" rel="noreferrer">ognl表达式的用法说明在新窗口打开</a></li></ul><h2 id="arthas场景实战" tabindex="-1">Arthas场景实战 <a class="header-anchor" href="#arthas场景实战" aria-label="Permalink to &quot;Arthas场景实战&quot;">​</a></h2><h3 id="查看最繁忙的线程-以及是否有阻塞情况发生" tabindex="-1">查看最繁忙的线程，以及是否有阻塞情况发生? <a class="header-anchor" href="#查看最繁忙的线程-以及是否有阻塞情况发生" aria-label="Permalink to &quot;查看最繁忙的线程，以及是否有阻塞情况发生?&quot;">​</a></h3><blockquote><p>场景：我想看下查看最繁忙的线程，以及是否有阻塞情况发生? 常规查看线程，一般我们可以通过 top 等系统命令进行查看，但是那毕竟要很多个步骤，很麻烦。</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>thread -n 3 # 查看最繁忙的三个线程栈信息</span></span>
<span class="line"><span>thread  # 以直观的方式展现所有的线程情况</span></span>
<span class="line"><span>thread -b #找出当前阻塞其他线程的线程</span></span></code></pre></div><h3 id="确认某个类是否已被系统加载" tabindex="-1">确认某个类是否已被系统加载? <a class="header-anchor" href="#确认某个类是否已被系统加载" aria-label="Permalink to &quot;确认某个类是否已被系统加载?&quot;">​</a></h3><blockquote><p>场景：我新写了一个类或者一个方法，我想知道新写的代码是否被部署了?</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 即可以找到需要的类全路径，如果存在的话</span></span>
<span class="line"><span>sc *MyServlet</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 查看这个某个类所有的方法</span></span>
<span class="line"><span>sm pdai.tech.servlet.TestMyServlet *</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 查看某个方法的信息，如果存在的话</span></span>
<span class="line"><span>sm pdai.tech.servlet.TestMyServlet testMethod</span></span></code></pre></div><h3 id="如何查看一个class类的源码信息" tabindex="-1">如何查看一个class类的源码信息? <a class="header-anchor" href="#如何查看一个class类的源码信息" aria-label="Permalink to &quot;如何查看一个class类的源码信息?&quot;">​</a></h3><blockquote><p>场景：我新修改的内容在方法内部，而上一个步骤只能看到方法，这时候可以反编译看下源码</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 直接反编译出java 源代码，包含一此额外信息的</span></span>
<span class="line"><span>jad pdai.tech.servlet.TestMyServlet</span></span></code></pre></div><h3 id="重要-如何跟踪某个方法的返回值、入参" tabindex="-1">重要：如何跟踪某个方法的返回值、入参.... ? <a class="header-anchor" href="#重要-如何跟踪某个方法的返回值、入参" aria-label="Permalink to &quot;重要：如何跟踪某个方法的返回值、入参.... ?&quot;">​</a></h3><blockquote><p>场景：我想看下我新加的方法在线运行的参数和返回值?</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 同时监控入参，返回值，及异常</span></span>
<span class="line"><span>watch pdai.tech.servlet.TestMyServlet testMethod &quot;{params, returnObj, throwExp}&quot; -e -x 2</span></span></code></pre></div><p>具体看watch命令。</p><h3 id="如何看方法调用栈的信息" tabindex="-1">如何看方法调用栈的信息? <a class="header-anchor" href="#如何看方法调用栈的信息" aria-label="Permalink to &quot;如何看方法调用栈的信息?&quot;">​</a></h3><blockquote><p>场景：我想看下某个方法的调用栈的信息?</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>stack pdai.tech.servlet.TestMyServlet testMethod</span></span></code></pre></div><p>运行此命令之后需要即时触发方法才会有响应的信息打印在控制台上</p><h3 id="重要-找到最耗时的方法调用" tabindex="-1">重要：找到最耗时的方法调用? <a class="header-anchor" href="#重要-找到最耗时的方法调用" aria-label="Permalink to &quot;重要：找到最耗时的方法调用?&quot;">​</a></h3><blockquote><p>场景：testMethod这个方法入口响应很慢，如何找到最耗时的子调用?</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 执行的时候每个子调用的运行时长，可以找到最耗时的子调用。</span></span>
<span class="line"><span>trace pdai.tech.servlet.TestMyServlet testMethod</span></span></code></pre></div><p>运行此命令之后需要即时触发方法才会有响应的信息打印在控制台上，然后一层一层看子调用。</p><h3 id="重要-如何临时更改代码运行" tabindex="-1">重要：如何临时更改代码运行? <a class="header-anchor" href="#重要-如何临时更改代码运行" aria-label="Permalink to &quot;重要：如何临时更改代码运行?&quot;">​</a></h3><blockquote><p>场景：我找到了问题所在，能否线上直接修改测试，而不需要在本地改了代码后，重新打包部署，然后重启观察效果?</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 先反编译出class源码</span></span>
<span class="line"><span>jad --source-only com.example.demo.arthas.user.UserController &gt; /tmp/UserController.java  </span></span>
<span class="line"><span></span></span>
<span class="line"><span># 然后使用外部工具编辑内容</span></span>
<span class="line"><span>mc /tmp/UserController.java -d /tmp  # 再编译成class</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 最后，重新载入定义的类，就可以实时验证你的猜测了</span></span>
<span class="line"><span>redefine /tmp/com/example/demo/arthas/user/UserController.class</span></span></code></pre></div><p>如上，是直接更改线上代码的方式，但是一般好像是编译不成功的。所以，最好是本地ide编译成 class文件后，再上传替换为好！</p><p>总之，已经完全不用重启和发布了！这个功能真的很方便，比起重启带来的代价，真的是不可比的。比如，重启时可能导致负载重分配，选主等等问题，就不是你能控制的了。</p><h3 id="我如何测试某个方法的性能问题" tabindex="-1">我如何测试某个方法的性能问题? <a class="header-anchor" href="#我如何测试某个方法的性能问题" aria-label="Permalink to &quot;我如何测试某个方法的性能问题?&quot;">​</a></h3><blockquote><p>场景：我想看下某个方法的性能</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>monitor -c 5 demo.MathGame primeFactors</span></span></code></pre></div><h3 id="更多" tabindex="-1">更多 <a class="header-anchor" href="#更多" aria-label="Permalink to &quot;更多&quot;">​</a></h3><p>请参考: <a href="https://github.com/alibaba/arthas/issues?q=label%3Auser-case" target="_blank" rel="noreferrer">官方Issue墙在新窗口打开</a></p><h2 id="arthas源码" tabindex="-1">Arthas源码 <a class="header-anchor" href="#arthas源码" aria-label="Permalink to &quot;Arthas源码&quot;">​</a></h2><p>首先我们先放出一张整体宏观的模块调用图：</p><p><img src="`+i+'" alt="trace"></p><p>源码理解可以看移步这两篇文章:</p><ul><li><a href="https://www.jianshu.com/p/70c1c55f12ef" target="_blank" rel="noreferrer">什么是 Arthas在新窗口打开</a></li><li><a href="https://yq.aliyun.com/articles/704228" target="_blank" rel="noreferrer">Arthas阅读在新窗口打开</a></li></ul><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://www.cnblogs.com/muxuanchan/p/10097639.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/muxuanchan/p/10097639.html</a></li><li><a href="https://www.cnblogs.com/yougewe/p/10770690.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/yougewe/p/10770690.html</a></li><li><a href="https://help.aliyun.com/document%5C_detail/112975.html" target="_blank" rel="noreferrer">https://help.aliyun.com/document\\_detail/112975.html</a></li></ul><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>',130)]))}const f=s(o,[["render",c]]);export{v as __pageData,f as default};
