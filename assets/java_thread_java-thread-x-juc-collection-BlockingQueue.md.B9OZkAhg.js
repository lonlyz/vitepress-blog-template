import{_ as a,a as n}from"./chunks/java-thread-x-blocking-deque-1.CwPU0N7J.js";import{_ as s,c as t,ai as l,o as i}from"./chunks/framework.BrYByd3F.js";const b=JSON.parse('{"title":"JUC集合: BlockingQueue详解","description":"","frontmatter":{},"headers":[],"relativePath":"java/thread/java-thread-x-juc-collection-BlockingQueue.md","filePath":"java/thread/java-thread-x-juc-collection-BlockingQueue.md","lastUpdated":1737706346000}'),p={name:"java/thread/java-thread-x-juc-collection-BlockingQueue.md"};function u(o,e,c,d,r,g){return i(),t("div",null,e[0]||(e[0]=[l('<h1 id="juc集合-blockingqueue详解" tabindex="-1">JUC集合: BlockingQueue详解 <a class="header-anchor" href="#juc集合-blockingqueue详解" aria-label="Permalink to &quot;JUC集合: BlockingQueue详解&quot;">​</a></h1><blockquote><p>JUC里的 BlockingQueue 接口表示一个线程安放入和提取实例的队列。本文将给你演示如何使用这个 BlockingQueue，不会讨论如何在 Java 中实现一个你自己的 BlockingQueue。@pdai</p></blockquote><h2 id="带着bat大厂的面试问题去理解" tabindex="-1">带着BAT大厂的面试问题去理解 <a class="header-anchor" href="#带着bat大厂的面试问题去理解" aria-label="Permalink to &quot;带着BAT大厂的面试问题去理解&quot;">​</a></h2><p>提示</p><p>请带着这些问题继续后文，会很大程度上帮助你更好的理解相关知识点。@pdai</p><ul><li>什么是BlockingDeque?</li><li>BlockingQueue大家族有哪些? ArrayBlockingQueue, DelayQueue, LinkedBlockingQueue, SynchronousQueue...</li><li>BlockingQueue适合用在什么样的场景?</li><li>BlockingQueue常用的方法?</li><li>BlockingQueue插入方法有哪些? 这些方法(<code>add(o)</code>,<code>offer(o)</code>,<code>put(o)</code>,<code>offer(o, timeout, timeunit)</code>)的区别是什么?</li><li>BlockingDeque 与BlockingQueue有何关系，请对比下它们的方法?</li><li>BlockingDeque适合用在什么样的场景?</li><li>BlockingDeque大家族有哪些?</li><li>BlockingDeque 与BlockingQueue实现例子?</li></ul><h2 id="blockingqueue和blockingdeque" tabindex="-1">BlockingQueue和BlockingDeque <a class="header-anchor" href="#blockingqueue和blockingdeque" aria-label="Permalink to &quot;BlockingQueue和BlockingDeque&quot;">​</a></h2><h3 id="blockingqueue" tabindex="-1">BlockingQueue <a class="header-anchor" href="#blockingqueue" aria-label="Permalink to &quot;BlockingQueue&quot;">​</a></h3><p>BlockingQueue 通常用于一个线程生产对象，而另外一个线程消费这些对象的场景。下图是对这个原理的阐述:</p><p><img src="'+a+'" alt="error.图片加载失败"></p><p>一个线程往里边放，另外一个线程从里边取的一个 BlockingQueue。</p><p>一个线程将会持续生产新对象并将其插入到队列之中，直到队列达到它所能容纳的临界点。也就是说，它是有限的。如果该阻塞队列到达了其临界点，负责生产的线程将会在往里边插入新对象时发生阻塞。它会一直处于阻塞之中，直到负责消费的线程从队列中拿走一个对象。 负责消费的线程将会一直从该阻塞队列中拿出对象。如果消费线程尝试去从一个空的队列中提取对象的话，这个消费线程将会处于阻塞之中，直到一个生产线程把一个对象丢进队列。</p><h3 id="blockingqueue-的方法" tabindex="-1">BlockingQueue 的方法 <a class="header-anchor" href="#blockingqueue-的方法" aria-label="Permalink to &quot;BlockingQueue 的方法&quot;">​</a></h3><p>BlockingQueue 具有 4 组不同的方法用于插入、移除以及对队列中的元素进行检查。如果请求的操作不能得到立即执行的话，每个方法的表现也不同。这些方法如下:</p><table tabindex="0"><thead><tr><th></th><th>抛异常</th><th>特定值</th><th>阻塞</th><th>超时</th></tr></thead><tbody><tr><td>插入</td><td>add(o)</td><td>offer(o)</td><td>put(o)</td><td>offer(o, timeout, timeunit)</td></tr><tr><td>移除</td><td>remove()</td><td>poll()</td><td>take()</td><td>poll(timeout, timeunit)</td></tr><tr><td>检查</td><td>element()</td><td>peek()</td><td></td><td></td></tr></tbody></table><p>四组不同的行为方式解释:</p><ul><li>抛异常: 如果试图的操作无法立即执行，抛一个异常。</li><li>特定值: 如果试图的操作无法立即执行，返回一个特定的值(常常是 true / false)。</li><li>阻塞: 如果试图的操作无法立即执行，该方法调用将会发生阻塞，直到能够执行。</li><li>超时: 如果试图的操作无法立即执行，该方法调用将会发生阻塞，直到能够执行，但等待时间不会超过给定值。返回一个特定值以告知该操作是否成功(典型的是 true / false)。</li></ul><p>无法向一个 BlockingQueue 中插入 null。如果你试图插入 null，BlockingQueue 将会抛出一个 NullPointerException。 可以访问到 BlockingQueue 中的所有元素，而不仅仅是开始和结束的元素。比如说，你将一个对象放入队列之中以等待处理，但你的应用想要将其取消掉。那么你可以调用诸如 remove(o) 方法来将队列之中的特定对象进行移除。但是这么干效率并不高(译者注: 基于队列的数据结构，获取除开始或结束位置的其他对象的效率不会太高)，因此你尽量不要用这一类的方法，除非你确实不得不那么做。</p><h3 id="blockingdeque" tabindex="-1">BlockingDeque <a class="header-anchor" href="#blockingdeque" aria-label="Permalink to &quot;BlockingDeque&quot;">​</a></h3><p>java.util.concurrent 包里的 BlockingDeque 接口表示一个线程安放入和提取实例的双端队列。</p><p>BlockingDeque 类是一个双端队列，在不能够插入元素时，它将阻塞住试图插入元素的线程；在不能够抽取元素时，它将阻塞住试图抽取的线程。 deque(双端队列) 是 &quot;Double Ended Queue&quot; 的缩写。因此，双端队列是一个你可以从任意一端插入或者抽取元素的队列。</p><p>在线程既是一个队列的生产者又是这个队列的消费者的时候可以使用到 BlockingDeque。如果生产者线程需要在队列的两端都可以插入数据，消费者线程需要在队列的两端都可以移除数据，这个时候也可以使用 BlockingDeque。BlockingDeque 图解:</p><p><img src="'+n+`" alt="error.图片加载失败"></p><h3 id="blockingdeque-的方法" tabindex="-1">BlockingDeque 的方法 <a class="header-anchor" href="#blockingdeque-的方法" aria-label="Permalink to &quot;BlockingDeque 的方法&quot;">​</a></h3><p>一个 BlockingDeque - 线程在双端队列的两端都可以插入和提取元素。 一个线程生产元素，并把它们插入到队列的任意一端。如果双端队列已满，插入线程将被阻塞，直到一个移除线程从该队列中移出了一个元素。如果双端队列为空，移除线程将被阻塞，直到一个插入线程向该队列插入了一个新元素。</p><p>BlockingDeque 具有 4 组不同的方法用于插入、移除以及对双端队列中的元素进行检查。如果请求的操作不能得到立即执行的话，每个方法的表现也不同。这些方法如下:</p><table tabindex="0"><thead><tr><th></th><th>抛异常</th><th>特定值</th><th>阻塞</th><th>超时</th></tr></thead><tbody><tr><td>插入</td><td>addFirst(o)</td><td>offerFirst(o)</td><td>putFirst(o)</td><td>offerFirst(o, timeout, timeunit)</td></tr><tr><td>移除</td><td>removeFirst(o)</td><td>pollFirst(o)</td><td>takeFirst(o)</td><td>pollFirst(timeout, timeunit)</td></tr><tr><td>检查</td><td>getFirst(o)</td><td>peekFirst(o)</td><td></td><td></td></tr></tbody></table><table tabindex="0"><thead><tr><th></th><th>抛异常</th><th>特定值</th><th>阻塞</th><th>超时</th></tr></thead><tbody><tr><td>插入</td><td>addLast(o)</td><td>offerLast(o)</td><td>putLast(o)</td><td>offerLast(o, timeout, timeunit)</td></tr><tr><td>移除</td><td>removeLast(o)</td><td>pollLast(o)</td><td>takeLast(o)</td><td>pollLast(timeout, timeunit)</td></tr><tr><td>检查</td><td>getLast(o)</td><td>peekLast(o)</td><td></td><td></td></tr></tbody></table><p>四组不同的行为方式解释:</p><ul><li>抛异常: 如果试图的操作无法立即执行，抛一个异常。</li><li>特定值: 如果试图的操作无法立即执行，返回一个特定的值(常常是 true / false)。</li><li>阻塞: 如果试图的操作无法立即执行，该方法调用将会发生阻塞，直到能够执行。</li><li>超时: 如果试图的操作无法立即执行，该方法调用将会发生阻塞，直到能够执行，但等待时间不会超过给定值。返回一个特定值以告知该操作是否成功(典型的是 true / false)。</li></ul><h3 id="blockingdeque-与blockingqueue关系" tabindex="-1">BlockingDeque 与BlockingQueue关系 <a class="header-anchor" href="#blockingdeque-与blockingqueue关系" aria-label="Permalink to &quot;BlockingDeque 与BlockingQueue关系&quot;">​</a></h3><p>BlockingDeque 接口继承自 BlockingQueue 接口。这就意味着你可以像使用一个 BlockingQueue 那样使用 BlockingDeque。如果你这么干的话，各种插入方法将会把新元素添加到双端队列的尾端，而移除方法将会把双端队列的首端的元素移除。正如 BlockingQueue 接口的插入和移除方法一样。</p><p>以下是 BlockingDeque 对 BlockingQueue 接口的方法的具体内部实现:</p><table tabindex="0"><thead><tr><th>BlockingQueue</th><th>BlockingDeque</th></tr></thead><tbody><tr><td>add()</td><td>addLast()</td></tr><tr><td>offer() x 2</td><td>offerLast() x 2</td></tr><tr><td>put()</td><td>putLast()</td></tr><tr><td>remove()</td><td>removeFirst()</td></tr><tr><td>poll() x 2</td><td>pollFirst()</td></tr><tr><td>take()</td><td>takeFirst()</td></tr><tr><td>element()</td><td>getFirst()</td></tr><tr><td>peek()</td><td>peekFirst()</td></tr></tbody></table><h2 id="blockingqueue-的例子" tabindex="-1">BlockingQueue 的例子 <a class="header-anchor" href="#blockingqueue-的例子" aria-label="Permalink to &quot;BlockingQueue 的例子&quot;">​</a></h2><p>这里是一个 Java 中使用 BlockingQueue 的示例。本示例使用的是 BlockingQueue 接口的 ArrayBlockingQueue 实现。 首先，BlockingQueueExample 类分别在两个独立的线程中启动了一个 Producer 和 一个 Consumer。Producer 向一个共享的 BlockingQueue 中注入字符串，而 Consumer 则会从中把它们拿出来。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>public class BlockingQueueExample {</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>    public static void main(String[] args) throws Exception {</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>        BlockingQueue queue = new ArrayBlockingQueue(1024);</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>        Producer producer = new Producer(queue);</span></span>
<span class="line"><span>        Consumer consumer = new Consumer(queue);</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>        new Thread(producer).start();</span></span>
<span class="line"><span>        new Thread(consumer).start();</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>        Thread.sleep(4000);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>以下是 Producer 类。注意它在每次 put() 调用时是如何休眠一秒钟的。这将导致 Consumer 在等待队列中对象的时候发生阻塞。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>public class Producer implements Runnable{</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>    protected BlockingQueue queue = null;</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>    public Producer(BlockingQueue queue) {</span></span>
<span class="line"><span>        this.queue = queue;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>    public void run() {</span></span>
<span class="line"><span>        try {</span></span>
<span class="line"><span>            queue.put(&quot;1&quot;);</span></span>
<span class="line"><span>            Thread.sleep(1000);</span></span>
<span class="line"><span>            queue.put(&quot;2&quot;);</span></span>
<span class="line"><span>            Thread.sleep(1000);</span></span>
<span class="line"><span>            queue.put(&quot;3&quot;);</span></span>
<span class="line"><span>        } catch (InterruptedException e) {</span></span>
<span class="line"><span>            e.printStackTrace();</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>以下是 Consumer 类。它只是把对象从队列中抽取出来，然后将它们打印到 System.out。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>public class Consumer implements Runnable{</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>    protected BlockingQueue queue = null;</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>    public Consumer(BlockingQueue queue) {</span></span>
<span class="line"><span>        this.queue = queue;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>    public void run() {</span></span>
<span class="line"><span>        try {</span></span>
<span class="line"><span>            System.out.println(queue.take());</span></span>
<span class="line"><span>            System.out.println(queue.take());</span></span>
<span class="line"><span>            System.out.println(queue.take());</span></span>
<span class="line"><span>        } catch (InterruptedException e) {</span></span>
<span class="line"><span>            e.printStackTrace();</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="数组阻塞队列-arrayblockingqueue" tabindex="-1">数组阻塞队列 ArrayBlockingQueue <a class="header-anchor" href="#数组阻塞队列-arrayblockingqueue" aria-label="Permalink to &quot;数组阻塞队列 ArrayBlockingQueue&quot;">​</a></h3><p>ArrayBlockingQueue 类实现了 BlockingQueue 接口。</p><p>ArrayBlockingQueue 是一个有界的阻塞队列，其内部实现是将对象放到一个数组里。有界也就意味着，它不能够存储无限多数量的元素。它有一个同一时间能够存储元素数量的上限。你可以在对其初始化的时候设定这个上限，但之后就无法对这个上限进行修改了(译者注: 因为它是基于数组实现的，也就具有数组的特性: 一旦初始化，大小就无法修改)。 ArrayBlockingQueue 内部以 FIFO(先进先出)的顺序对元素进行存储。队列中的头元素在所有元素之中是放入时间最久的那个，而尾元素则是最短的那个。 以下是在使用 ArrayBlockingQueue 的时候对其初始化的一个示例:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>BlockingQueue queue = new ArrayBlockingQueue(1024);</span></span>
<span class="line"><span>queue.put(&quot;1&quot;);</span></span>
<span class="line"><span>Object object = queue.take();</span></span></code></pre></div><p>以下是使用了 Java 泛型的一个 BlockingQueue 示例。注意其中是如何对 String 元素放入和提取的:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>BlockingQueue&lt;String&gt; queue = new ArrayBlockingQueue&lt;String&gt;(1024);</span></span>
<span class="line"><span>queue.put(&quot;1&quot;);</span></span>
<span class="line"><span>String string = queue.take();</span></span></code></pre></div><h3 id="延迟队列-delayqueue" tabindex="-1">延迟队列 DelayQueue <a class="header-anchor" href="#延迟队列-delayqueue" aria-label="Permalink to &quot;延迟队列 DelayQueue&quot;">​</a></h3><p>DelayQueue 实现了 BlockingQueue 接口。</p><p>DelayQueue 对元素进行持有直到一个特定的延迟到期。注入其中的元素必须实现 java.util.concurrent.Delayed 接口，该接口定义:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>public interface Delayed extends Comparable&lt;Delayed&lt; {</span></span>
<span class="line"><span>    public long getDelay(TimeUnit timeUnit);</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>DelayQueue 将会在每个元素的 getDelay() 方法返回的值的时间段之后才释放掉该元素。如果返回的是 0 或者负值，延迟将被认为过期，该元素将会在 DelayQueue 的下一次 take 被调用的时候被释放掉。</p><p>传递给 getDelay 方法的 getDelay 实例是一个枚举类型，它表明了将要延迟的时间段。TimeUnit 枚举将会取以下值:</p><ul><li>DAYS</li><li>HOURS</li><li>INUTES</li><li>SECONDS</li><li>MILLISECONDS</li><li>MICROSECONDS</li><li>NANOSECONDS</li></ul><p>正如你所看到的，Delayed 接口也继承了 java.lang.Comparable 接口，这也就意味着 Delayed 对象之间可以进行对比。这个可能在对 DelayQueue 队列中的元素进行排序时有用，因此它们可以根据过期时间进行有序释放。 以下是使用 DelayQueue 的例子:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>public class DelayQueueExample {</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>    public static void main(String[] args) {</span></span>
<span class="line"><span>        DelayQueue queue = new DelayQueue();</span></span>
<span class="line"><span>        Delayed element1 = new DelayedElement();</span></span>
<span class="line"><span>        queue.put(element1);</span></span>
<span class="line"><span>        Delayed element2 = queue.take();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>DelayedElement 是我所创建的一个 DelayedElement 接口的实现类，它不在 java.util.concurrent 包里。你需要自行创建你自己的 Delayed 接口的实现以使用 DelayQueue 类。</p><h3 id="链阻塞队列-linkedblockingqueue" tabindex="-1">链阻塞队列 LinkedBlockingQueue <a class="header-anchor" href="#链阻塞队列-linkedblockingqueue" aria-label="Permalink to &quot;链阻塞队列 LinkedBlockingQueue&quot;">​</a></h3><p>LinkedBlockingQueue 类实现了 BlockingQueue 接口。</p><p>LinkedBlockingQueue 内部以一个链式结构(链接节点)对其元素进行存储。如果需要的话，这一链式结构可以选择一个上限。如果没有定义上限，将使用 Integer.MAX_VALUE 作为上限。</p><p>LinkedBlockingQueue 内部以 FIFO(先进先出)的顺序对元素进行存储。队列中的头元素在所有元素之中是放入时间最久的那个，而尾元素则是最短的那个。 以下是 LinkedBlockingQueue 的初始化和使用示例代码:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>BlockingQueue&lt;String&gt; unbounded = new LinkedBlockingQueue&lt;String&gt;();</span></span>
<span class="line"><span>BlockingQueue&lt;String&gt; bounded   = new LinkedBlockingQueue&lt;String&gt;(1024);</span></span>
<span class="line"><span>bounded.put(&quot;Value&quot;);</span></span>
<span class="line"><span>String value = bounded.take();</span></span></code></pre></div><h3 id="具有优先级的阻塞队列-priorityblockingqueue" tabindex="-1">具有优先级的阻塞队列 PriorityBlockingQueue <a class="header-anchor" href="#具有优先级的阻塞队列-priorityblockingqueue" aria-label="Permalink to &quot;具有优先级的阻塞队列 PriorityBlockingQueue&quot;">​</a></h3><p>PriorityBlockingQueue 类实现了 BlockingQueue 接口。</p><p>PriorityBlockingQueue 是一个无界的并发队列。它使用了和类 java.util.PriorityQueue 一样的排序规则。你无法向这个队列中插入 null 值。 所有插入到 PriorityBlockingQueue 的元素必须实现 java.lang.Comparable 接口。因此该队列中元素的排序就取决于你自己的 Comparable 实现。 注意 PriorityBlockingQueue 对于具有相等优先级(compare() == 0)的元素并不强制任何特定行为。</p><p>同时注意，如果你从一个 PriorityBlockingQueue 获得一个 Iterator 的话，该 Iterator 并不能保证它对元素的遍历是以优先级为序的。 以下是使用 PriorityBlockingQueue 的示例:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>BlockingQueue queue   = new PriorityBlockingQueue();</span></span>
<span class="line"><span>//String implements java.lang.Comparable</span></span>
<span class="line"><span>queue.put(&quot;Value&quot;);</span></span>
<span class="line"><span>String value = queue.take();</span></span></code></pre></div><h3 id="同步队列-synchronousqueue" tabindex="-1">同步队列 SynchronousQueue <a class="header-anchor" href="#同步队列-synchronousqueue" aria-label="Permalink to &quot;同步队列 SynchronousQueue&quot;">​</a></h3><p>SynchronousQueue 类实现了 BlockingQueue 接口。</p><p>SynchronousQueue 是一个特殊的队列，它的内部同时只能够容纳单个元素。如果该队列已有一元素的话，试图向队列中插入一个新元素的线程将会阻塞，直到另一个线程将该元素从队列中抽走。同样，如果该队列为空，试图向队列中抽取一个元素的线程将会阻塞，直到另一个线程向队列中插入了一条新的元素。 据此，把这个类称作一个队列显然是夸大其词了。它更多像是一个汇合点。</p><h2 id="blockingdeque-的例子" tabindex="-1">BlockingDeque 的例子 <a class="header-anchor" href="#blockingdeque-的例子" aria-label="Permalink to &quot;BlockingDeque 的例子&quot;">​</a></h2><p>既然 BlockingDeque 是一个接口，那么你想要使用它的话就得使用它的众多的实现类的其中一个。java.util.concurrent 包提供了以下 BlockingDeque 接口的实现类: LinkedBlockingDeque。</p><p>以下是如何使用 BlockingDeque 方法的一个简短代码示例:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>BlockingDeque&lt;String&gt; deque = new LinkedBlockingDeque&lt;String&gt;();</span></span>
<span class="line"><span>deque.addFirst(&quot;1&quot;);</span></span>
<span class="line"><span>deque.addLast(&quot;2&quot;);</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>String two = deque.takeLast();</span></span>
<span class="line"><span>String one = deque.takeFirst();</span></span></code></pre></div><h3 id="链阻塞双端队列-linkedblockingdeque" tabindex="-1">链阻塞双端队列 LinkedBlockingDeque <a class="header-anchor" href="#链阻塞双端队列-linkedblockingdeque" aria-label="Permalink to &quot;链阻塞双端队列 LinkedBlockingDeque&quot;">​</a></h3><p>LinkedBlockingDeque 类实现了 BlockingDeque 接口。</p><p>deque(双端队列) 是 &quot;Double Ended Queue&quot; 的缩写。因此，双端队列是一个你可以从任意一端插入或者抽取元素的队列。</p><p>LinkedBlockingDeque 是一个双端队列，在它为空的时候，一个试图从中抽取数据的线程将会阻塞，无论该线程是试图从哪一端抽取数据。</p><p>以下是 LinkedBlockingDeque 实例化以及使用的示例:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>BlockingDeque&lt;String&gt; deque = new LinkedBlockingDeque&lt;String&gt;();</span></span>
<span class="line"><span>deque.addFirst(&quot;1&quot;);</span></span>
<span class="line"><span>deque.addLast(&quot;2&quot;);</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>String two = deque.takeLast();</span></span>
<span class="line"><span>String one = deque.takeFirst();</span></span></code></pre></div><h2 id="参考文章" tabindex="-1">参考文章 <a class="header-anchor" href="#参考文章" aria-label="Permalink to &quot;参考文章&quot;">​</a></h2><ul><li><a href="https://blog.csdn.net/defonds/article/details/44021605#t7" target="_blank" rel="noreferrer">https://blog.csdn.net/defonds/article/details/44021605#t7</a></li><li><a href="http://tutorials.jenkov.com/java-concurrency/index.html" target="_blank" rel="noreferrer">http://tutorials.jenkov.com/java-concurrency/index.html</a></li><li><a href="https://github.com/CL0610/Java-concurrency/blob/master/19.%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8%E4%B9%8BBlockingQueue/%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8%E4%B9%8BBlockingQueue.md" target="_blank" rel="noreferrer">https://github.com/CL0610/Java-concurrency/blob/master/19.并发容器之BlockingQueue/并发容器之BlockingQueue.md</a></li><li><a href="https://www.javadoop.com/post/java-concurrent-queue" target="_blank" rel="noreferrer">https://www.javadoop.com/post/java-concurrent-queue</a></li></ul><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>`,83)]))}const q=s(p,[["render",u]]);export{b as __pageData,q as default};
