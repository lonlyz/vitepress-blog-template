import{_ as s}from"./chunks/spring-framework-aop-2.CwNdo3cd.js";import{_ as a,c as p,ai as e,o as t}from"./chunks/framework.BrYByd3F.js";const l="/vitepress-blog-template/images/spring/springframework/spring-framework-aop-4.png",i="/vitepress-blog-template/images/spring/springframework/spring-framework-aop-3.png",o="/vitepress-blog-template/images/spring/springframework/spring-framework-aop-5.png",r="/vitepress-blog-template/images/spring/springframework/spring-framework-aop-6.png",c="/vitepress-blog-template/images/spring/springframework/spring-framework-aop-7.png",S=JSON.parse('{"title":"Spring基础 - Spring核心之面向切面编程(AOP)","description":"","frontmatter":{},"headers":[],"relativePath":"spring/spring-x-framework-aop.md","filePath":"spring/spring-x-framework-aop.md","lastUpdated":1737706346000}'),g={name:"spring/spring-x-framework-aop.md"};function d(u,n,h,m,b,A){return t(),p("div",null,n[0]||(n[0]=[e(`<h1 id="spring基础-spring核心之面向切面编程-aop" tabindex="-1">Spring基础 - Spring核心之面向切面编程(AOP) <a class="header-anchor" href="#spring基础-spring核心之面向切面编程-aop" aria-label="Permalink to &quot;Spring基础 - Spring核心之面向切面编程(AOP)&quot;">​</a></h1><blockquote><p>在<a href="https://pdai.tech/md/spring/spring-x-framework-helloworld.html" target="_blank" rel="noreferrer">Spring基础 - Spring简单例子引入Spring的核心</a>中向你展示了AOP的基础含义，同时以此发散了一些AOP相关知识点; 本节将在此基础上进一步解读AOP的含义以及AOP的使用方式。@pdai</p></blockquote><h2 id="引入" tabindex="-1">引入 <a class="header-anchor" href="#引入" aria-label="Permalink to &quot;引入&quot;">​</a></h2><blockquote><p>我们在<a href="https://pdai.tech/md/spring/spring-x-framework-helloworld.html" target="_blank" rel="noreferrer">Spring基础 - Spring简单例子引入Spring的核心</a>中向你展示了AOP的基础含义，同时以此发散了一些AOP相关知识点。</p></blockquote><ol><li>Spring 框架通过定义切面, 通过拦截切点实现了不同业务模块的解耦，这个就叫<strong>面向切面编程 - Aspect Oriented Programming (AOP)</strong></li><li>为什么@Aspect注解使用的是aspectj的jar包呢？这就引出了<strong>Aspect4J和Spring AOP的历史渊源</strong>，只有理解了Aspect4J和Spring的渊源才能理解有些注解上的兼容设计</li><li>如何支持<strong>更多拦截方式</strong>来实现解耦， 以满足更多场景需求呢？ 这就是@Around, @Pointcut... 等的设计</li><li>那么Spring框架又是如何实现AOP的呢？ 这就引入<strong>代理技术，分静态代理和动态代理</strong>，动态代理又包含JDK代理和CGLIB代理等</li></ol><p>本节将在此基础上进一步解读AOP的含义以及AOP的使用方式；后续的文章还将深入AOP的实现原理：</p><ul><li><a href="https://pdai.tech/md/spring/spring-x-framework-aop-source-1.html" target="_blank" rel="noreferrer">Spring进阶 - Spring AOP实现原理详解之切面实现</a></li><li><a href="https://pdai.tech/md/spring/spring-x-framework-aop-source-2.html" target="_blank" rel="noreferrer">Spring进阶 - Spring AOP实现原理详解之AOP代理</a></li></ul><h2 id="如何理解aop" tabindex="-1">如何理解AOP <a class="header-anchor" href="#如何理解aop" aria-label="Permalink to &quot;如何理解AOP&quot;">​</a></h2><blockquote><p>AOP的本质也是为了解耦，它是一种设计思想； 在理解时也应该简化理解。</p></blockquote><h3 id="aop是什么" tabindex="-1">AOP是什么 <a class="header-anchor" href="#aop是什么" aria-label="Permalink to &quot;AOP是什么&quot;">​</a></h3><blockquote><p>AOP为Aspect Oriented Programming的缩写，意为：面向切面编程</p></blockquote><p>AOP最早是AOP联盟的组织提出的,指定的一套规范,spring将AOP的思想引入框架之中,通过<strong>预编译方式</strong>和<strong>运行期间动态代理</strong>实现程序的统一维护的一种技术,</p><ul><li>先来看一个例子， 如何给如下UserServiceImpl中所有方法添加进入方法的日志，</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/**</span></span>
<span class="line"><span> * @author pdai</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>public class UserServiceImpl implements IUserService {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * find user list.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @return user list</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public List&lt;User&gt; findUserList() {</span></span>
<span class="line"><span>        System.out.println(&quot;execute method： findUserList&quot;);</span></span>
<span class="line"><span>        return Collections.singletonList(new User(&quot;pdai&quot;, 18));</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * add user</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void addUser() {</span></span>
<span class="line"><span>        System.out.println(&quot;execute method： addUser&quot;);</span></span>
<span class="line"><span>        // do something</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre></div><p>我们将记录日志功能解耦为日志切面，它的目标是解耦。进而引出AOP的理念：就是将分散在各个业务逻辑代码中相同的代码通过<strong>横向切割</strong>的方式抽取到一个独立的模块中！</p><p><img src="`+l+'" alt="error.图片加载失败"></p><p>OOP面向对象编程，针对业务处理过程的实体及其属性和行为进行抽象封装，以获得更加清晰高效的逻辑单元划分。而AOP则是针对业务处理过程中的切面进行提取，它所面对的是处理过程的某个步骤或阶段，以获得逻辑过程的中各部分之间低耦合的隔离效果。这两种设计思想在目标上有着本质的差异。</p><p><img src="'+s+'" alt="error.图片加载失败"></p><h3 id="aop术语" tabindex="-1">AOP术语 <a class="header-anchor" href="#aop术语" aria-label="Permalink to &quot;AOP术语&quot;">​</a></h3><blockquote><p>首先让我们从一些重要的AOP概念和术语开始。<strong>这些术语不是Spring特有的</strong>。</p></blockquote><ul><li><p><strong>连接点（Jointpoint）</strong>：表示需要在程序中插入横切关注点的扩展点，<strong>连接点可能是类初始化、方法执行、方法调用、字段调用或处理异常等等</strong>，Spring只支持方法执行连接点，在AOP中表示为<strong>在哪里干</strong>；</p></li><li><p><strong>切入点（Pointcut）</strong>： 选择一组相关连接点的模式，即可以认为连接点的集合，Spring支持perl5正则表达式和AspectJ切入点模式，Spring默认使用AspectJ语法，在AOP中表示为<strong>在哪里干的集合</strong>；</p></li><li><p><strong>通知（Advice）</strong>：在连接点上执行的行为，通知提供了在AOP中需要在切入点所选择的连接点处进行扩展现有行为的手段；包括前置通知（before advice）、后置通知(after advice)、环绕通知（around advice），在Spring中通过代理模式实现AOP，并通过拦截器模式以环绕连接点的拦截器链织入通知；在AOP中表示为<strong>干什么</strong>；</p></li><li><p><strong>方面/切面（Aspect）</strong>：横切关注点的模块化，比如上边提到的日志组件。可以认为是通知、引入和切入点的组合；在Spring中可以使用Schema和@AspectJ方式进行组织实现；在AOP中表示为<strong>在哪干和干什么集合</strong>；</p></li><li><p><strong>引入（inter-type declaration）</strong>：也称为内部类型声明，为已有的类添加额外新的字段或方法，Spring允许引入新的接口（必须对应一个实现）到所有被代理对象（目标对象）, 在AOP中表示为<strong>干什么（引入什么）</strong>；</p></li><li><p><strong>目标对象（Target Object）</strong>：需要被织入横切关注点的对象，即该对象是切入点选择的对象，需要被通知的对象，从而也可称为被通知对象；由于Spring AOP 通过代理模式实现，从而这个对象永远是被代理对象，在AOP中表示为<strong>对谁干</strong>；</p></li><li><p><strong>织入（Weaving）</strong>：把切面连接到其它的应用程序类型或者对象上，并创建一个被通知的对象。这些可以在编译时（例如使用AspectJ编译器），类加载时和运行时完成。Spring和其他纯Java AOP框架一样，在运行时完成织入。在AOP中表示为<strong>怎么实现的</strong>；</p></li><li><p><strong>AOP代理（AOP Proxy）</strong>：AOP框架使用代理模式创建的对象，从而实现在连接点处插入通知（即应用切面），就是通过代理来对目标对象应用切面。在Spring中，AOP代理可以用JDK动态代理或CGLIB代理实现，而通过拦截器模型应用切面。在AOP中表示为<strong>怎么实现的一种典型方式</strong>；</p></li></ul><blockquote><p><strong>通知类型</strong>：</p></blockquote><ul><li><p><strong>前置通知（Before advice）</strong>：在某连接点之前执行的通知，但这个通知不能阻止连接点之前的执行流程（除非它抛出一个异常）。</p></li><li><p><strong>后置通知（After returning advice）</strong>：在某连接点正常完成后执行的通知：例如，一个方法没有抛出任何异常，正常返回。</p></li><li><p><strong>异常通知（After throwing advice）</strong>：在方法抛出异常退出时执行的通知。</p></li><li><p><strong>最终通知（After (finally) advice）</strong>：当某连接点退出的时候执行的通知（不论是正常返回还是异常退出）。</p></li><li><p><strong>环绕通知（Around Advice）</strong>：包围一个连接点的通知，如方法调用。这是最强大的一种通知类型。环绕通知可以在方法调用前后完成自定义的行为。它也会选择是否继续执行连接点或直接返回它自己的返回值或抛出异常来结束执行。</p></li></ul><p>环绕通知是最常用的通知类型。和AspectJ一样，Spring提供所有类型的通知，我们推荐你使用尽可能简单的通知类型来实现需要的功能。例如，如果你只是需要一个方法的返回值来更新缓存，最好使用后置通知而不是环绕通知，尽管环绕通知也能完成同样的事情。用最合适的通知类型可以使得编程模型变得简单，并且能够避免很多潜在的错误。比如，你不需要在JoinPoint上调用用于环绕通知的proceed()方法，就不会有调用的问题。</p><blockquote><p>我们把这些术语串联到一起，方便理解</p></blockquote><p><img src="'+i+'" alt="error.图片加载失败"></p><h3 id="spring-aop和aspectj是什么关系" tabindex="-1">Spring AOP和AspectJ是什么关系 <a class="header-anchor" href="#spring-aop和aspectj是什么关系" aria-label="Permalink to &quot;Spring AOP和AspectJ是什么关系&quot;">​</a></h3><ul><li><strong>首先AspectJ是什么</strong>？</li></ul><p>AspectJ是一个java实现的AOP框架，它能够对java代码进行AOP编译（一般在编译期进行），让java代码具有AspectJ的AOP功能（当然需要特殊的编译器）</p><p>可以这样说AspectJ是目前实现AOP框架中最成熟，功能最丰富的语言，更幸运的是，AspectJ与java程序完全兼容，几乎是无缝关联，因此对于有java编程基础的工程师，上手和使用都非常容易。</p><ul><li><strong>其次，为什么需要理清楚Spring AOP和AspectJ的关系</strong>？</li></ul><p>我们看下@Aspect以及增强的几个注解，为什么不是Spring包，而是来源于aspectJ呢？</p><p><img src="'+o+'" alt="error.图片加载失败"></p><ul><li><strong>Spring AOP和AspectJ是什么关系</strong>？</li></ul><ol><li>AspectJ是更强的AOP框架，是实际意义的<strong>AOP标准</strong>；</li><li>Spring为何不写类似AspectJ的框架？ Spring AOP使用纯Java实现, 它不需要专门的编译过程, 它一个<strong>重要的原则就是无侵入性（non-invasiveness）</strong>; Spring 小组完全有能力写类似的框架，只是Spring AOP从来没有打算通过提供一种全面的AOP解决方案来与AspectJ竞争。Spring的开发小组相信无论是基于代理（proxy-based）的框架如Spring AOP或者是成熟的框架如AspectJ都是很有价值的，他们之间应该是<strong>互补而不是竞争的关系</strong>。</li><li>Spring小组喜欢@AspectJ注解风格更胜于Spring XML配置； 所以<strong>在Spring 2.0使用了和AspectJ 5一样的注解，并使用AspectJ来做切入点解析和匹配</strong>。<strong>但是，AOP在运行时仍旧是纯的Spring AOP，并不依赖于AspectJ的编译器或者织入器（weaver）</strong>。</li><li>Spring 2.5对AspectJ的支持：在一些环境下，增加了对AspectJ的装载时编织支持，同时提供了一个新的bean切入点。</li></ol><ul><li><strong>更多关于AspectJ</strong>？</li></ul><p>了解AspectJ应用到java代码的过程（这个过程称为织入），对于织入这个概念，可以简单理解为aspect(切面)应用到目标函数(类)的过程。</p><p>对于这个过程，一般分为<strong>动态织入</strong>和<strong>静态织入</strong>：</p><ol><li>动态织入的方式是在运行时动态将要增强的代码织入到目标类中，这样往往是通过动态代理技术完成的，如Java JDK的动态代理(Proxy，底层通过反射实现)或者CGLIB的动态代理(底层通过继承实现)，Spring AOP采用的就是基于运行时增强的代理技术</li><li>ApectJ采用的就是静态织入的方式。ApectJ主要采用的是编译期织入，在这个期间使用AspectJ的acj编译器(类似javac)把aspect类编译成class字节码后，在java目标类编译时织入，即先编译aspect类再编译目标类。</li></ol><p><img src="'+r+`" alt="error.图片加载失败"></p><h2 id="aop的配置方式" tabindex="-1">AOP的配置方式 <a class="header-anchor" href="#aop的配置方式" aria-label="Permalink to &quot;AOP的配置方式&quot;">​</a></h2><blockquote><p>Spring AOP 支持对XML模式和基于@AspectJ注解的两种配置方式。</p></blockquote><h3 id="xml-schema配置方式" tabindex="-1">XML Schema配置方式 <a class="header-anchor" href="#xml-schema配置方式" aria-label="Permalink to &quot;XML Schema配置方式&quot;">​</a></h3><p>Spring提供了使用&quot;aop&quot;命名空间来定义一个切面，我们来看个例子(<a href="https://github.com/realpdai/tech-pdai-spring-demos/004-spring-framework-demo-aop-xml" target="_blank" rel="noreferrer">例子代码在新窗口打开</a>)：</p><ul><li><strong>定义目标类</strong></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>package tech.pdai.springframework.service;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * @author pdai</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>public class AopDemoServiceImpl {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public void doMethod1() {</span></span>
<span class="line"><span>        System.out.println(&quot;AopDemoServiceImpl.doMethod1()&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public String doMethod2() {</span></span>
<span class="line"><span>        System.out.println(&quot;AopDemoServiceImpl.doMethod2()&quot;);</span></span>
<span class="line"><span>        return &quot;hello world&quot;;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public String doMethod3() throws Exception {</span></span>
<span class="line"><span>        System.out.println(&quot;AopDemoServiceImpl.doMethod3()&quot;);</span></span>
<span class="line"><span>        throw new Exception(&quot;some exception&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li><strong>定义切面类</strong></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>package tech.pdai.springframework.aspect;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import org.aspectj.lang.ProceedingJoinPoint;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * @author pdai</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>public class LogAspect {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 环绕通知.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param pjp pjp</span></span>
<span class="line"><span>     * @return obj</span></span>
<span class="line"><span>     * @throws Throwable exception</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    public Object doAround(ProceedingJoinPoint pjp) throws Throwable {</span></span>
<span class="line"><span>        System.out.println(&quot;-----------------------&quot;);</span></span>
<span class="line"><span>        System.out.println(&quot;环绕通知: 进入方法&quot;);</span></span>
<span class="line"><span>        Object o = pjp.proceed();</span></span>
<span class="line"><span>        System.out.println(&quot;环绕通知: 退出方法&quot;);</span></span>
<span class="line"><span>        return o;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 前置通知.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    public void doBefore() {</span></span>
<span class="line"><span>        System.out.println(&quot;前置通知&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 后置通知.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param result return val</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    public void doAfterReturning(String result) {</span></span>
<span class="line"><span>        System.out.println(&quot;后置通知, 返回值: &quot; + result);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 异常通知.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param e exception</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    public void doAfterThrowing(Exception e) {</span></span>
<span class="line"><span>        System.out.println(&quot;异常通知, 异常: &quot; + e.getMessage());</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 最终通知.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    public void doAfter() {</span></span>
<span class="line"><span>        System.out.println(&quot;最终通知&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li><strong>XML配置AOP</strong></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span>
<span class="line"><span>&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span></span>
<span class="line"><span>       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span>       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span></span>
<span class="line"><span>       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span></span>
<span class="line"><span>       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span></span>
<span class="line"><span> http://www.springframework.org/schema/beans/spring-beans.xsd</span></span>
<span class="line"><span> http://www.springframework.org/schema/aop</span></span>
<span class="line"><span> http://www.springframework.org/schema/aop/spring-aop.xsd</span></span>
<span class="line"><span> http://www.springframework.org/schema/context</span></span>
<span class="line"><span> http://www.springframework.org/schema/context/spring-context.xsd</span></span>
<span class="line"><span>&quot;&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    &lt;context:component-scan base-package=&quot;tech.pdai.springframework&quot; /&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    &lt;aop:aspectj-autoproxy/&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    &lt;!-- 目标类 --&gt;</span></span>
<span class="line"><span>    &lt;bean id=&quot;demoService&quot; class=&quot;tech.pdai.springframework.service.AopDemoServiceImpl&quot;&gt;</span></span>
<span class="line"><span>        &lt;!-- configure properties of bean here as normal --&gt;</span></span>
<span class="line"><span>    &lt;/bean&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    &lt;!-- 切面 --&gt;</span></span>
<span class="line"><span>    &lt;bean id=&quot;logAspect&quot; class=&quot;tech.pdai.springframework.aspect.LogAspect&quot;&gt;</span></span>
<span class="line"><span>        &lt;!-- configure properties of aspect here as normal --&gt;</span></span>
<span class="line"><span>    &lt;/bean&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    &lt;aop:config&gt;</span></span>
<span class="line"><span>        &lt;!-- 配置切面 --&gt;</span></span>
<span class="line"><span>        &lt;aop:aspect ref=&quot;logAspect&quot;&gt;</span></span>
<span class="line"><span>            &lt;!-- 配置切入点 --&gt;</span></span>
<span class="line"><span>            &lt;aop:pointcut id=&quot;pointCutMethod&quot; expression=&quot;execution(* tech.pdai.springframework.service.*.*(..))&quot;/&gt;</span></span>
<span class="line"><span>            &lt;!-- 环绕通知 --&gt;</span></span>
<span class="line"><span>            &lt;aop:around method=&quot;doAround&quot; pointcut-ref=&quot;pointCutMethod&quot;/&gt;</span></span>
<span class="line"><span>            &lt;!-- 前置通知 --&gt;</span></span>
<span class="line"><span>            &lt;aop:before method=&quot;doBefore&quot; pointcut-ref=&quot;pointCutMethod&quot;/&gt;</span></span>
<span class="line"><span>            &lt;!-- 后置通知；returning属性：用于设置后置通知的第二个参数的名称，类型是Object --&gt;</span></span>
<span class="line"><span>            &lt;aop:after-returning method=&quot;doAfterReturning&quot; pointcut-ref=&quot;pointCutMethod&quot; returning=&quot;result&quot;/&gt;</span></span>
<span class="line"><span>            &lt;!-- 异常通知：如果没有异常，将不会执行增强；throwing属性：用于设置通知第二个参数的的名称、类型--&gt;</span></span>
<span class="line"><span>            &lt;aop:after-throwing method=&quot;doAfterThrowing&quot; pointcut-ref=&quot;pointCutMethod&quot; throwing=&quot;e&quot;/&gt;</span></span>
<span class="line"><span>            &lt;!-- 最终通知 --&gt;</span></span>
<span class="line"><span>            &lt;aop:after method=&quot;doAfter&quot; pointcut-ref=&quot;pointCutMethod&quot;/&gt;</span></span>
<span class="line"><span>        &lt;/aop:aspect&gt;</span></span>
<span class="line"><span>    &lt;/aop:config&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    &lt;!-- more bean definitions for data access objects go here --&gt;</span></span>
<span class="line"><span>&lt;/beans&gt;</span></span></code></pre></div><ul><li><strong>测试类</strong></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/**</span></span>
<span class="line"><span>  * main interfaces.</span></span>
<span class="line"><span>  *</span></span>
<span class="line"><span>  * @param args args</span></span>
<span class="line"><span>  */</span></span>
<span class="line"><span>public static void main(String[] args) {</span></span>
<span class="line"><span>    // create and configure beans</span></span>
<span class="line"><span>    ApplicationContext context = new ClassPathXmlApplicationContext(&quot;aspects.xml&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // retrieve configured instance</span></span>
<span class="line"><span>    AopDemoServiceImpl service = context.getBean(&quot;demoService&quot;, AopDemoServiceImpl.class);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // use configured instance</span></span>
<span class="line"><span>    service.doMethod1();</span></span>
<span class="line"><span>    service.doMethod2();</span></span>
<span class="line"><span>    try {</span></span>
<span class="line"><span>        service.doMethod3();</span></span>
<span class="line"><span>    } catch (Exception e) {</span></span>
<span class="line"><span>        // e.printStackTrace();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li><strong>输出结果</strong></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-----------------------</span></span>
<span class="line"><span>环绕通知: 进入方法</span></span>
<span class="line"><span>前置通知</span></span>
<span class="line"><span>AopDemoServiceImpl.doMethod1()</span></span>
<span class="line"><span>环绕通知: 退出方法</span></span>
<span class="line"><span>最终通知</span></span>
<span class="line"><span>-----------------------</span></span>
<span class="line"><span>环绕通知: 进入方法</span></span>
<span class="line"><span>前置通知</span></span>
<span class="line"><span>AopDemoServiceImpl.doMethod2()</span></span>
<span class="line"><span>环绕通知: 退出方法</span></span>
<span class="line"><span>最终通知</span></span>
<span class="line"><span>后置通知, 返回值: hello world</span></span>
<span class="line"><span>-----------------------</span></span>
<span class="line"><span>环绕通知: 进入方法</span></span>
<span class="line"><span>前置通知</span></span>
<span class="line"><span>AopDemoServiceImpl.doMethod3()</span></span>
<span class="line"><span>最终通知</span></span>
<span class="line"><span>异常通知, 异常: some exception</span></span></code></pre></div><h3 id="aspectj注解方式" tabindex="-1">AspectJ注解方式 <a class="header-anchor" href="#aspectj注解方式" aria-label="Permalink to &quot;AspectJ注解方式&quot;">​</a></h3><p>基于XML的声明式AspectJ存在一些不足，需要在Spring配置文件配置大量的代码信息，为了解决这个问题，Spring 使用了@AspectJ框架为AOP的实现提供了一套注解。</p><table tabindex="0"><thead><tr><th>注解名称</th><th>解释</th></tr></thead><tbody><tr><td>@Aspect</td><td>用来定义一个切面。</td></tr><tr><td>@pointcut</td><td>用于定义切入点表达式。在使用时还需要定义一个包含名字和任意参数的方法签名来表示切入点名称，这个方法签名就是一个返回值为void，且方法体为空的普通方法。</td></tr><tr><td>@Before</td><td>用于定义前置通知，相当于BeforeAdvice。在使用时，通常需要指定一个value属性值，该属性值用于指定一个切入点表达式(可以是已有的切入点，也可以直接定义切入点表达式)。</td></tr><tr><td>@AfterReturning</td><td>用于定义后置通知，相当于AfterReturningAdvice。在使用时可以指定pointcut / value和returning属性，其中pointcut / value这两个属性的作用一样，都用于指定切入点表达式。</td></tr><tr><td>@Around</td><td>用于定义环绕通知，相当于MethodInterceptor。在使用时需要指定一个value属性，该属性用于指定该通知被植入的切入点。</td></tr><tr><td>@After-Throwing</td><td>用于定义异常通知来处理程序中未处理的异常，相当于ThrowAdvice。在使用时可指定pointcut / value和throwing属性。其中pointcut/value用于指定切入点表达式，而throwing属性值用于指定-一个形参名来表示Advice方法中可定义与此同名的形参，该形参可用于访问目标方法抛出的异常。</td></tr><tr><td>@After</td><td>用于定义最终final 通知，不管是否异常，该通知都会执行。使用时需要指定一个value属性，该属性用于指定该通知被植入的切入点。</td></tr><tr><td>@DeclareParents</td><td>用于定义引介通知，相当于IntroductionInterceptor (不要求掌握)。</td></tr></tbody></table><blockquote><p>Spring AOP的实现方式是动态织入，动态织入的方式是在运行时动态将要增强的代码织入到目标类中，这样往往是通过动态代理技术完成的；<strong>如Java JDK的动态代理(Proxy，底层通过反射实现)或者CGLIB的动态代理(底层通过继承实现)</strong>，Spring AOP采用的就是基于运行时增强的代理技术。所以我们看下如下的两个例子(<a href="https://github.com/realpdai/tech-pdai-spring-demos" target="_blank" rel="noreferrer">例子代码在新窗口打开</a> 中05模块）：</p><ul><li>基于JDK代理例子</li><li>基于Cglib代理例子</li></ul></blockquote><h4 id="接口使用jdk代理" tabindex="-1">接口使用JDK代理 <a class="header-anchor" href="#接口使用jdk代理" aria-label="Permalink to &quot;接口使用JDK代理&quot;">​</a></h4><ul><li>定义接口</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/**</span></span>
<span class="line"><span> * Jdk Proxy Service.</span></span>
<span class="line"><span> *</span></span>
<span class="line"><span> * @author pdai</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>public interface IJdkProxyService {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    void doMethod1();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    String doMethod2();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    String doMethod3() throws Exception;</span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li>实现类</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/**</span></span>
<span class="line"><span> * @author pdai</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>@Service</span></span>
<span class="line"><span>public class JdkProxyDemoServiceImpl implements IJdkProxyService {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void doMethod1() {</span></span>
<span class="line"><span>        System.out.println(&quot;JdkProxyServiceImpl.doMethod1()&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public String doMethod2() {</span></span>
<span class="line"><span>        System.out.println(&quot;JdkProxyServiceImpl.doMethod2()&quot;);</span></span>
<span class="line"><span>        return &quot;hello world&quot;;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public String doMethod3() throws Exception {</span></span>
<span class="line"><span>        System.out.println(&quot;JdkProxyServiceImpl.doMethod3()&quot;);</span></span>
<span class="line"><span>        throw new Exception(&quot;some exception&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li><strong>定义切面</strong></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>package tech.pdai.springframework.aspect;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import org.aspectj.lang.ProceedingJoinPoint;</span></span>
<span class="line"><span>import org.aspectj.lang.annotation.After;</span></span>
<span class="line"><span>import org.aspectj.lang.annotation.AfterReturning;</span></span>
<span class="line"><span>import org.aspectj.lang.annotation.AfterThrowing;</span></span>
<span class="line"><span>import org.aspectj.lang.annotation.Around;</span></span>
<span class="line"><span>import org.aspectj.lang.annotation.Aspect;</span></span>
<span class="line"><span>import org.aspectj.lang.annotation.Before;</span></span>
<span class="line"><span>import org.aspectj.lang.annotation.Pointcut;</span></span>
<span class="line"><span>import org.springframework.context.annotation.EnableAspectJAutoProxy;</span></span>
<span class="line"><span>import org.springframework.stereotype.Component;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * @author pdai</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>@EnableAspectJAutoProxy</span></span>
<span class="line"><span>@Component</span></span>
<span class="line"><span>@Aspect</span></span>
<span class="line"><span>public class LogAspect {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * define point cut.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @Pointcut(&quot;execution(* tech.pdai.springframework.service.*.*(..))&quot;)</span></span>
<span class="line"><span>    private void pointCutMethod() {</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 环绕通知.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param pjp pjp</span></span>
<span class="line"><span>     * @return obj</span></span>
<span class="line"><span>     * @throws Throwable exception</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @Around(&quot;pointCutMethod()&quot;)</span></span>
<span class="line"><span>    public Object doAround(ProceedingJoinPoint pjp) throws Throwable {</span></span>
<span class="line"><span>        System.out.println(&quot;-----------------------&quot;);</span></span>
<span class="line"><span>        System.out.println(&quot;环绕通知: 进入方法&quot;);</span></span>
<span class="line"><span>        Object o = pjp.proceed();</span></span>
<span class="line"><span>        System.out.println(&quot;环绕通知: 退出方法&quot;);</span></span>
<span class="line"><span>        return o;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 前置通知.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @Before(&quot;pointCutMethod()&quot;)</span></span>
<span class="line"><span>    public void doBefore() {</span></span>
<span class="line"><span>        System.out.println(&quot;前置通知&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 后置通知.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param result return val</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @AfterReturning(pointcut = &quot;pointCutMethod()&quot;, returning = &quot;result&quot;)</span></span>
<span class="line"><span>    public void doAfterReturning(String result) {</span></span>
<span class="line"><span>        System.out.println(&quot;后置通知, 返回值: &quot; + result);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 异常通知.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param e exception</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @AfterThrowing(pointcut = &quot;pointCutMethod()&quot;, throwing = &quot;e&quot;)</span></span>
<span class="line"><span>    public void doAfterThrowing(Exception e) {</span></span>
<span class="line"><span>        System.out.println(&quot;异常通知, 异常: &quot; + e.getMessage());</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 最终通知.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @After(&quot;pointCutMethod()&quot;)</span></span>
<span class="line"><span>    public void doAfter() {</span></span>
<span class="line"><span>        System.out.println(&quot;最终通知&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li><strong>输出</strong></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-----------------------</span></span>
<span class="line"><span>环绕通知: 进入方法</span></span>
<span class="line"><span>前置通知</span></span>
<span class="line"><span>JdkProxyServiceImpl.doMethod1()</span></span>
<span class="line"><span>最终通知</span></span>
<span class="line"><span>环绕通知: 退出方法</span></span>
<span class="line"><span>-----------------------</span></span>
<span class="line"><span>环绕通知: 进入方法</span></span>
<span class="line"><span>前置通知</span></span>
<span class="line"><span>JdkProxyServiceImpl.doMethod2()</span></span>
<span class="line"><span>后置通知, 返回值: hello world</span></span>
<span class="line"><span>最终通知</span></span>
<span class="line"><span>环绕通知: 退出方法</span></span>
<span class="line"><span>-----------------------</span></span>
<span class="line"><span>环绕通知: 进入方法</span></span>
<span class="line"><span>前置通知</span></span>
<span class="line"><span>JdkProxyServiceImpl.doMethod3()</span></span>
<span class="line"><span>异常通知, 异常: some exception</span></span>
<span class="line"><span>最终通知</span></span></code></pre></div><h4 id="非接口使用cglib代理" tabindex="-1">非接口使用Cglib代理 <a class="header-anchor" href="#非接口使用cglib代理" aria-label="Permalink to &quot;非接口使用Cglib代理&quot;">​</a></h4><ul><li><strong>类定义</strong></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/**</span></span>
<span class="line"><span> * Cglib proxy.</span></span>
<span class="line"><span> *</span></span>
<span class="line"><span> * @author pdai</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>@Service</span></span>
<span class="line"><span>public class CglibProxyDemoServiceImpl {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public void doMethod1() {</span></span>
<span class="line"><span>        System.out.println(&quot;CglibProxyDemoServiceImpl.doMethod1()&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public String doMethod2() {</span></span>
<span class="line"><span>        System.out.println(&quot;CglibProxyDemoServiceImpl.doMethod2()&quot;);</span></span>
<span class="line"><span>        return &quot;hello world&quot;;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public String doMethod3() throws Exception {</span></span>
<span class="line"><span>        System.out.println(&quot;CglibProxyDemoServiceImpl.doMethod3()&quot;);</span></span>
<span class="line"><span>        throw new Exception(&quot;some exception&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><ul><li><strong>切面定义</strong></li></ul><p>和上面相同</p><ul><li><strong>输出</strong></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-----------------------</span></span>
<span class="line"><span>环绕通知: 进入方法</span></span>
<span class="line"><span>前置通知</span></span>
<span class="line"><span>CglibProxyDemoServiceImpl.doMethod1()</span></span>
<span class="line"><span>最终通知</span></span>
<span class="line"><span>环绕通知: 退出方法</span></span>
<span class="line"><span>-----------------------</span></span>
<span class="line"><span>环绕通知: 进入方法</span></span>
<span class="line"><span>前置通知</span></span>
<span class="line"><span>CglibProxyDemoServiceImpl.doMethod2()</span></span>
<span class="line"><span>后置通知, 返回值: hello world</span></span>
<span class="line"><span>最终通知</span></span>
<span class="line"><span>环绕通知: 退出方法</span></span>
<span class="line"><span>-----------------------</span></span>
<span class="line"><span>环绕通知: 进入方法</span></span>
<span class="line"><span>前置通知</span></span>
<span class="line"><span>CglibProxyDemoServiceImpl.doMethod3()</span></span>
<span class="line"><span>异常通知, 异常: some exception</span></span>
<span class="line"><span>最终通知</span></span></code></pre></div><h2 id="aop使用问题小结" tabindex="-1">AOP使用问题小结 <a class="header-anchor" href="#aop使用问题小结" aria-label="Permalink to &quot;AOP使用问题小结&quot;">​</a></h2><blockquote><p>这里总结下实际开发中会遇到的一些问题：</p></blockquote><h3 id="切入点-pointcut-的申明规则" tabindex="-1">切入点（pointcut）的申明规则? <a class="header-anchor" href="#切入点-pointcut-的申明规则" aria-label="Permalink to &quot;切入点（pointcut）的申明规则?&quot;">​</a></h3><p>Spring AOP 用户可能会经常使用 execution切入点指示符。执行表达式的格式如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>execution（modifiers-pattern? ret-type-pattern declaring-type-pattern? name-pattern（param-pattern） throws-pattern?）</span></span></code></pre></div><ul><li>ret-type-pattern 返回类型模式, name-pattern名字模式和param-pattern参数模式是必选的， 其它部分都是可选的。返回类型模式决定了方法的返回类型必须依次匹配一个连接点。 你会使用的最频繁的返回类型模式是<code>*</code>，<strong>它代表了匹配任意的返回类型</strong>。</li><li>declaring-type-pattern, 一个全限定的类型名将只会匹配返回给定类型的方法。</li><li>name-pattern 名字模式匹配的是方法名。 你可以使用<code>*</code>通配符作为所有或者部分命名模式。</li><li>param-pattern 参数模式稍微有点复杂：()匹配了一个不接受任何参数的方法， 而(..)匹配了一个接受任意数量参数的方法（零或者更多）。 模式(<em>)匹配了一个接受一个任何类型的参数的方法。 模式(</em>,String)匹配了一个接受两个参数的方法，第一个可以是任意类型， 第二个则必须是String类型。</li></ul><p>对应到我们上面的例子：</p><p><img src="`+c+`" alt="error.图片加载失败"></p><p>下面给出一些通用切入点表达式的例子。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 任意公共方法的执行：</span></span>
<span class="line"><span>execution（public * *（..））</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 任何一个名字以“set”开始的方法的执行：</span></span>
<span class="line"><span>execution（* set*（..））</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// AccountService接口定义的任意方法的执行：</span></span>
<span class="line"><span>execution（* com.xyz.service.AccountService.*（..））</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 在service包中定义的任意方法的执行：</span></span>
<span class="line"><span>execution（* com.xyz.service.*.*（..））</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 在service包或其子包中定义的任意方法的执行：</span></span>
<span class="line"><span>execution（* com.xyz.service..*.*（..））</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 在service包中的任意连接点（在Spring AOP中只是方法执行）：</span></span>
<span class="line"><span>within（com.xyz.service.*）</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 在service包或其子包中的任意连接点（在Spring AOP中只是方法执行）：</span></span>
<span class="line"><span>within（com.xyz.service..*）</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 实现了AccountService接口的代理对象的任意连接点 （在Spring AOP中只是方法执行）：</span></span>
<span class="line"><span>this（com.xyz.service.AccountService）// &#39;this&#39;在绑定表单中更加常用</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 实现AccountService接口的目标对象的任意连接点 （在Spring AOP中只是方法执行）：</span></span>
<span class="line"><span>target（com.xyz.service.AccountService） // &#39;target&#39;在绑定表单中更加常用</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 任何一个只接受一个参数，并且运行时所传入的参数是Serializable 接口的连接点（在Spring AOP中只是方法执行）</span></span>
<span class="line"><span>args（java.io.Serializable） // &#39;args&#39;在绑定表单中更加常用; 请注意在例子中给出的切入点不同于 execution(* *(java.io.Serializable))： args版本只有在动态运行时候传入参数是Serializable时才匹配，而execution版本在方法签名中声明只有一个 Serializable类型的参数时候匹配。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 目标对象中有一个 @Transactional 注解的任意连接点 （在Spring AOP中只是方法执行）</span></span>
<span class="line"><span>@target（org.springframework.transaction.annotation.Transactional）// &#39;@target&#39;在绑定表单中更加常用</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 任何一个目标对象声明的类型有一个 @Transactional 注解的连接点 （在Spring AOP中只是方法执行）：</span></span>
<span class="line"><span>@within（org.springframework.transaction.annotation.Transactional） // &#39;@within&#39;在绑定表单中更加常用</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 任何一个执行的方法有一个 @Transactional 注解的连接点 （在Spring AOP中只是方法执行）</span></span>
<span class="line"><span>@annotation（org.springframework.transaction.annotation.Transactional） // &#39;@annotation&#39;在绑定表单中更加常用</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 任何一个只接受一个参数，并且运行时所传入的参数类型具有@Classified 注解的连接点（在Spring AOP中只是方法执行）</span></span>
<span class="line"><span>@args（com.xyz.security.Classified） // &#39;@args&#39;在绑定表单中更加常用</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 任何一个在名为&#39;tradeService&#39;的Spring bean之上的连接点 （在Spring AOP中只是方法执行）</span></span>
<span class="line"><span>bean（tradeService）</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 任何一个在名字匹配通配符表达式&#39;*Service&#39;的Spring bean之上的连接点 （在Spring AOP中只是方法执行）</span></span>
<span class="line"><span>bean（*Service）</span></span></code></pre></div><p>此外Spring 支持如下三个逻辑运算符来组合切入点表达式</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&amp;&amp;：要求连接点同时匹配两个切入点表达式</span></span>
<span class="line"><span>||：要求连接点匹配任意个切入点表达式</span></span>
<span class="line"><span>!:：要求连接点不匹配指定的切入点表达式</span></span></code></pre></div><h3 id="多种增强通知的顺序" tabindex="-1">多种增强通知的顺序？ <a class="header-anchor" href="#多种增强通知的顺序" aria-label="Permalink to &quot;多种增强通知的顺序？&quot;">​</a></h3><p>如果有多个通知想要在同一连接点运行会发生什么？Spring AOP遵循跟AspectJ一样的优先规则来确定通知执行的顺序。 在“进入”连接点的情况下，最高优先级的通知会先执行（所以给定的两个前置通知中，优先级高的那个会先执行）。 在“退出”连接点的情况下，最高优先级的通知会最后执行。（所以给定的两个后置通知中， 优先级高的那个会第二个执行）。</p><p>当定义在不同的切面里的两个通知都需要在一个相同的连接点中运行， 那么除非你指定，否则执行的顺序是未知的。你可以通过指定优先级来控制执行顺序。 在标准的Spring方法中可以在切面类中实现org.springframework.core.Ordered 接口或者用<strong>Order注解</strong>做到这一点。在两个切面中， Ordered.getValue()方法返回值（或者注解值）较低的那个有更高的优先级。</p><p>当定义在相同的切面里的两个通知都需要在一个相同的连接点中运行， 执行的顺序是未知的（因为这里没有方法通过反射javac编译的类来获取声明顺序）。 考虑在每个切面类中按连接点压缩这些通知方法到一个通知方法，或者重构通知的片段到各自的切面类中 - 它能在切面级别进行排序。</p><h3 id="spring-aop-和-aspectj-之间的关键区别" tabindex="-1">Spring AOP 和 AspectJ 之间的关键区别？ <a class="header-anchor" href="#spring-aop-和-aspectj-之间的关键区别" aria-label="Permalink to &quot;Spring AOP 和 AspectJ 之间的关键区别？&quot;">​</a></h3><p>AspectJ可以做Spring AOP干不了的事情，<strong>它是AOP编程的完全解决方案，Spring AOP则致力于解决企业级开发中最普遍的AOP</strong>（方法织入）。</p><p>下表总结了 Spring AOP 和 AspectJ 之间的关键区别:</p><table tabindex="0"><thead><tr><th>Spring AOP</th><th>AspectJ</th></tr></thead><tbody><tr><td>在纯 Java 中实现</td><td>使用 Java 编程语言的扩展实现</td></tr><tr><td>不需要单独的编译过程</td><td>除非设置 LTW，否则需要 AspectJ 编译器 (ajc)</td></tr><tr><td>只能使用运行时织入</td><td>运行时织入不可用。支持编译时、编译后和加载时织入</td></tr><tr><td>功能不强-仅支持方法级编织</td><td>更强大 - 可以编织字段、方法、构造函数、静态初始值设定项、最终类/方法等......。</td></tr><tr><td>只能在由 Spring 容器管理的 bean 上实现</td><td>可以在所有域对象上实现</td></tr><tr><td>仅支持方法执行切入点</td><td>支持所有切入点</td></tr><tr><td>代理是由目标对象创建的, 并且切面应用在这些代理上</td><td>在执行应用程序之前 (在运行时) 前, 各方面直接在代码中进行织入</td></tr><tr><td>比 AspectJ 慢多了</td><td>更好的性能</td></tr><tr><td>易于学习和应用</td><td>相对于 Spring AOP 来说更复杂</td></tr></tbody></table><h3 id="spring-aop还是完全用aspectj" tabindex="-1">Spring AOP还是完全用AspectJ？ <a class="header-anchor" href="#spring-aop还是完全用aspectj" aria-label="Permalink to &quot;Spring AOP还是完全用AspectJ？&quot;">​</a></h3><p>以下Spring官方的回答：（总结来说就是 <strong>Spring AOP更易用，AspectJ更强大</strong>）。</p><ul><li>Spring AOP比完全使用AspectJ更加简单， 因为它不需要引入AspectJ的编译器／织入器到你开发和构建过程中。 如果你<strong>仅仅需要在Spring bean上通知执行操作，那么Spring AOP是合适的选择</strong>。</li><li>如果你需要通知domain对象或其它没有在Spring容器中管理的任意对象，那么你需要使用AspectJ。</li><li>如果你想通知除了简单的方法执行之外的连接点（如：调用连接点、字段get或set的连接点等等）， 也需要使用AspectJ。</li></ul><p>当使用AspectJ时，你可以选择使用AspectJ语言（也称为“代码风格”）或@AspectJ注解风格。 如果切面在你的设计中扮演一个很大的角色，并且你能在Eclipse等IDE中使用AspectJ Development Tools (AJDT)， 那么首选AspectJ语言 :- 因为该语言专门被设计用来编写切面，所以会更清晰、更简单。如果你没有使用 Eclipse等IDE，或者在你的应用中只有很少的切面并没有作为一个主要的角色，你或许应该考虑使用@AspectJ风格 并在你的IDE中附加一个普通的Java编辑器，并且在你的构建脚本中增加切面织入（链接）的段落。</p><h2 id="参考文章" tabindex="-1">参考文章 <a class="header-anchor" href="#参考文章" aria-label="Permalink to &quot;参考文章&quot;">​</a></h2><p><a href="http://shouce.jb51.net/spring/aop.html#aop-ataspectj" target="_blank" rel="noreferrer">http://shouce.jb51.net/spring/aop.html#aop-ataspectj</a></p><p><a href="https://www.cnblogs.com/linhp/p/5881788.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/linhp/p/5881788.html</a></p><p><a href="https://www.cnblogs.com/bj-xiaodao/p/10777914.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/bj-xiaodao/p/10777914.html</a></p><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>`,103)]))}const P=a(g,[["render",d]]);export{S as __pageData,P as default};
