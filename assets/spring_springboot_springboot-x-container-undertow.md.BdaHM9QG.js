import{_ as n,c as a,ai as e,o}from"./chunks/framework.BrYByd3F.js";const s="/vitepress-blog-template/images/spring/springboot/springboot-x-undertow-1.png",r="/vitepress-blog-template/images/spring/springboot/springboot-x-undertow-2.png",b=JSON.parse('{"title":"SpringBoot应用部署 - 替换tomcat为Undertow容器","description":"","frontmatter":{},"headers":[],"relativePath":"spring/springboot/springboot-x-container-undertow.md","filePath":"spring/springboot/springboot-x-container-undertow.md","lastUpdated":1737706346000}'),p={name:"spring/springboot/springboot-x-container-undertow.md"};function l(i,t,d,c,g,h){return o(),a("div",null,t[0]||(t[0]=[e(`<h1 id="springboot应用部署-替换tomcat为undertow容器" tabindex="-1">SpringBoot应用部署 - 替换tomcat为Undertow容器 <a class="header-anchor" href="#springboot应用部署-替换tomcat为undertow容器" aria-label="Permalink to &quot;SpringBoot应用部署 - 替换tomcat为Undertow容器&quot;">​</a></h1><blockquote><p>前文我们了解到Jetty更满足公有云的分布式环境的需求，而Tomcat更符合企业级环境；那么从性能的角度来看，更为优秀的servlet容器是Undertow。本文将介绍Undertow，以及SpringBoot集成Undertow的示例。@pdai</p></blockquote><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><blockquote><p>需要了解什么是Undertow，以及Undertow的性能优势。</p></blockquote><h3 id="什么是undertow" tabindex="-1">什么是Undertow? <a class="header-anchor" href="#什么是undertow" aria-label="Permalink to &quot;什么是Undertow?&quot;">​</a></h3><blockquote><p>内容来源于<a href="https://undertow.io/" target="_blank" rel="noreferrer">Undertow官网在新窗口打开</a></p></blockquote><p>Undertow 是一个采用 Java 开发的灵活的高性能 Web 服务器，提供包括阻塞和基于 NIO 的非堵塞机制。Undertow 是RedHat公司的开源产品(原先是JBoss的产品，然后Redhat收购了JBoss)，是 Wildfly 默认的 Web 服务器。</p><p>Undertow 提供一个基础的架构用来构建 Web 服务器，这是一个完全为嵌入式设计的项目，提供易用的构建器 API，完全兼容 Java EE Servlet 4 和低级非堵塞的处理器。</p><p>Undertow设计为完全可嵌入的，并具有易于使用的流畅的Builder API。 Undertow的生命周期完全由嵌入应用程序控制。</p><p><strong>Undertow的特性有哪些</strong>？</p><ul><li><strong>HTTP/2 Support</strong> Undertow 支持 HTTP/2 开箱即用，不需要重写引导类路径。</li><li><strong>支持 HTTP 升级</strong> 支持 HTTP 升级，允许多个协议通过 HTTP 端口上进行复用。</li><li><strong>支持 Web Socket</strong> Undertow 提供对 Web 套接字的全面支持，包括对 JSR-356 的支持。</li><li><strong>支持 Servlet 4.0</strong> Undertow 提供了对 Servlet 4.0 的支持，包括对嵌入式 Servlet 的支持，还可以混合部署 Servlet 和原生 Undertow 非阻塞处理程序。</li><li><strong>可嵌入式</strong> Undertow 可以嵌入到应用程序中，也可以通过几行代码独立运行。</li><li><strong>高灵活性</strong> 一个 Undertow 服务器是通过链式处理器来配置的，可以根据需要添加功能，因此可以避免添加没有必要的功能。</li></ul><h3 id="undertow性能比jetty和tomcat强多少" tabindex="-1">Undertow性能比jetty和tomcat强多少？ <a class="header-anchor" href="#undertow性能比jetty和tomcat强多少" aria-label="Permalink to &quot;Undertow性能比jetty和tomcat强多少？&quot;">​</a></h3><blockquote><p>关于Undertow的性能和jetty,tomcat对于，可以看如下两篇文章：</p></blockquote><ol><li><a href="https://examples.javacodegeeks.com/enterprise-java/spring/tomcat-vs-jetty-vs-undertow-comparison-of-spring-boot-embedded-servlet-containers/" target="_blank" rel="noreferrer">Tomcat vs. Jetty vs. Undertow: Comparison of Spring Boot Embedded Servlet Containers在新窗口打开</a></li><li><a href="https://cloud.tencent.com/developer/article/1699803" target="_blank" rel="noreferrer">Tomcat vs Jetty vs Undertow性能对比在新窗口打开</a></li></ol><p>大概的结论是：综合吞吐量，响应时间以及资源消耗，Undertow胜出</p><ol><li>吞吐量及响应时间 <ol><li>吞吐量：Undertow &gt; Jetty &gt; Tomcat</li><li>响应时间：Jetty &lt; Tomcat &lt; Undertow</li></ol></li><li>CPU使用率：Undertow &lt; Jetty &lt; Tomcat</li><li>内存使用率：Undertow &lt; Jetty &lt; Tomcat</li><li>线程数：Undertow &lt; Jetty &lt; Tomcat</li></ol><h2 id="替换tomcat为undertow容器" tabindex="-1">替换tomcat为Undertow容器 <a class="header-anchor" href="#替换tomcat为undertow容器" aria-label="Permalink to &quot;替换tomcat为Undertow容器&quot;">​</a></h2><blockquote><p>这里以一个Helloworld项目（<a href="https://pdai.tech/md/spring/springboot/springboot-x-hello-world.html" target="_blank" rel="noreferrer">SpringBoot入门 - 创建第一个Hello world工程</a>）为例，在此基础上移除内嵌的Tomcat并使用Undertow。</p></blockquote><h3 id="移除内嵌的tomcat并使用undertow" tabindex="-1">移除内嵌的Tomcat并使用Undertow <a class="header-anchor" href="#移除内嵌的tomcat并使用undertow" aria-label="Permalink to &quot;移除内嵌的Tomcat并使用Undertow&quot;">​</a></h3><p>移除内嵌的Tomcat相关的依赖spring-boot-starter-tomcat，并增加undertow的依赖spring-boot-starter-undertow</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span></span>
<span class="line"><span>    &lt;exclusions&gt;</span></span>
<span class="line"><span>        &lt;exclusion&gt;</span></span>
<span class="line"><span>            &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;</span></span>
<span class="line"><span>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span>        &lt;/exclusion&gt;</span></span>
<span class="line"><span>    &lt;/exclusions&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span>
<span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;spring-boot-starter-undertow&lt;/artifactId&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre></div><h3 id="配置undertow" tabindex="-1">配置Undertow <a class="header-anchor" href="#配置undertow" aria-label="Permalink to &quot;配置Undertow&quot;">​</a></h3><p>Undertow相关的配置可以看：</p><p><img src="`+s+'" alt="error.图片加载失败"></p><h3 id="简单测试" tabindex="-1">简单测试 <a class="header-anchor" href="#简单测试" aria-label="Permalink to &quot;简单测试&quot;">​</a></h3><p>运行SpringBootApplication</p><p>结果如下</p><p><img src="'+r+`" alt="error.图片加载失败"></p><p>运行的日志如下</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>  .   ____          _            __ _ _</span></span>
<span class="line"><span> /\\\\ / ___&#39;_ __ _ _(_)_ __  __ _ \\ \\ \\ \\</span></span>
<span class="line"><span>( ( )\\___ | &#39;_ | &#39;_| | &#39;_ \\/ _\` | \\ \\ \\ \\</span></span>
<span class="line"><span> \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span></span>
<span class="line"><span>  &#39;  |____| .__|_| |_|_| |_\\__, | / / / /</span></span>
<span class="line"><span> =========|_|==============|___/=/_/_/_/</span></span>
<span class="line"><span> :: Spring Boot ::                (v2.5.3)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2022-04-18  22:47:28.900  INFO 60368 --- [           main] .p.s.h.u.SpringBootHelloWorldApplication : Starting SpringBootHelloWorldApplication using Java 1.8.0_181 on MacBook-Pro.local with PID 60368 (/Users/pdai/pdai/www/tech-pdai-spring-demos/105-springboot-demo-helloworld-undertow/target/classes started by pdai in /Users/pdai/pdai/www/tech-pdai-spring-demos)</span></span>
<span class="line"><span>2022-04-18  22:47:28.902  INFO 60368 --- [           main] .p.s.h.u.SpringBootHelloWorldApplication : No active profile set, falling back to default profiles: default</span></span>
<span class="line"><span>2022-04-18  22:47:29.691  WARN 60368 --- [           main] io.undertow.websockets.jsr               : UT026010: Buffer pool was not set on WebSocketDeploymentInfo, the default pool will be used</span></span>
<span class="line"><span>2022-04-18  22:47:29.710  INFO 60368 --- [           main] io.undertow.servlet                      : Initializing Spring embedded WebApplicationContext</span></span>
<span class="line"><span>2022-04-18  22:47:29.710  INFO 60368 --- [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 769 ms</span></span>
<span class="line"><span>2022-04-18  22:47:30.020  INFO 60368 --- [           main] io.undertow                              : starting server: Undertow - 2.2.9.Final</span></span>
<span class="line"><span>2022-04-18  22:47:30.025  INFO 60368 --- [           main] org.xnio                                 : XNIO version 3.8.4.Final</span></span>
<span class="line"><span>2022-04-18  22:47:30.029  INFO 60368 --- [           main] org.xnio.nio                             : XNIO NIO Implementation Version 3.8.4.Final</span></span>
<span class="line"><span>2022-04-18  22:47:30.060  INFO 60368 --- [           main] org.jboss.threads                        : JBoss Threads version 3.1.0.Final</span></span>
<span class="line"><span>2022-04-18  22:47:30.121  INFO 60368 --- [           main] o.s.b.w.e.undertow.UndertowWebServer     : Undertow started on port(s) 8080 (http)</span></span>
<span class="line"><span>2022-04-18  22:47:30.132  INFO 60368 --- [           main] .p.s.h.u.SpringBootHelloWorldApplication : Started SpringBootHelloWorldApplication in 1.586 seconds (JVM running for 2.215)</span></span></code></pre></div><h2 id="进一步理解" tabindex="-1">进一步理解 <a class="header-anchor" href="#进一步理解" aria-label="Permalink to &quot;进一步理解&quot;">​</a></h2><blockquote><p>通过几个问题进一步理解。</p></blockquote><h3 id="在异步nio环境下的性能" tabindex="-1">在异步NIO环境下的性能？ <a class="header-anchor" href="#在异步nio环境下的性能" aria-label="Permalink to &quot;在异步NIO环境下的性能？&quot;">​</a></h3><blockquote><p>结论来源于：<a href="https://blog.51cto.com/u%5C_3664660/3212743" target="_blank" rel="noreferrer">https://blog.51cto.com/u\\_3664660/3212743</a></p></blockquote><p>HTTP异步的目的在帮助dispatcherservlet分担压力，提升吞吐量。但如果运行在NIO模式的服务容器上，就会产生负面影响，因为NIO本身就做了类似的事情，此时再加HTTP异步，则相当于又加了N多不必要的线程，导致性能主要消耗在线程的开销上，所以<strong>建议使用tomcat作为内嵌容器并且没有开启tomcat的NIO模式时，可以配合HTTP异步来提升程序性能</strong>。尤其是当业务繁重时，提升效果尤其明显。</p><h2 id="示例源码" tabindex="-1">示例源码 <a class="header-anchor" href="#示例源码" aria-label="Permalink to &quot;示例源码&quot;">​</a></h2><p><a href="https://github.com/realpdai/tech-pdai-spring-demos" target="_blank" rel="noreferrer">https://github.com/realpdai/tech-pdai-spring-demos</a></p><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>`,38)]))}const m=n(p,[["render",l]]);export{b as __pageData,m as default};
