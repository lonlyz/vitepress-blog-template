import{_ as a,c as n,ai as p,o as e}from"./chunks/framework.BrYByd3F.js";const l="/vitepress-blog-template/images/spring/springboot/springboot-x-docker-11.png",t="/vitepress-blog-template/images/spring/springboot/springboot-x-docker-2.png",o="/vitepress-blog-template/images/spring/springboot/springboot-x-docker-3.png",i="/vitepress-blog-template/images/spring/springboot/springboot-x-docker-4.png",r="/vitepress-blog-template/images/spring/springboot/springboot-x-docker-5.png",c="/vitepress-blog-template/images/spring/springboot/springboot-x-docker-1.png",g="/vitepress-blog-template/images/spring/springboot/springboot-x-docker-21.png",d="/vitepress-blog-template/images/spring/springboot/springboot-x-docker-22.png",u="/vitepress-blog-template/images/spring/springboot/springboot-x-docker-23.png",b="/vitepress-blog-template/images/spring/springboot/springboot-x-docker-24.png",m="/vitepress-blog-template/images/spring/springboot/springboot-x-docker-25.png",I=JSON.parse('{"title":"SpringBoot应用部署 - docker镜像打包,运行和管理","description":"","frontmatter":{},"headers":[],"relativePath":"spring/springboot/springboot-x-deploy-docker.md","filePath":"spring/springboot/springboot-x-deploy-docker.md","lastUpdated":1737706346000}'),k={name:"spring/springboot/springboot-x-deploy-docker.md"};function h(f,s,v,_,q,D){return e(),n("div",null,s[0]||(s[0]=[p(`<h1 id="springboot应用部署-docker镜像打包-运行和管理" tabindex="-1">SpringBoot应用部署 - docker镜像打包,运行和管理 <a class="header-anchor" href="#springboot应用部署-docker镜像打包-运行和管理" aria-label="Permalink to &quot;SpringBoot应用部署 - docker镜像打包,运行和管理&quot;">​</a></h1><blockquote><p>随着软虚拟化docker的流行，基于docker的devops技术栈也开始流行。本文主要介绍通过docker-maven-plugin将springboot应用打包成docker镜像，通过Docker桌面化管理工具或者Idea Docker插件进行管理。@pdai</p></blockquote><h2 id="通过docker-maven-plugin构建镜像" tabindex="-1">通过docker-maven-plugin构建镜像 <a class="header-anchor" href="#通过docker-maven-plugin构建镜像" aria-label="Permalink to &quot;通过docker-maven-plugin构建镜像&quot;">​</a></h2><blockquote><p>这里使用的是最为常用的maven构建，由spofity开源，具体可以看<a href="https://github.com/spotify/dockerfile-maven" target="_blank" rel="noreferrer">Github - docker-maven-plugin在新窗口打开</a></p></blockquote><h3 id="编写dockerfile文件" tabindex="-1">编写Dockerfile文件 <a class="header-anchor" href="#编写dockerfile文件" aria-label="Permalink to &quot;编写Dockerfile文件&quot;">​</a></h3><blockquote><p>更多Dockerfile相关的，可以看Docker官网<a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="noreferrer">Dockerfile配置在新窗口打开</a></p></blockquote><p>在项目的根目录（与pom同一层级）创建Dockerfile文件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>FROM openjdk:8-jre</span></span>
<span class="line"><span>MAINTAINER pdai</span></span>
<span class="line"><span>WORKDIR /</span></span>
<span class="line"><span>ADD target/springboot-demo-helloworld.jar app.jar</span></span>
<span class="line"><span>EXPOSE 8080</span></span>
<span class="line"><span>ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;]</span></span>
<span class="line"><span>CMD [&quot;app.jar&quot;]</span></span></code></pre></div><p>具体解释如下：</p><ul><li><code>FROM openjdk:8-jre</code>，基镜像一般采用openjdk</li><li><code>MAINTAINER pdai</code>，创建镜像的作者，一般是作者邮件地址</li><li><code>WORKDIR /</code>，WORKDIR指令设置Dockerfile中的任何RUN，CMD，ENTRPOINT，COPY和ADD指令的工作目录。</li><li><code>ADD target/springboot-demo-helloworld.jar app.jar</code>，表示将jar包添加到镜像中，并重命名app.jar</li><li><code>EXPOSE 8080</code>，表示暴露的端口是8080</li><li><code>ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;]</code>，表示启动时运行 java -jar</li><li><code>CMD [&quot;app.jar&quot;]</code>，表示参数，这里是运行的具体的jar</li></ul><h3 id="引入docker-maven-plugin" tabindex="-1">引入docker-maven-plugin <a class="header-anchor" href="#引入docker-maven-plugin" aria-label="Permalink to &quot;引入docker-maven-plugin&quot;">​</a></h3><p>为方便你学习，我这边给每行添加了具体的注释</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;build&gt;</span></span>
<span class="line"><span>    &lt;!-- 固定的jar的名字，这样Dockerfile可以固定写 --&gt;</span></span>
<span class="line"><span>    &lt;finalName&gt;springboot-demo-helloworld&lt;/finalName&gt;</span></span>
<span class="line"><span>    &lt;!-- 构建的插件 --&gt;</span></span>
<span class="line"><span>    &lt;plugins&gt;</span></span>
<span class="line"><span>        &lt;!-- springboot构建jar --&gt;</span></span>
<span class="line"><span>        &lt;plugin&gt;</span></span>
<span class="line"><span>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span>            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span></span>
<span class="line"><span>        &lt;/plugin&gt;</span></span>
<span class="line"><span>        &lt;!-- 构建docker镜像 --&gt;</span></span>
<span class="line"><span>        &lt;plugin&gt;</span></span>
<span class="line"><span>            &lt;groupId&gt;com.spotify&lt;/groupId&gt;</span></span>
<span class="line"><span>            &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;</span></span>
<span class="line"><span>            &lt;version&gt;1.2.2&lt;/version&gt;</span></span>
<span class="line"><span>            &lt;executions&gt;</span></span>
<span class="line"><span>                &lt;execution&gt;</span></span>
<span class="line"><span>                    &lt;id&gt;build-image&lt;/id&gt;</span></span>
<span class="line"><span>                    &lt;phase&gt;package&lt;/phase&gt;</span></span>
<span class="line"><span>                    &lt;goals&gt;</span></span>
<span class="line"><span>                        &lt;goal&gt;build&lt;/goal&gt;</span></span>
<span class="line"><span>                    &lt;/goals&gt;</span></span>
<span class="line"><span>                &lt;/execution&gt;</span></span>
<span class="line"><span>            &lt;/executions&gt;</span></span>
<span class="line"><span>            &lt;configuration&gt;</span></span>
<span class="line"><span>                &lt;!-- image 的名字 --&gt;</span></span>
<span class="line"><span>                &lt;imageName&gt;\${project.build.finalName}&lt;/imageName&gt;</span></span>
<span class="line"><span>                &lt;!-- image 的tag, 可以是多个 --&gt;</span></span>
<span class="line"><span>                &lt;imageTags&gt;</span></span>
<span class="line"><span>                    &lt;imageTag&gt;latest&lt;/imageTag&gt;</span></span>
<span class="line"><span>                    &lt;imageTag&gt;\${project.version}&lt;/imageTag&gt;</span></span>
<span class="line"><span>                &lt;/imageTags&gt;</span></span>
<span class="line"><span>                &lt;!-- Dockerfile所在的目录 --&gt;</span></span>
<span class="line"><span>                &lt;dockerDirectory&gt;\${project.basedir}&lt;/dockerDirectory&gt;</span></span>
<span class="line"><span>                &lt;!-- 复制jar到docker的位置 --&gt;</span></span>
<span class="line"><span>                &lt;resources&gt;</span></span>
<span class="line"><span>                    &lt;resource&gt;</span></span>
<span class="line"><span>                        &lt;targetPath&gt;/&lt;/targetPath&gt;</span></span>
<span class="line"><span>                        &lt;!--jar 包所在的路径，对应target目录--&gt;</span></span>
<span class="line"><span>                        &lt;directory&gt;\${project.build.directory}&lt;/directory&gt;</span></span>
<span class="line"><span>                        &lt;!-- 包含的jar　--&gt;</span></span>
<span class="line"><span>                        &lt;include&gt;\${project.build.finalName}.jar&lt;/include&gt;</span></span>
<span class="line"><span>                    &lt;/resource&gt;</span></span>
<span class="line"><span>                &lt;/resources&gt;</span></span>
<span class="line"><span>            &lt;/configuration&gt;</span></span>
<span class="line"><span>        &lt;/plugin&gt;</span></span>
<span class="line"><span>    &lt;/plugins&gt;</span></span>
<span class="line"><span>&lt;/build&gt;</span></span></code></pre></div><h3 id="构建镜像测试" tabindex="-1">构建镜像测试 <a class="header-anchor" href="#构建镜像测试" aria-label="Permalink to &quot;构建镜像测试&quot;">​</a></h3><p>执行mvn package</p><p><img src="`+l+`" alt="error.图片加载失败"></p><p>编译docker image的日志</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[INFO] Building image springboot-demo-helloworld</span></span>
<span class="line"><span>Step 1/7 : FROM openjdk:8-jre</span></span>
<span class="line"><span></span></span>
<span class="line"><span> ---&gt; c739d22edd6e</span></span>
<span class="line"><span>Step 2/7 : MAINTAINER pdai</span></span>
<span class="line"><span></span></span>
<span class="line"><span> ---&gt; Using cache</span></span>
<span class="line"><span> ---&gt; 06c416bae082</span></span>
<span class="line"><span>Step 3/7 : WORKDIR /</span></span>
<span class="line"><span></span></span>
<span class="line"><span> ---&gt; Using cache</span></span>
<span class="line"><span> ---&gt; b6daef7ab3f2</span></span>
<span class="line"><span>Step 4/7 : ADD target/springboot-demo-helloworld.jar app.jar</span></span>
<span class="line"><span></span></span>
<span class="line"><span> ---&gt; Using cache</span></span>
<span class="line"><span> ---&gt; 22201ebd2a12</span></span>
<span class="line"><span>Step 5/7 : EXPOSE 8080</span></span>
<span class="line"><span></span></span>
<span class="line"><span> ---&gt; Using cache</span></span>
<span class="line"><span> ---&gt; 42dd45bbeeb5</span></span>
<span class="line"><span>Step 6/7 : ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;]</span></span>
<span class="line"><span></span></span>
<span class="line"><span> ---&gt; Using cache</span></span>
<span class="line"><span> ---&gt; 9725c120cda8</span></span>
<span class="line"><span>Step 7/7 : CMD [&quot;app.jar&quot;]</span></span>
<span class="line"><span></span></span>
<span class="line"><span> ---&gt; Using cache</span></span>
<span class="line"><span> ---&gt; d7f8c4745bf3</span></span>
<span class="line"><span>ProgressMessage{id=null, status=null, stream=null, error=null, progress=null, progressDetail=null}</span></span>
<span class="line"><span>Successfully built d7f8c4745bf3</span></span>
<span class="line"><span>Successfully tagged springboot-demo-helloworld:latest</span></span>
<span class="line"><span>[INFO] Built springboot-demo-helloworld</span></span>
<span class="line"><span>[INFO] Tagging springboot-demo-helloworld with latest</span></span>
<span class="line"><span>[INFO] Tagging springboot-demo-helloworld with 1.0-SNAPSHOT</span></span>
<span class="line"><span>[INFO] ------------------------------------------------------------------------</span></span>
<span class="line"><span>[INFO] BUILD SUCCESS</span></span>
<span class="line"><span>[INFO] ------------------------------------------------------------------------</span></span>
<span class="line"><span>[INFO] Total time:  17.264 s</span></span></code></pre></div><h2 id="通过docker桌面化工具管理" tabindex="-1">通过Docker桌面化工具管理 <a class="header-anchor" href="#通过docker桌面化工具管理" aria-label="Permalink to &quot;通过Docker桌面化工具管理&quot;">​</a></h2><blockquote><p>这里展示通过Docker 官方的管理工具管理，<a href="https://docs.docker.com/get-docker/" target="_blank" rel="noreferrer">官网地址在新窗口打开</a>。</p></blockquote><p>编译完以后，默认会在本地docker中生成镜像</p><p><img src="`+t+'" alt="error.图片加载失败"></p><p>点击Run</p><p><img src="'+o+'" alt="error.图片加载失败"></p><p>Run后的实例</p><p><img src="'+i+'" alt="error.图片加载失败"></p><p>实例的日志</p><p><img src="'+r+'" alt="error.图片加载失败"></p><p>访问接口</p><p><img src="'+c+'" alt="error.图片加载失败"></p><h2 id="通过idea的docker插件进行管理" tabindex="-1">通过idea的docker插件进行管理 <a class="header-anchor" href="#通过idea的docker插件进行管理" aria-label="Permalink to &quot;通过idea的docker插件进行管理&quot;">​</a></h2><blockquote><p>除了docker自带的管理工具，还可以通过idea的docker插件进行管理。</p></blockquote><p>（新的版本自带docker插件，如果没有可以自行下载）</p><p>配置Docker插件</p><p><img src="'+g+'" alt="error.图片加载失败"></p><p>点击连接</p><p><img src="'+d+'" alt="error.图片加载失败"></p><p>可以看到编译后的镜像</p><p><img src="'+u+'" alt="error.图片加载失败"></p><p>右击，添加Container</p><p><img src="'+b+'" alt="error.图片加载失败"></p><p>启动这个镜像的实例</p><p><img src="'+m+'" alt="error.图片加载失败"></p><h2 id="示例源码" tabindex="-1">示例源码 <a class="header-anchor" href="#示例源码" aria-label="Permalink to &quot;示例源码&quot;">​</a></h2><p><a href="https://github.com/realpdai/tech-pdai-spring-demos" target="_blank" rel="noreferrer">https://github.com/realpdai/tech-pdai-spring-demos</a></p><p>此外可以参考官方相关文档</p><p><a href="https://spring.io/guides/gs/spring-boot-docker/" target="_blank" rel="noreferrer">https://spring.io/guides/gs/spring-boot-docker/</a></p><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>',48)]))}const N=a(k,[["render",h]]);export{I as __pageData,N as default};
