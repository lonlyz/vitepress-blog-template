import{_ as a,c as e,ai as o,o as t}from"./chunks/framework.BrYByd3F.js";const n="/vitepress-blog-template/images/spring/springboot/springboot-hello-devtool-1.png",p="/vitepress-blog-template/images/spring/springboot/springboot-hello-devtool-5.png",l="/vitepress-blog-template/images/spring/springboot/springboot-hello-devtool-7.png",i="/vitepress-blog-template/images/spring/springboot/springboot-hello-devtool-8.png",r="/vitepress-blog-template/images/spring/springboot/springboot-hello-devtool-3.png",c="/vitepress-blog-template/images/spring/springboot/springboot-hello-devtool-2.png",d="/vitepress-blog-template/images/spring/springboot/springboot-hello-devtool-4.png",g="/vitepress-blog-template/images/spring/springboot/springboot-hello-devtool-6.png",k=JSON.parse('{"title":"SpringBoot入门 - 配置热部署devtools工具","description":"","frontmatter":{},"headers":[],"relativePath":"spring/springboot/springboot-x-hello-devtool.md","filePath":"spring/springboot/springboot-x-hello-devtool.md","lastUpdated":1737706346000}'),u={name:"spring/springboot/springboot-x-hello-devtool.md"};function h(b,s,v,m,_,q){return t(),e("div",null,s[0]||(s[0]=[o('<h1 id="springboot入门-配置热部署devtools工具" tabindex="-1">SpringBoot入门 - 配置热部署devtools工具 <a class="header-anchor" href="#springboot入门-配置热部署devtools工具" aria-label="Permalink to &quot;SpringBoot入门 - 配置热部署devtools工具&quot;">​</a></h1><blockquote><p>在SpringBoot开发调试中，如果我每行代码的修改都需要重启启动再调试，可能比较费时间；SpringBoot团队针对此问题提供了spring-boot-devtools（简称devtools）插件，它试图提升开发调试的效率。@pdai</p></blockquote><h2 id="准备知识点" tabindex="-1">准备知识点 <a class="header-anchor" href="#准备知识点" aria-label="Permalink to &quot;准备知识点&quot;">​</a></h2><h3 id="什么是热部署和热加载" tabindex="-1">什么是热部署和热加载？ <a class="header-anchor" href="#什么是热部署和热加载" aria-label="Permalink to &quot;什么是热部署和热加载？&quot;">​</a></h3><blockquote><p>热部署和热加载是在应用正在运行的时候，自动更新（重新加载或者替换class等）应用的一种能力。（PS：spring-boot-devtools提供的方案也是要重启的，只是无需手动重启能实现自动加载而已。）</p></blockquote><p>严格意义上，我们需要区分下热部署和热加载, 对于Java项目而言：</p><ul><li><p><strong>热部署</strong></p><ul><li>在服务器运行时重新部署项目</li><li>它是直接重新加载整个应用，这种方式会释放内存，比热加载更加干净彻底，但同时也更费时间。</li></ul></li><li><p><strong>热加载</strong></p><ul><li>在在运行时重新加载class，从而升级应用。</li><li>热加载的实现原理主要依赖<a href="https://pdai.tech/md/java/jvm/java-jvm-classload.html" target="_blank" rel="noreferrer">java的类加载机制</a>，在实现方式可以概括为在容器启动的时候起一条后台线程，定时的检测类文件的时间戳变化，如果类的时间戳变掉了，则将类重新载入。</li><li>对比反射机制，反射是在运行时获取类信息，通过动态的调用来改变程序行为； 热加载则是在运行时通过重新加载改变类信息，直接改变程序行为。</li></ul></li></ul><h3 id="什么是liveload" tabindex="-1">什么是LiveLoad？ <a class="header-anchor" href="#什么是liveload" aria-label="Permalink to &quot;什么是LiveLoad？&quot;">​</a></h3><p>LiveLoad是提供浏览器客户端自动加载更新的工具，分为LiveLoad服务器和Liveload浏览器插件两部分； devtools中已经集成了LiveLoad服务器，所以如果我们开发的是web应用，并且期望浏览器自动刷新， 这时候可以考虑LiveLoad.</p><p><img src="'+n+`" alt="error.图片加载失败"></p><p>同一时间只能运行一个LiveReload服务器。 开始应用程序之前，请确保没有其他LiveReload服务器正在运行。如果从IDE启动多个应用程序，则只有第一个应用程序将支持LiveReload。</p><h2 id="配置devtools实现热部署" tabindex="-1">配置devtools实现热部署 <a class="header-anchor" href="#配置devtools实现热部署" aria-label="Permalink to &quot;配置devtools实现热部署&quot;">​</a></h2><blockquote><p>我们通过如下配置来实现自动重启方式的热部署。</p></blockquote><h3 id="pom配置" tabindex="-1">POM配置 <a class="header-anchor" href="#pom配置" aria-label="Permalink to &quot;POM配置&quot;">​</a></h3><p>添加spring-boot-devtools的依赖</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;dependencies&gt;</span></span>
<span class="line"><span>    &lt;dependency&gt;</span></span>
<span class="line"><span>        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span>        &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span></span>
<span class="line"><span>        &lt;optional&gt;true&lt;/optional&gt; &lt;!-- 可以防止将devtools依赖传递到其他模块中 --&gt;</span></span>
<span class="line"><span>    &lt;/dependency&gt;</span></span>
<span class="line"><span>&lt;/dependencies&gt;</span></span></code></pre></div><h3 id="idea配置" tabindex="-1">IDEA配置 <a class="header-anchor" href="#idea配置" aria-label="Permalink to &quot;IDEA配置&quot;">​</a></h3><blockquote><p>如果你使用IDEA开发工具，通常有如下两种方式：</p></blockquote><ul><li>方式一： <strong>无任何配置时，手动触发重启更新（Ctrl+F9）</strong></li></ul><p><img src="`+p+'" alt="error.图片加载失败"></p><p>（也可以用<code>mvn compile</code>编译触发重启更新）</p><ul><li>方式二： <strong>IDEA需开启运行时编译，自动重启更新</strong></li></ul><p><strong>设置1</strong>：</p><p>File-&gt;Setting-&gt;Build,Execution,Deployment-&gt;Compile</p><p>勾选：Make project automatically</p><p><img src="'+l+'" alt="error.图片加载失败"></p><p><strong>设置2</strong>：</p><p>快捷键：ctrl+alt+shift+/</p><p>选择：Registry</p><p>勾选：compiler.automake.allow.when.app.running</p><p>新版本的IDEA可以在File-&gt;setting-&gt;Advanced Setttings里面的第一个设置：</p><p><img src="'+i+`" alt="error.图片加载失败"></p><h3 id="application-yml配置" tabindex="-1">application.yml配置 <a class="header-anchor" href="#application-yml配置" aria-label="Permalink to &quot;application.yml配置&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>spring:</span></span>
<span class="line"><span>  devtools:</span></span>
<span class="line"><span>    restart:</span></span>
<span class="line"><span>      enabled: true  #设置开启热部署</span></span>
<span class="line"><span>      additional-paths: src/main/java #重启目录</span></span>
<span class="line"><span>      exclude: WEB-INF/**</span></span>
<span class="line"><span>  thymeleaf:</span></span>
<span class="line"><span>    cache: false #使用Thymeleaf模板引擎，关闭缓存</span></span></code></pre></div><h3 id="使用liveload" tabindex="-1">使用LiveLoad <a class="header-anchor" href="#使用liveload" aria-label="Permalink to &quot;使用LiveLoad&quot;">​</a></h3><p>spring-boot-devtools模块包含<strong>嵌入式LiveReload服务器</strong>，可以在资源更改时用于触发浏览器刷新。 LiveReload浏览器扩展程序支持Chrome，Firefox和Safari，你可以从livereload.com免费下载。</p><p><img src="`+r+'" alt="error.图片加载失败"></p><p>或者从浏览器插件中心下载，比如firefox:</p><p><img src="'+c+'" alt="error.图片加载失败"></p><p>安装完之后，可以通过如下图标管理</p><p><img src="'+d+`" alt="error.图片加载失败"></p><p>如果你不想在应用程序运行时启动LiveReload服务器，则可以将spring.devtools.livereload.enabled属性设置为false 。</p><p>同一时间只能运行一个LiveReload服务器。 开始应用程序之前，请确保没有其他LiveReload服务器正在运行。如果从IDE启动多个应用程序，则只有第一个应用程序将支持LiveReload。</p><h2 id="进一步理解" tabindex="-1">进一步理解 <a class="header-anchor" href="#进一步理解" aria-label="Permalink to &quot;进一步理解&quot;">​</a></h2><blockquote><p>虽然一些开发者会使用devtool工具，但是很少有能够深入理解的；让我们理解如下几个问题，帮助你进一步理解。@pdai</p></blockquote><h3 id="devtool的原理-为何会自动重启" tabindex="-1">devtool的原理？为何会自动重启？ <a class="header-anchor" href="#devtool的原理-为何会自动重启" aria-label="Permalink to &quot;devtool的原理？为何会自动重启？&quot;">​</a></h3><blockquote><p>为什么同样是重启应用，为什么不手动重启，而是建议使用spring-boot-devtools进行热部署重启？</p></blockquote><p>spring-boot-devtools使用了两个类加载器ClassLoader，一个ClassLoader加载不会发生更改的类（第三方jar包），另一个ClassLoader（restart ClassLoader）加载会更改的类（自定义的类）。</p><p>后台启动一个<strong>文件监听线程（File Watcher）</strong>，<strong>监测的目录中的文件发生变动时， 原来的restart ClassLoader被丢弃，将会重新加载新的restart ClassLoader</strong>。</p><p>因为文件变动后，第三方jar包不再重新加载，只加载自定义的类，加载的类比较少，所以重启比较快。</p><p>这也是为什么，同样是重启应用，为什么不手动重启，建议使用spring-boot-devtools进行热部署重启。</p><p>在自动重启中有几点需要注意:</p><ul><li><strong>自动重启会记录日志的</strong></li></ul><p>（记录在什么情况下重启的日志）</p><p>可以通过如下关闭</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>spring:</span></span>
<span class="line"><span>  devtools:</span></span>
<span class="line"><span>    restart:</span></span>
<span class="line"><span>      log-condition-evaluation-delta: false</span></span></code></pre></div><ul><li><strong>排除一些不需要自动重启的资源</strong></li></ul><p>某些资源在更改时不一定需要触发重新启动。默认情况下，改变资源/META-INF/maven，/META-INF/resources，/resources，/static，/public，或/templates不触发重新启动，但确会触发现场重装。如果要自定义这些排除项，可以使用该spring.devtools.restart.exclude属性。例如，要仅排除/static，/public你将设置以下属性：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>spring:</span></span>
<span class="line"><span>  devtools:</span></span>
<span class="line"><span>    restart:</span></span>
<span class="line"><span>      exclude: &quot;static/**,public/**&quot;</span></span></code></pre></div><p>如果要保留这些默认值并添加其他排除项，请改用该spring.devtools.restart.additional-exclude属性。</p><ul><li><strong>自定义重启类加载器</strong></li></ul><p>重启功能是通过使用两个类加载器来实现的。对于大多数应用程序，这种方法效果很好。但是，它有时会导致类加载问题。</p><p>默认情况下，IDE 中的任何打开项目都使用“重启”类加载器加载，任何常规.jar文件都使用“基本”类加载器加载。如果你处理一个多模块项目，并且不是每个模块都导入到你的 IDE 中，你可能需要自定义一些东西。为此，你可以创建一个META-INF/spring-devtools.properties文件。</p><p>该spring-devtools.properties文件可以包含以restart.exclude和为前缀的属性restart.include。该include元素是应该被拉高到“重启”的类加载器的项目，以及exclude要素是应该向下推入“Base”类加载器的项目。该属性的值是应用于类路径的正则表达式模式，如以下示例所示：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>restart:</span></span>
<span class="line"><span>  exclude:</span></span>
<span class="line"><span>    companycommonlibs: &quot;/mycorp-common-[\\\\w\\\\d-\\\\.]+\\\\.jar&quot;</span></span>
<span class="line"><span>  include:</span></span>
<span class="line"><span>    projectcommon: &quot;/mycorp-myproj-[\\\\w\\\\d-\\\\.]+\\\\.jar&quot;</span></span></code></pre></div><p>更多相关的信息可以在<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.devtools" target="_blank" rel="noreferrer">这里在新窗口打开</a>查看。</p><h3 id="devtool是否会被打包进jar" tabindex="-1">devtool是否会被打包进Jar？ <a class="header-anchor" href="#devtool是否会被打包进jar" aria-label="Permalink to &quot;devtool是否会被打包进Jar？&quot;">​</a></h3><blockquote><p>devtool原则上来说应该是只在开发调试的时候使用，而在生产环境运行jar包时是不需要的，所以Spring打包会不会把它打进JAR吗？</p></blockquote><ul><li><strong>默认情况下，不会被打包进JAR</strong></li></ul><p>运行打包的应用程序时，开发人员工具<strong>会自动禁用</strong>。如果你通过 java -jar或者其他特殊的类加载器进行启动时，都会被认为是“生产环境的应用”。</p><ul><li><strong>如果我们期望远程调试应用</strong></li></ul><p>（<em>生产环境勿用，只有在受信任的网络上运行或使用 SSL 进行保护时，才应启用它</em>）</p><p>在这种情况下，devtool也具备远程调试的能力：远程客户端应用程序旨在从你的 IDE 中运行。你需要org.springframework.boot.devtools.RemoteSpringApplication使用与你连接的远程项目相同的类路径运行。应用程序的唯一必需参数是它连接到的远程 URL。</p><p>例如，如果使用 Eclipse 或 Spring Tools，并且你有一个my-app已部署到 Cloud Foundry 的名为的项目，执行以下操作：</p><ol><li>选择Run Configurations…​从Run菜单。</li><li>创建一个新的Java Application“启动配置”。</li><li>浏览my-app项目。</li><li>使用org.springframework.boot.devtools.RemoteSpringApplication作为主类。</li><li>添加<a href="https://myapp.cfapps.xn--ioProgram-6y4o" target="_blank" rel="noreferrer">https://myapp.cfapps.io到Program</a> arguments（或任何你的远程 URL）。</li></ol><p>正在运行的远程客户端可能类似于以下列表：</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>  .   ____          _                                              __ _ _</span></span>
<span class="line"><span> /\\\\ / ___&#39;_ __ _ _(_)_ __  __ _          ___               _      \\ \\ \\ \\</span></span>
<span class="line"><span>( ( )\\___ | &#39;_ | &#39;_| | &#39;_ \\/ _\` |        | _ \\___ _ __  ___| |_ ___ \\ \\ \\ \\</span></span>
<span class="line"><span> \\\\/  ___)| |_)| | | | | || (_| []::::::[]   / -_) &#39;  \\/ _ \\  _/ -_) ) ) ) )</span></span>
<span class="line"><span>  &#39;  |____| .__|_| |_|_| |_\\__, |        |_|_\\___|_|_|_\\___/\\__\\___|/ / / /</span></span>
<span class="line"><span> =========|_|==============|___/===================================/_/_/_/</span></span>
<span class="line"><span> :: Spring Boot Remote :: 2.5.4</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2015-06-10 18:25:06.632  INFO 14938 --- [           main] o.s.b.devtools.RemoteSpringApplication   : Starting RemoteSpringApplication on pwmbp with PID 14938 (/Users/pwebb/projects/spring-boot/code/spring-boot-project/spring-boot-devtools/target/classes started by pwebb in /Users/pwebb/projects/spring-boot/code)</span></span>
<span class="line"><span>2015-06-10 18:25:06.671  INFO 14938 --- [           main] s.c.a.AnnotationConfigApplicationContext : Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@2a17b7b6: startup date [Wed Jun 10 18:25:06 PDT 2015]; root of context hierarchy</span></span>
<span class="line"><span>2015-06-10 18:25:07.043  WARN 14938 --- [           main] o.s.b.d.r.c.RemoteClientConfiguration    : The connection to http://localhost:8080 is insecure. You should use a URL starting with &#39;https://&#39;.</span></span>
<span class="line"><span>2015-06-10 18:25:07.074  INFO 14938 --- [           main] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729</span></span>
<span class="line"><span>2015-06-10 18:25:07.130  INFO 14938 --- [           main] o.s.b.devtools.RemoteSpringApplication   : Started RemoteSpringApplication in 0.74 seconds (JVM running for 1.105)</span></span></code></pre></div><h3 id="devtool为何会默认禁用缓存选项" tabindex="-1">devtool为何会默认禁用缓存选项？ <a class="header-anchor" href="#devtool为何会默认禁用缓存选项" aria-label="Permalink to &quot;devtool为何会默认禁用缓存选项？&quot;">​</a></h3><blockquote><p>Spring Boot 支持的一些库<strong>使用缓存来提高性能</strong>。例如，模板引擎缓存已编译的模板以避免重复解析模板文件。此外，Spring MVC 可以在提供静态资源时向响应添加 HTTP 缓存标头。</p></blockquote><p>虽然缓存<strong>在生产中非常有益，但在开发过程中可能会适得其反</strong>，使你无法看到刚刚在应用程序中所做的更改。出于这个原因， spring-boot-devtools 默认禁用缓存选项。</p><p>比如Thymeleaf 提供了spring.thymeleaf.cache来设置模板引擎的缓存，使用spring-boot-devtools模块时是不需要手动设置这些属性的，因为spring-boot-devtools会自动进行设置。</p><p>那么会自动设置哪些配置呢？你可以在DevToolsPropertyDefaultsPostProcessor类找到对应的默认配置。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>public class DevToolsPropertyDefaultsPostProcessor implements EnvironmentPostProcessor {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	static {</span></span>
<span class="line"><span>		Map&lt;String, Object&gt; properties = new HashMap&lt;&gt;();</span></span>
<span class="line"><span>		properties.put(&quot;spring.thymeleaf.cache&quot;, &quot;false&quot;);</span></span>
<span class="line"><span>		properties.put(&quot;spring.freemarker.cache&quot;, &quot;false&quot;);</span></span>
<span class="line"><span>		properties.put(&quot;spring.groovy.template.cache&quot;, &quot;false&quot;);</span></span>
<span class="line"><span>		properties.put(&quot;spring.mustache.cache&quot;, &quot;false&quot;);</span></span>
<span class="line"><span>		properties.put(&quot;server.servlet.session.persistent&quot;, &quot;true&quot;);</span></span>
<span class="line"><span>		properties.put(&quot;spring.h2.console.enabled&quot;, &quot;true&quot;);</span></span>
<span class="line"><span>		properties.put(&quot;spring.web.resources.cache.period&quot;, &quot;0&quot;);</span></span>
<span class="line"><span>		properties.put(&quot;spring.web.resources.chain.cache&quot;, &quot;false&quot;);</span></span>
<span class="line"><span>		properties.put(&quot;spring.template.provider.cache&quot;, &quot;false&quot;);</span></span>
<span class="line"><span>		properties.put(&quot;spring.mvc.log-resolved-exception&quot;, &quot;true&quot;);</span></span>
<span class="line"><span>		properties.put(&quot;server.error.include-binding-errors&quot;, &quot;ALWAYS&quot;);</span></span>
<span class="line"><span>		properties.put(&quot;server.error.include-message&quot;, &quot;ALWAYS&quot;);</span></span>
<span class="line"><span>		properties.put(&quot;server.error.include-stacktrace&quot;, &quot;ALWAYS&quot;);</span></span>
<span class="line"><span>		properties.put(&quot;server.servlet.jsp.init-parameters.development&quot;, &quot;true&quot;);</span></span>
<span class="line"><span>		properties.put(&quot;spring.reactor.debug&quot;, &quot;true&quot;);</span></span>
<span class="line"><span>		PROPERTIES = Collections.unmodifiableMap(properties);</span></span>
<span class="line"><span>	}</span></span></code></pre></div><p>当然如果你不想被应用属性被spring-boot-devtools默认设置， 可以通过spring.devtools.add-properties到false你application.yml中。</p><h3 id="devtool是否可以给所有springboot应用做全局的配置" tabindex="-1">devtool是否可以给所有Springboot应用做全局的配置？ <a class="header-anchor" href="#devtool是否可以给所有springboot应用做全局的配置" aria-label="Permalink to &quot;devtool是否可以给所有Springboot应用做全局的配置？&quot;">​</a></h3><blockquote><p>可以通过将spring-boot-devtools.yml文件添加到$HOME/.config/spring-boot目录来<strong>配置全局 devtools 设置</strong>。</p></blockquote><p>添加到这些文件的任何属性都适用于你机器上使用 devtools 的所有Spring Boot 应用程序。例如，要将重新启动配置为始终使用触发器文件，你需要将以下属性添加到你的spring-boot-devtools文件中：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>spring:</span></span>
<span class="line"><span>  devtools:</span></span>
<span class="line"><span>    restart:</span></span>
<span class="line"><span>      trigger-file: &quot;.reloadtrigger&quot;</span></span></code></pre></div><h3 id="如果我不用devtool-还有什么选择" tabindex="-1">如果我不用devtool，还有什么选择？ <a class="header-anchor" href="#如果我不用devtool-还有什么选择" aria-label="Permalink to &quot;如果我不用devtool，还有什么选择？&quot;">​</a></h3><blockquote><p>如果我不用devtool，还有什么选择？</p></blockquote><p><strong>在实际的开发过程中，我也不会去使用devtool工具</strong>, 因为：</p><ul><li>devtool本身基于重启方式，这种仍然不是真正的热替换方案，JRebel才是（它是收费的）</li><li>开发调试最重要的还是一种权衡 <ul><li>自动重启的开销如果和手动重启没有什么太大差别，那么还不如手动重启（按需重启）</li><li>多数情况下，如果是<strong>方法内部的修改或者静态资源的修改</strong>，在IDEA中是可以通过Rebuild（Ctrl + Shift + F9）进行热更的</li></ul></li></ul><p><img src="`+g+'" alt="error.图片加载失败"></p><ul><li>此外还有一个工具spring loaded， 可实现修改类文件的热部署，具体可看其<a href="https://github.com/spring-projects/spring-loaded" target="_blank" rel="noreferrer">github地址在新窗口打开</a>上的说明。</li></ul><h2 id="示例源码" tabindex="-1">示例源码 <a class="header-anchor" href="#示例源码" aria-label="Permalink to &quot;示例源码&quot;">​</a></h2><p><a href="https://github.com/realpdai/tech-pdai-spring-demos" target="_blank" rel="noreferrer">https://github.com/realpdai/tech-pdai-spring-demos</a></p><h2 id="参考文章" tabindex="-1">参考文章 <a class="header-anchor" href="#参考文章" aria-label="Permalink to &quot;参考文章&quot;">​</a></h2><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.devtools" target="_blank" rel="noreferrer">https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.devtools</a></p><p><a href="https://liayun.blog.csdn.net/article/details/116541775" target="_blank" rel="noreferrer">https://liayun.blog.csdn.net/article/details/116541775</a></p><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>',100)]))}const x=a(u,[["render",h]]);export{k as __pageData,x as default};
