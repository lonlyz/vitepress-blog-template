import{_ as n,c as a,ai as p,o as t}from"./chunks/framework.BrYByd3F.js";const e="/vitepress-blog-template/images/spring/springboot-helloworld-1.png",r="/vitepress-blog-template/images/spring/springboot/springboot-hello-world-6.png",l="/vitepress-blog-template/images/spring/springboot-helloworld-2.png",o="/vitepress-blog-template/images/spring/springboot-helloworld-3.png",i="/vitepress-blog-template/images/spring/springboot-helloworld-4.png",g="/vitepress-blog-template/images/spring/springboot-helloworld-5.png",c="/vitepress-blog-template/images/spring/springboot/springboot-hello-world-1.png",d="/vitepress-blog-template/images/spring/springboot/springboot-hello-world-2.png",b="/vitepress-blog-template/images/spring/springboot/springboot-hello-world-3.png",m="/vitepress-blog-template/images/spring/springboot/springboot-hello-world-7.png",h="/vitepress-blog-template/images/spring/springboot/springboot-hello-world-8.png",u="/vitepress-blog-template/images/spring/springboot/springboot-hello-world-4.png",v="/vitepress-blog-template/images/spring/springboot/springboot-hello-world-5.png",y=JSON.parse('{"title":"SpringBoot入门 - SpringBoot HelloWorld","description":"","frontmatter":{},"headers":[],"relativePath":"spring/springboot/springboot-x-hello-world.md","filePath":"spring/springboot/springboot-x-hello-world.md","lastUpdated":1737706346000}'),w={name:"spring/springboot/springboot-x-hello-world.md"};function S(k,s,f,_,q,x){return t(),a("div",null,s[0]||(s[0]=[p('<h1 id="springboot入门-springboot-helloworld" tabindex="-1">SpringBoot入门 - SpringBoot HelloWorld <a class="header-anchor" href="#springboot入门-springboot-helloworld" aria-label="Permalink to &quot;SpringBoot入门 - SpringBoot HelloWorld&quot;">​</a></h1><blockquote><p>我们了解了SpringBoot和SpringFramework的关系之后，我们可以开始创建一个Hello World级别的项目了。@pdai</p></blockquote><h2 id="创建-springboot-web-应用" tabindex="-1">创建 SpringBoot Web 应用 <a class="header-anchor" href="#创建-springboot-web-应用" aria-label="Permalink to &quot;创建 SpringBoot Web 应用&quot;">​</a></h2><blockquote><p>为快速进行开发，推荐你使用IDEA这类开发工具，它将大大提升你学习和开发的效率。</p></blockquote><ul><li><strong>选择 Spring Initialize</strong></li></ul><p>Spring提供的初始化项目的工具</p><p><img src="'+e+'" alt="error.图片加载失败"></p><p>当然你可以在<a href="https://start.spring.io/" target="_blank" rel="noreferrer">https://start.spring.io/在新窗口打开</a>中初始化你项目工程</p><p><img src="'+r+'" alt="error.图片加载失败"></p><ul><li><strong>填写 GAV三元组</strong><ul><li>Group: 是公司或者组织的名称，是一种命名空间的概念，比如网站，那么group可以是tech.pdai</li><li>Artifat: 当前项目的唯一标识</li><li>Version: 项目的版本号，一般xx-SNAPSHOT表示非稳定版</li></ul></li></ul><p><img src="'+l+'" alt="error.图片加载失败"></p><ul><li><strong>选择初始化模块</strong></li></ul><p>Spring Initialize可以帮助你选择常见的功能模块的starter包</p><p><img src="'+o+'" alt="error.图片加载失败"></p><ul><li><strong>项目名</strong></li></ul><p>最后我们输入我们项目的名称，既可以初始化项目</p><p><img src="'+i+'" alt="error.图片加载失败"></p><h2 id="初始化后内容" tabindex="-1">初始化后内容 <a class="header-anchor" href="#初始化后内容" aria-label="Permalink to &quot;初始化后内容&quot;">​</a></h2><ul><li><strong>README.md</strong></li></ul><p>README中可以添加这个项目的介绍，它将显示在github/gitlab/gitee等仓库托管中项目介绍的首页。</p><p><img src="'+g+`" alt="error.图片加载失败"></p><ul><li>.gitignore</li></ul><p>gitignore是git仓库，你可以将不需要提交到代码仓库的文件添加到这个文件（比如程序编译后生成的运行目录target等)，默认如下</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>HELP.md</span></span>
<span class="line"><span>target/</span></span>
<span class="line"><span>!.mvn/wrapper/maven-wrapper.jar</span></span>
<span class="line"><span>!**/src/main/**</span></span>
<span class="line"><span>!**/src/test/**</span></span>
<span class="line"><span></span></span>
<span class="line"><span>## STS ###</span></span>
<span class="line"><span>.apt_generated</span></span>
<span class="line"><span>.classpath</span></span>
<span class="line"><span>.factorypath</span></span>
<span class="line"><span>.project</span></span>
<span class="line"><span>.settings</span></span>
<span class="line"><span>.springBeans</span></span>
<span class="line"><span>.sts4-cache</span></span>
<span class="line"><span></span></span>
<span class="line"><span>## IntelliJ IDEA ###</span></span>
<span class="line"><span>.idea</span></span>
<span class="line"><span>*.iws</span></span>
<span class="line"><span>*.iml</span></span>
<span class="line"><span>*.ipr</span></span>
<span class="line"><span></span></span>
<span class="line"><span>## NetBeans ###</span></span>
<span class="line"><span>/nbproject/private/</span></span>
<span class="line"><span>/nbbuild/</span></span>
<span class="line"><span>/dist/</span></span>
<span class="line"><span>/nbdist/</span></span>
<span class="line"><span>/.nb-gradle/</span></span>
<span class="line"><span>build/</span></span>
<span class="line"><span></span></span>
<span class="line"><span>## VS Code ###</span></span>
<span class="line"><span>.vscode/</span></span></code></pre></div><ul><li><strong>pom.xml</strong></li></ul><p>在Maven包管理pom.xml中添加依赖包</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span>
<span class="line"><span>&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span>
<span class="line"><span>         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span>         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span></span>
<span class="line"><span>    &lt;parent&gt;</span></span>
<span class="line"><span>        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span>        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span></span>
<span class="line"><span>        &lt;version&gt;2.5.3&lt;/version&gt;</span></span>
<span class="line"><span>        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span></span>
<span class="line"><span>    &lt;/parent&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;tech.pdai&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;101-springboot-demo-helloworld&lt;/artifactId&gt;</span></span>
<span class="line"><span>    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    &lt;properties&gt;</span></span>
<span class="line"><span>        &lt;maven.compiler.source&gt;8&lt;/maven.compiler.source&gt;</span></span>
<span class="line"><span>        &lt;maven.compiler.target&gt;8&lt;/maven.compiler.target&gt;</span></span>
<span class="line"><span>    &lt;/properties&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    &lt;dependencies&gt;</span></span>
<span class="line"><span>        &lt;dependency&gt;</span></span>
<span class="line"><span>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span>            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span></span>
<span class="line"><span>        &lt;/dependency&gt;</span></span>
<span class="line"><span>    &lt;/dependencies&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    &lt;build&gt;</span></span>
<span class="line"><span>        &lt;plugins&gt;</span></span>
<span class="line"><span>            &lt;plugin&gt;</span></span>
<span class="line"><span>                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span>                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span></span>
<span class="line"><span>            &lt;/plugin&gt;</span></span>
<span class="line"><span>        &lt;/plugins&gt;</span></span>
<span class="line"><span>    &lt;/build&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;/project&gt;</span></span></code></pre></div><h2 id="给你的第一个应用添加包和代码" tabindex="-1">给你的第一个应用添加包和代码 <a class="header-anchor" href="#给你的第一个应用添加包和代码" aria-label="Permalink to &quot;给你的第一个应用添加包和代码&quot;">​</a></h2><p>我们添加如下的代码，启动即可启动一个WEB服务，通过浏览器访问/hello, 并返回Hello world.</p><ul><li><strong>添加代码</strong></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>package tech.pdai.springboot.helloworld;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import org.springframework.boot.SpringApplication;</span></span>
<span class="line"><span>import org.springframework.boot.autoconfigure.SpringBootApplication;</span></span>
<span class="line"><span>import org.springframework.http.HttpStatus;</span></span>
<span class="line"><span>import org.springframework.http.ResponseEntity;</span></span>
<span class="line"><span>import org.springframework.web.bind.annotation.GetMapping;</span></span>
<span class="line"><span>import org.springframework.web.bind.annotation.RestController;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * @author pdai</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>@SpringBootApplication</span></span>
<span class="line"><span>@RestController</span></span>
<span class="line"><span>public class SpringBootHelloWorldApplication {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * main interface.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param args args</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    public static void main(String[] args) {</span></span>
<span class="line"><span>        SpringApplication.run(SpringBootHelloWorldApplication.class, args);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * hello world.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @return hello</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @GetMapping(&quot;/hello&quot;)</span></span>
<span class="line"><span>    public ResponseEntity&lt;String&gt; hello() {</span></span>
<span class="line"><span>        return new ResponseEntity&lt;&gt;(&quot;hello world&quot;, HttpStatus.OK);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="运行你的第一个程序" tabindex="-1">运行你的第一个程序 <a class="header-anchor" href="#运行你的第一个程序" aria-label="Permalink to &quot;运行你的第一个程序&quot;">​</a></h2><p>点击SpringBootHelloWorldApplication入口的绿色按钮，运行程序</p><p><img src="`+c+'" alt="error.图片加载失败"></p><p>运行后，你将看到如下的信息：表明我们启动程序成功（启动了一个内嵌的Tomcat容器，服务端口在8080）</p><p><img src="'+d+'" alt="error.图片加载失败"></p><p>这时候我们便可以通过浏览器访问服务</p><p><img src="'+b+'" alt="error.图片加载失败"></p><h2 id="一些思考" tabindex="-1">一些思考 <a class="header-anchor" href="#一些思考" aria-label="Permalink to &quot;一些思考&quot;">​</a></h2><blockquote><p>到此，你会发现一个简单的web程序居然完成了。这里你需要一些思考：</p></blockquote><h3 id="为什么我们添加一个starter-web模块便可以了呢" tabindex="-1">为什么我们添加一个starter-web模块便可以了呢？ <a class="header-anchor" href="#为什么我们添加一个starter-web模块便可以了呢" aria-label="Permalink to &quot;为什么我们添加一个starter-web模块便可以了呢？&quot;">​</a></h3><p>我们安装Maven Helper的插件，用来查看spring-boot-starter-web模块的依赖</p><p><img src="'+m+'" alt="error.图片加载失败"></p><p>我们看下这个模块的依赖，你便能初步窥探出模块支撑</p><p><img src="'+h+`" alt="error.图片加载失败"></p><h3 id="我们如何更改更多server的配置呢-比如tomcat-server" tabindex="-1">我们如何更改更多Server的配置呢？比如Tomcat Server <a class="header-anchor" href="#我们如何更改更多server的配置呢-比如tomcat-server" aria-label="Permalink to &quot;我们如何更改更多Server的配置呢？比如Tomcat Server&quot;">​</a></h3><p>为什么Tomcat默认端口是8080？ 如前文所述，SpringBoot最强大的地方在于约定大于配置，只要你引入某个模块的xx-start包，它将自动注入配置，提供了这个模块的功能；比如这里我们在POM中添加了如下的包</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre></div><p>它内嵌了Tomcat并且提供了默认的配置，比如默认端口是8080.</p><p>我们可以在application.properties或者application.yml中配置</p><p><img src="`+u+`" alt="error.图片加载失败"></p><p>特别的，如果你添加了如下包</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</span></span>
<span class="line"><span>    &lt;optional&gt;true&lt;/optional&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre></div><p>并且你的IDE支持（比如IDEA商业版），可以自动给你配置提示</p><p><img src="`+v+'" alt="error.图片加载失败"></p><p>你也可以（cmd+点击）进入具体的配置文件。</p><h3 id="springboot还提供了哪些starter模块呢" tabindex="-1">SpringBoot还提供了哪些starter模块呢？ <a class="header-anchor" href="#springboot还提供了哪些starter模块呢" aria-label="Permalink to &quot;SpringBoot还提供了哪些starter模块呢？&quot;">​</a></h3><p>Spring Boot 推荐的基础 POM 文件</p><table tabindex="0"><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>spring-boot-starter</td><td>核心 POM，包含自动配置支持、日志库和对 YAML 配置文件的支持。</td></tr><tr><td>spring-boot-starter-amqp</td><td>通过 spring-rabbit 支持 AMQP。</td></tr><tr><td>spring-boot-starter-aop</td><td>包含 spring-aop 和 AspectJ 来支持面向切面编程（AOP）。</td></tr><tr><td>spring-boot-starter-batch</td><td>支持 Spring Batch，包含 HSQLDB。</td></tr><tr><td>spring-boot-starter-data-jpa</td><td>包含 spring-data-jpa、spring-orm 和 Hibernate 来支持 JPA。</td></tr><tr><td>spring-boot-starter-data-mongodb</td><td>包含 spring-data-mongodb 来支持 MongoDB。</td></tr><tr><td>spring-boot-starter-data-rest</td><td>通过 spring-data-rest-webmvc 支持以 REST 方式暴露 Spring Data 仓库。</td></tr><tr><td>spring-boot-starter-jdbc</td><td>支持使用 JDBC 访问数据库。</td></tr><tr><td>spring-boot-starter-security</td><td>包含 spring-security。</td></tr><tr><td>spring-boot-starter-test</td><td>包含常用的测试所需的依赖，如 JUnit、Hamcrest、Mockito 和 spring-test 等。</td></tr><tr><td>spring-boot-starter-velocity</td><td>支持使用 Velocity 作为模板引擎。</td></tr><tr><td>spring-boot-starter-web</td><td>支持 Web 应用开发，包含 Tomcat 和 spring-mvc。</td></tr><tr><td>spring-boot-starter-websocket</td><td>支持使用 Tomcat 开发 WebSocket 应用。</td></tr><tr><td>spring-boot-starter-ws</td><td>支持 Spring Web Services。</td></tr><tr><td>spring-boot-starter-actuator</td><td>添加适用于生产环境的功能，如性能指标和监测等功能。</td></tr><tr><td>spring-boot-starter-remote-shell</td><td>添加远程 SSH 支持。</td></tr><tr><td>spring-boot-starter-jetty</td><td>使用 Jetty 而不是默认的 Tomcat 作为应用服务器。</td></tr><tr><td>spring-boot-starter-log4j</td><td>添加 Log4j 的支持。</td></tr><tr><td>spring-boot-starter-logging</td><td>使用 Spring Boot 默认的日志框架 Logback。</td></tr><tr><td>spring-boot-starter-tomcat</td><td>使用 Spring Boot 默认的 Tomcat 作为应用服务器。</td></tr></tbody></table><p>所有这些 POM 依赖的好处在于为开发 Spring 应用提供了一个良好的基础。Spring Boot 所选择的第三方库是经过考虑的，是比较适合产品开发的选择。但是 Spring Boot 也提供了不同的选项，比如日志框架可以用 Logback 或 Log4j，应用服务器可以用 Tomcat 或 Jetty。</p><h2 id="示例源码" tabindex="-1">示例源码 <a class="header-anchor" href="#示例源码" aria-label="Permalink to &quot;示例源码&quot;">​</a></h2><p><a href="https://github.com/realpdai/tech-pdai-spring-demos" target="_blank" rel="noreferrer">https://github.com/realpdai/tech-pdai-spring-demos</a></p><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>',63)]))}const B=n(w,[["render",S]]);export{y as __pageData,B as default};
