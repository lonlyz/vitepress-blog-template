import{_ as e,c as t,ai as o,o as i}from"./chunks/framework.BrYByd3F.js";const u=JSON.parse('{"title":"SpringBoot接口 - 如何保证接口幂等","description":"","frontmatter":{},"headers":[],"relativePath":"spring/springboot/springboot-x-interface-mideng.md","filePath":"spring/springboot/springboot-x-interface-mideng.md","lastUpdated":1737706346000}'),r={name:"spring/springboot/springboot-x-interface-mideng.md"};function l(s,a,n,p,d,h){return i(),t("div",null,a[0]||(a[0]=[o('<h1 id="springboot接口-如何保证接口幂等" tabindex="-1">SpringBoot接口 - 如何保证接口幂等 <a class="header-anchor" href="#springboot接口-如何保证接口幂等" aria-label="Permalink to &quot;SpringBoot接口 - 如何保证接口幂等&quot;">​</a></h1><blockquote><p>在以SpringBoot开发Restful接口时，如何防止接口的重复提交呢？ 本文主要介绍接口幂等相关的知识点，并实践常见基于Token实现接口幂等。@pdai</p></blockquote><h2 id="准备知识点" tabindex="-1">准备知识点 <a class="header-anchor" href="#准备知识点" aria-label="Permalink to &quot;准备知识点&quot;">​</a></h2><blockquote><p>从幂等和防止重复提交，接口幂等和常见的保证幂等的方式等知识点构筑知识体系。@pdai</p></blockquote><h3 id="什么是幂等" tabindex="-1">什么是幂等？ <a class="header-anchor" href="#什么是幂等" aria-label="Permalink to &quot;什么是幂等？&quot;">​</a></h3><blockquote><p>幂等原先是数学中的一个概念，表示进行1次变换和进行N次变换产生的效果相同。</p></blockquote><p>当我们讨论接口的幂等性时一般是在说：以相同的请求调用这个接口一次和调用这个接口多次，对系统产生的影响是相同的。如果一个接口满足这个特性，那么我们就说这个 接口是一个幂等接口。</p><ul><li><strong>接口幂等和防止重复提交是一回事吗</strong>？</li></ul><p>严格来说，并不是。</p><ol><li><strong>幂等</strong>: 更多的是在重复请求已经发生，或是无法避免的情况下，采取一定的技术手段让这些重复请求不给系统带来副作用。</li><li><strong>防止重复</strong>: 提交更多的是不让用户发起多次一样的请求。比如说用户在线购物下单时点了提交订单按钮，但是由于网络原因响应很慢，此时用户比较心急多次点击了订单提交按钮。 这种情况下就可能会造成多次下单。一般防止重复提交的方案有：将订单按钮置灰，跳转到结果页等。主要还是从客户端的角度来解决这个问题。</li></ol><ul><li><strong>哪些情况下客户端是防止不了重复提交的</strong>？</li></ul><p>虽然我们可在客户端做一些防止接口重复提交的事（比如将订单按钮置灰，跳转到结果页等）， 但是如下情况依然客户端是很难控制接口重复提交到后台的，这也进一步表明了<strong>接口幂等和防止重复提交不是一回事</strong>以及<strong>后端接口保证接口幂等的必要性</strong>所在。</p><ol><li><strong>接口超时重试</strong>：接口可能会因为某些原因而调用失败，出于容错性考虑会加上失败重试的机制。如果接口调用一半，再次调用就会因为脏数据的存在而出现异常。</li><li><strong>消息重复消费</strong>：在使用消息中间件来处理消息队列，且手动ack确认消息被正常消费时。如果消费者突然断开连接，那么已经执行了一半的消息会重新放回队列。被其他消费者重新消费时就会导致结果异常，如数据库重复数据，数据库数据冲突，资源重复等。</li><li><strong>请求重发</strong>：网络抖动引发的nginx重发请求，造成重复调用；</li></ol><h3 id="什么是接口幂等" tabindex="-1">什么是接口幂等？ <a class="header-anchor" href="#什么是接口幂等" aria-label="Permalink to &quot;什么是接口幂等？&quot;">​</a></h3><p>在HTTP/1.1中，对幂等性进行了定义。它描述了一次和多次请求某一个资源对于资源本身应该具有同样的结果（网络超时等问题除外），即第一次请求的时候对资源产生了副作用，但是以后的多次请求都不会再对资源产生副作用。</p><p>这里的副作用是不会对结果产生破坏或者产生不可预料的结果。也就是说，其任意多次执行对资源本身所产生的影响均与一次执行的影响相同。</p><ul><li><strong>对哪些类型的接口需要保证接口幂等</strong>？</li></ul><p>我们看下标准的restful请求，幂等情况是怎么样的：</p><ol><li><strong>SELECT查询操作</strong><ol><li>GET：只是获取资源，对资源本身没有任何副作用，天然的幂等性。</li><li>HEAD：本质上和GET一样，获取头信息，主要是探活的作用，具有幂等性。</li><li>OPTIONS：获取当前URL所支持的方法，因此也是具有幂等性的。</li></ol></li><li><strong>DELETE删除操作</strong><ol><li>删除的操作，如果从删除的一次和删除多次的角度看，数据并不会变化，这个角度看它是幂等的</li><li>但是如果，从另外一个角度，删除数据一般是返回受影响的行数，删除一次和多次删除返回的受影响行数是不一样的，所以从这个角度它需要保证幂等。（折中而言DELETE操作通常也会被纳入保证接口幂等的要求）</li></ol></li><li><strong>ADD/EDIT操作</strong><ol><li>PUT：用于更新资源，有副作用，但是它应该满足幂等性，比如根据id更新数据，调用多次和N次的作用是相同的（根据业务需求而变）。</li><li>POST：用于添加资源，多次提交很可能产生副作用，比如订单提交，多次提交很可能产生多笔订单。</li></ol></li></ol><h2 id="常见的保证幂等的方式" tabindex="-1">常见的保证幂等的方式？ <a class="header-anchor" href="#常见的保证幂等的方式" aria-label="Permalink to &quot;常见的保证幂等的方式？&quot;">​</a></h2><blockquote><p>我们来看下常见的保证幂等的方式。</p></blockquote><h3 id="数据库层面" tabindex="-1">数据库层面 <a class="header-anchor" href="#数据库层面" aria-label="Permalink to &quot;数据库层面&quot;">​</a></h3><h4 id="悲观锁" tabindex="-1">悲观锁 <a class="header-anchor" href="#悲观锁" aria-label="Permalink to &quot;悲观锁&quot;">​</a></h4><blockquote><p>典型的数据库悲观锁：<code>for update</code></p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>select * from t_order where order_id = trade_no for update;</span></span></code></pre></div><p>为什么加for update就可以?</p><ol><li>当线程A执行for update，数据会对当前记录加锁，其他线程执行到此行代码的时候，会等待线程A释放锁之后，才可以获取锁，继续后续操作。</li><li>事物提交时，for update获取的锁会自动释放。</li></ol><p>PS：这种方式很少被使用，因为如果业务处理比较耗时，并发情况下，后面线程会长期处于等待状态，占用了很多线程，让这些线程处于无效等待状态，我们的web服务中的线程数量一般都是有限的，如果大量线程由于获取for update锁处于等待状态，不利于系统并发操作。</p><h4 id="唯一id-索引" tabindex="-1">唯一ID/索引 <a class="header-anchor" href="#唯一id-索引" aria-label="Permalink to &quot;唯一ID/索引&quot;">​</a></h4><blockquote><p>针对的是<strong>插入</strong>操作。</p></blockquote><p>数据库唯一主键的实现主要是利用数据库中主键唯一约束的特性，一般来说唯一主键比较适用于“插入”时的幂等性，其能保证一张表中只能存在一条带该唯一主键的记录。</p><p>使用数据库唯一主键完成幂等性时需要注意的是，该主键一般来说并不是使用数据库中自增主键，而是使用分布式 ID 充当主键，这样才能能保证在分布式环境下 ID 的全局唯一性。</p><ul><li><strong>去重表</strong></li></ul><p>去重表本质上也是一种唯一索引方案。</p><p>这种方法适用于在业务中有唯一标的插入场景中，比如在以上的支付场景中，如果一个订单只会支付一次，所以订单ID可以作为唯一标识。这时，我们就可以建一张去重表，并且把唯一标识作为唯一索引，在我们实现时，把创建支付单据和写入去去重表，放在一个事务中，如果重复创建，数据库会抛出唯一约束异常，操作就会回滚。</p><h4 id="乐观锁-基于版本号或者时间戳" tabindex="-1">乐观锁（基于版本号或者时间戳） <a class="header-anchor" href="#乐观锁-基于版本号或者时间戳" aria-label="Permalink to &quot;乐观锁（基于版本号或者时间戳）&quot;">​</a></h4><blockquote><p>针对<strong>更新</strong>操作。</p></blockquote><ul><li><strong>使用版本号或者时间戳</strong></li></ul><p>这种方法适合在更新的场景中，比如我们要更新商品的名字，这时我们就可以在更新的接口中增加一个版本号，来做幂等</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>boolean updateGoodsName(int id,String newName,int version);</span></span></code></pre></div><p>在实现时可以如下</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>update goods set name=#{newName},version=#{version} where id=#{id} and version&lt;${version}</span></span></code></pre></div><ul><li><strong>状态机</strong></li></ul><p>本质上也是乐观锁，这种方法适合在有状态机流转的情况下，比如就会订单的创建和付款，订单的付款肯定是在之前，这时我们可以通过在设计状态字段时，使用int类型，并且通过值类型的大小来做幂等，比如订单的创建为0，付款成功为100。付款失败为99</p><p>在做状态机更新时，我们就这可以这样控制</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>update `order` set status=#{status} where id=#{id} and status&lt;#{status}</span></span></code></pre></div><h3 id="分布式锁" tabindex="-1">分布式锁 <a class="header-anchor" href="#分布式锁" aria-label="Permalink to &quot;分布式锁&quot;">​</a></h3><p>分布式锁实现幂等性的逻辑是，在每次执行方法之前判断，是否可以获取到分布式锁，如果可以，则表示为第一次执行方法，否则直接舍弃请求即可。</p><p>需要注意的是分布式锁的key必须为业务的唯一标识，通常用redis分布式锁或者zookeeper来实现分布式锁。</p><p>分布式锁的实现方法具体请参考：<a href="https://pdai.tech/md/arch/arch-z-lock.html" target="_blank" rel="noreferrer">分布式系统 - 分布式锁及实现方案</a></p><h3 id="token机制" tabindex="-1">token机制 <a class="header-anchor" href="#token机制" aria-label="Permalink to &quot;token机制&quot;">​</a></h3><blockquote><p>TBD</p></blockquote><h2 id="实现案例" tabindex="-1">实现案例 <a class="header-anchor" href="#实现案例" aria-label="Permalink to &quot;实现案例&quot;">​</a></h2><blockquote><p>TBD</p></blockquote><h2 id="示例源码" tabindex="-1">示例源码 <a class="header-anchor" href="#示例源码" aria-label="Permalink to &quot;示例源码&quot;">​</a></h2><p><a href="https://github.com/realpdai/tech-pdai-spring-demos" target="_blank" rel="noreferrer">https://github.com/realpdai/tech-pdai-spring-demos</a></p><h2 id="参考文章" tabindex="-1">参考文章 <a class="header-anchor" href="#参考文章" aria-label="Permalink to &quot;参考文章&quot;">​</a></h2><p>token机制及示例参考自</p><p><a href="https://www.jianshu.com/p/c384db3692d2" target="_blank" rel="noreferrer">https://www.jianshu.com/p/c384db3692d2</a></p><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>',60)]))}const g=e(r,[["render",l]]);export{u as __pageData,g as default};
