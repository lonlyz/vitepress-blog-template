import{_ as n,c as a,ai as p,o as e}from"./chunks/framework.BrYByd3F.js";const g=JSON.parse('{"title":"▶SpringBoot接口 - 如何统一接口封装","description":"","frontmatter":{},"headers":[],"relativePath":"spring/springboot/springboot-x-interface-response.md","filePath":"spring/springboot/springboot-x-interface-response.md","lastUpdated":1737706346000}'),l={name:"spring/springboot/springboot-x-interface-response.md"};function t(i,s,c,r,o,u){return e(),a("div",null,s[0]||(s[0]=[p(`<h1 id="▶springboot接口-如何统一接口封装" tabindex="-1">▶SpringBoot接口 - 如何统一接口封装 <a class="header-anchor" href="#▶springboot接口-如何统一接口封装" aria-label="Permalink to &quot;▶SpringBoot接口 - 如何统一接口封装&quot;">​</a></h1><blockquote><p>在以SpringBoot开发Restful接口时，统一返回方便前端进行开发和封装，以及出现时给出响应编码和信息。@pdai</p></blockquote><h2 id="restful-api接口" tabindex="-1">RESTful API接口? <a class="header-anchor" href="#restful-api接口" aria-label="Permalink to &quot;RESTful API接口?&quot;">​</a></h2><ul><li><strong>什么是 REST</strong>？</li></ul><p>Representational State Transfer，翻译是“表现层状态转化”。可以总结为一句话：<strong>REST 是所有 Web 应用都应该遵守的架构设计指导原则</strong>。</p><p>面向资源是 REST 最明显的特征，对于同一个资源的一组不同的操作。资源是服务器上一个可命名的抽象概念，资源是以名词为核心来组织的，首先关注的是名词。REST 要求，必须通过统一的接口来对资源执行各种操作。对于每个资源只能执行一组有限的操作。</p><ul><li><strong>什么是 RESTful API</strong>？</li></ul><p><strong>符合 REST 设计标准的 API</strong>，即 RESTful API。REST 架构设计，遵循的各项标准和准则，就是 HTTP 协议的表现，换句话说，HTTP 协议就是属于 REST 架构的设计模式。比如，无状态，请求-响应。</p><p>Restful相关文档可以参考 <a href="https://restfulapi.net/" target="_blank" rel="noreferrer">https://restfulapi.net/在新窗口打开</a></p><h2 id="为什么要统一封装接口" tabindex="-1">为什么要统一封装接口 <a class="header-anchor" href="#为什么要统一封装接口" aria-label="Permalink to &quot;为什么要统一封装接口&quot;">​</a></h2><blockquote><p>现在大多数项目采用前后分离的模式进行开发，统一返回方便前端进行开发和封装，以及出现时给出响应编码和信息。</p></blockquote><p>以查询某个用户接口而言，如果没有封装, 返回结果如下</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;userId&quot;: 1,</span></span>
<span class="line"><span>  &quot;userName&quot;: &quot;赵一&quot;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>如果封装了，返回正常的结果如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;timestamp&quot;: 11111111111,</span></span>
<span class="line"><span>  &quot;status&quot;: 200,</span></span>
<span class="line"><span>  &quot;message&quot;: &quot;success&quot;,</span></span>
<span class="line"><span>  &quot;data&quot;: {</span></span>
<span class="line"><span>    &quot;userId&quot;: 1,</span></span>
<span class="line"><span>    &quot;userName&quot;: &quot;赵一&quot;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>异常返回结果如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;timestamp&quot;: 11111111111,</span></span>
<span class="line"><span>  &quot;status&quot;: 10001,</span></span>
<span class="line"><span>  &quot;message&quot;: &quot;User not exist&quot;,</span></span>
<span class="line"><span>  &quot;data&quot;: null</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="实现案例" tabindex="-1">实现案例 <a class="header-anchor" href="#实现案例" aria-label="Permalink to &quot;实现案例&quot;">​</a></h2><blockquote><p>如何实现上面的封装呢？</p></blockquote><h3 id="状态码封装" tabindex="-1">状态码封装 <a class="header-anchor" href="#状态码封装" aria-label="Permalink to &quot;状态码封装&quot;">​</a></h3><p>这里以常见的状态码为例，包含responseCode 和 description两个属性。</p><p>如果还有其它业务状态码，也可以放到这个类中。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/**</span></span>
<span class="line"><span> * @author pdai</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>@Getter</span></span>
<span class="line"><span>@AllArgsConstructor</span></span>
<span class="line"><span>public enum ResponseStatus {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    SUCCESS(&quot;200&quot;, &quot;success&quot;),</span></span>
<span class="line"><span>    FAIL(&quot;500&quot;, &quot;failed&quot;),</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    HTTP_STATUS_200(&quot;200&quot;, &quot;ok&quot;),</span></span>
<span class="line"><span>    HTTP_STATUS_400(&quot;400&quot;, &quot;request error&quot;),</span></span>
<span class="line"><span>    HTTP_STATUS_401(&quot;401&quot;, &quot;no authentication&quot;),</span></span>
<span class="line"><span>    HTTP_STATUS_403(&quot;403&quot;, &quot;no authorities&quot;),</span></span>
<span class="line"><span>    HTTP_STATUS_500(&quot;500&quot;, &quot;server error&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public static final List&lt;ResponseStatus&gt; HTTP_STATUS_ALL = Collections.unmodifiableList(</span></span>
<span class="line"><span>            Arrays.asList(HTTP_STATUS_200, HTTP_STATUS_400, HTTP_STATUS_401, HTTP_STATUS_403, HTTP_STATUS_500</span></span>
<span class="line"><span>            ));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * response code</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private final String responseCode;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * description.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private final String description;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="返回内容封装" tabindex="-1">返回内容封装 <a class="header-anchor" href="#返回内容封装" aria-label="Permalink to &quot;返回内容封装&quot;">​</a></h3><p>包含公共的接口返回时间，状态status, 消息message， 以及数据data。</p><p>考虑到数据的序列化（比如在网络上传输），这里data有时候还会extends Serializable。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@Data</span></span>
<span class="line"><span>@Builder</span></span>
<span class="line"><span>public class ResponseResult&lt;T&gt; {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * response timestamp.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private long timestamp;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * response code, 200 -&gt; OK.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private String status;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * response message.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private String message;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * response data.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private T data;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * response success result wrapper.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param &lt;T&gt; type of data class</span></span>
<span class="line"><span>     * @return response result</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    public static &lt;T&gt; ResponseResult&lt;T&gt; success() {</span></span>
<span class="line"><span>        return success(null);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * response success result wrapper.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param data response data</span></span>
<span class="line"><span>     * @param &lt;T&gt;  type of data class</span></span>
<span class="line"><span>     * @return response result</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    public static &lt;T&gt; ResponseResult&lt;T&gt; success(T data) {</span></span>
<span class="line"><span>        return ResponseResult.&lt;T&gt;builder().data(data)</span></span>
<span class="line"><span>                .message(ResponseStatus.SUCCESS.getDescription())</span></span>
<span class="line"><span>                .status(ResponseStatus.SUCCESS.getResponseCode())</span></span>
<span class="line"><span>                .timestamp(System.currentTimeMillis())</span></span>
<span class="line"><span>                .build();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * response error result wrapper.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param message error message</span></span>
<span class="line"><span>     * @param &lt;T&gt;     type of data class</span></span>
<span class="line"><span>     * @return response result</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    public static &lt;T extends Serializable&gt; ResponseResult&lt;T&gt; fail(String message) {</span></span>
<span class="line"><span>        return fail(null, message);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * response error result wrapper.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param data    response data</span></span>
<span class="line"><span>     * @param message error message</span></span>
<span class="line"><span>     * @param &lt;T&gt;     type of data class</span></span>
<span class="line"><span>     * @return response result</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    public static &lt;T&gt; ResponseResult&lt;T&gt; fail(T data, String message) {</span></span>
<span class="line"><span>        return ResponseResult.&lt;T&gt;builder().data(data)</span></span>
<span class="line"><span>                .message(message)</span></span>
<span class="line"><span>                .status(ResponseStatus.FAIL.getResponseCode())</span></span>
<span class="line"><span>                .timestamp(System.currentTimeMillis())</span></span>
<span class="line"><span>                .build();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="接口返回时调用" tabindex="-1">接口返回时调用 <a class="header-anchor" href="#接口返回时调用" aria-label="Permalink to &quot;接口返回时调用&quot;">​</a></h3><p>在接口返回时调用, 以用户接口为例</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/**</span></span>
<span class="line"><span> * @author pdai</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>@RestController</span></span>
<span class="line"><span>@RequestMapping(&quot;/user&quot;)</span></span>
<span class="line"><span>public class UserController {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Autowired</span></span>
<span class="line"><span>    private IUserService userService;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * @param user user param</span></span>
<span class="line"><span>     * @return user</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @ApiOperation(&quot;Add/Edit User&quot;)</span></span>
<span class="line"><span>    @PostMapping(&quot;add&quot;)</span></span>
<span class="line"><span>    public ResponseResult&lt;User&gt; add(User user) {</span></span>
<span class="line"><span>        if (user.getId()==null || !userService.exists(user.getId())) {</span></span>
<span class="line"><span>            user.setCreateTime(LocalDateTime.now());</span></span>
<span class="line"><span>            user.setUpdateTime(LocalDateTime.now());</span></span>
<span class="line"><span>            userService.save(user);</span></span>
<span class="line"><span>        } else {</span></span>
<span class="line"><span>            user.setUpdateTime(LocalDateTime.now());</span></span>
<span class="line"><span>            userService.update(user);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        return ResponseResult.success(userService.find(user.getId()));</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * @return user list</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @ApiOperation(&quot;Query User One&quot;)</span></span>
<span class="line"><span>    @GetMapping(&quot;edit/{userId}&quot;)</span></span>
<span class="line"><span>    public ResponseResult&lt;User&gt; edit(@PathVariable(&quot;userId&quot;) Long userId) {</span></span>
<span class="line"><span>        return ResponseResult.success(userService.find(userId));</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="示例源码" tabindex="-1">示例源码 <a class="header-anchor" href="#示例源码" aria-label="Permalink to &quot;示例源码&quot;">​</a></h2><p><a href="https://github.com/realpdai/tech-pdai-spring-demos" target="_blank" rel="noreferrer">https://github.com/realpdai/tech-pdai-spring-demos</a></p><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>`,33)]))}const h=n(l,[["render",t]]);export{g as __pageData,h as default};
