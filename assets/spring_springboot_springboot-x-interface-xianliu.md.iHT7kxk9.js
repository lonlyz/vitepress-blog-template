import{_ as n,c as a,ai as p,o as e}from"./chunks/framework.BrYByd3F.js";const d=JSON.parse('{"title":"SpringBoot接口 - 如何实现接口限流之单实例","description":"","frontmatter":{},"headers":[],"relativePath":"spring/springboot/springboot-x-interface-xianliu.md","filePath":"spring/springboot/springboot-x-interface-xianliu.md","lastUpdated":1737706346000}'),l={name:"spring/springboot/springboot-x-interface-xianliu.md"};function i(t,s,c,o,r,u){return e(),a("div",null,s[0]||(s[0]=[p(`<h1 id="springboot接口-如何实现接口限流之单实例" tabindex="-1">SpringBoot接口 - 如何实现接口限流之单实例 <a class="header-anchor" href="#springboot接口-如何实现接口限流之单实例" aria-label="Permalink to &quot;SpringBoot接口 - 如何实现接口限流之单实例&quot;">​</a></h1><blockquote><p>在以SpringBoot开发Restful接口时，当流量超过服务极限能力时，系统可能会出现卡死、崩溃的情况，所以就有了降级和限流。在接口层如何做限流呢？ 本文主要回顾限流的知识点，并实践单实例限流的一种思路。 @pdai</p></blockquote><h2 id="准备知识点" tabindex="-1">准备知识点 <a class="header-anchor" href="#准备知识点" aria-label="Permalink to &quot;准备知识点&quot;">​</a></h2><blockquote><p>主要的知识点，请参考<a href="https://pdai.tech/md/arch/arch-y-ratelimit.html" target="_blank" rel="noreferrer">架构之高并发：限流</a>, 这里小结下。</p></blockquote><h3 id="为什么要限流" tabindex="-1">为什么要限流 <a class="header-anchor" href="#为什么要限流" aria-label="Permalink to &quot;为什么要限流&quot;">​</a></h3><p>每个系统都有服务的上线，所以当流量超过服务极限能力时，系统可能会出现卡死、崩溃的情况，所以就有了降级和限流。限流其实就是：当高并发或者瞬时高并发时，为了保证系统的稳定性、可用性，系统以牺牲部分请求为代价或者延迟处理请求为代价，保证系统整体服务可用。</p><h3 id="限流有哪些常见思路" tabindex="-1">限流有哪些常见思路？ <a class="header-anchor" href="#限流有哪些常见思路" aria-label="Permalink to &quot;限流有哪些常见思路？&quot;">​</a></h3><ul><li><strong>从算法上看</strong></li></ul><p>令牌桶(Token Bucket)、漏桶(leaky bucket)和计数器算法是最常用的三种限流的算法。</p><ul><li><strong>单实例</strong></li></ul><p>应用级限流方式只是单应用内的请求限流，不能进行全局限流。</p><ol><li>限流总资源数</li><li>限流总并发/连接/请求数</li><li>限流某个接口的总并发/请求数</li><li>限流某个接口的时间窗请求数</li><li>平滑限流某个接口的请求数</li><li>Guava RateLimiter</li></ol><ul><li><strong>分布式</strong></li></ul><p>我们需要<strong>分布式限流</strong>和<strong>接入层限流</strong>来进行全局限流。</p><ol><li>redis+lua实现中的lua脚本</li><li>使用Nginx+Lua实现的Lua脚本</li><li>使用 OpenResty 开源的限流方案</li><li>限流框架，比如Sentinel实现降级限流熔断</li></ol><h2 id="实现思路" tabindex="-1">实现思路 <a class="header-anchor" href="#实现思路" aria-label="Permalink to &quot;实现思路&quot;">​</a></h2><blockquote><p>主要思路：AOP拦截自定义的RateLimit注解，在AOP中通过Guava RateLimiter; Guava RateLimiter提供了令牌桶算法实现：平滑突发限流(SmoothBursty)和平滑预热限流(SmoothWarmingUp)实现。</p></blockquote><h3 id="定义ratelimit注解" tabindex="-1">定义RateLimit注解 <a class="header-anchor" href="#定义ratelimit注解" aria-label="Permalink to &quot;定义RateLimit注解&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>package tech.pdai.ratelimit.guava.config.ratelimit;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import java.lang.annotation.ElementType;</span></span>
<span class="line"><span>import java.lang.annotation.Retention;</span></span>
<span class="line"><span>import java.lang.annotation.RetentionPolicy;</span></span>
<span class="line"><span>import java.lang.annotation.Target;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * @author pdai</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>@Target(ElementType.METHOD)</span></span>
<span class="line"><span>@Retention(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span>public @interface RateLimit {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    int limit() default 10;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="定义aop" tabindex="-1">定义AOP <a class="header-anchor" href="#定义aop" aria-label="Permalink to &quot;定义AOP&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>package tech.pdai.ratelimit.guava.config.ratelimit;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import java.lang.reflect.Method;</span></span>
<span class="line"><span>import java.util.concurrent.ConcurrentHashMap;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import com.google.common.util.concurrent.RateLimiter;</span></span>
<span class="line"><span>import lombok.extern.slf4j.Slf4j;</span></span>
<span class="line"><span>import org.aspectj.lang.ProceedingJoinPoint;</span></span>
<span class="line"><span>import org.aspectj.lang.annotation.Around;</span></span>
<span class="line"><span>import org.aspectj.lang.annotation.Aspect;</span></span>
<span class="line"><span>import org.aspectj.lang.annotation.Pointcut;</span></span>
<span class="line"><span>import org.aspectj.lang.reflect.MethodSignature;</span></span>
<span class="line"><span>import org.springframework.core.annotation.AnnotationUtils;</span></span>
<span class="line"><span>import org.springframework.stereotype.Component;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * @author pdai</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>@Slf4j</span></span>
<span class="line"><span>@Aspect</span></span>
<span class="line"><span>@Component</span></span>
<span class="line"><span>public class RateLimitAspect {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    private final ConcurrentHashMap&lt;String, RateLimiter&gt; EXISTED_RATE_LIMITERS = new ConcurrentHashMap&lt;&gt;();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Pointcut(&quot;@annotation(tech.pdai.ratelimit.guava.config.ratelimit.RateLimit)&quot;)</span></span>
<span class="line"><span>    public void rateLimit() {</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Around(&quot;rateLimit()&quot;)</span></span>
<span class="line"><span>    public Object around(ProceedingJoinPoint point) throws Throwable {</span></span>
<span class="line"><span>        MethodSignature signature = (MethodSignature) point.getSignature();</span></span>
<span class="line"><span>        Method method = signature.getMethod();</span></span>
<span class="line"><span>        RateLimit annotation = AnnotationUtils.findAnnotation(method, RateLimit.class);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        // get rate limiter</span></span>
<span class="line"><span>        RateLimiter rateLimiter = EXISTED_RATE_LIMITERS.computeIfAbsent(method.getName(), k -&gt; RateLimiter.create(annotation.limit()));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        // process</span></span>
<span class="line"><span>        if (rateLimiter!=null &amp;&amp; rateLimiter.tryAcquire()) {</span></span>
<span class="line"><span>            return point.proceed();</span></span>
<span class="line"><span>        } else {</span></span>
<span class="line"><span>            throw new RuntimeException(&quot;too many requests, please try again later...&quot;);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="自定义相关异常" tabindex="-1">自定义相关异常 <a class="header-anchor" href="#自定义相关异常" aria-label="Permalink to &quot;自定义相关异常&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>package tech.pdai.ratelimit.guava.config.exception;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import lombok.extern.slf4j.Slf4j;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * business exception, besides normal exception.</span></span>
<span class="line"><span> *</span></span>
<span class="line"><span> * @author pdai</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>@Slf4j</span></span>
<span class="line"><span>public class BusinessException extends RuntimeException {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * Constructs a new exception with {@code null} as its detail message. The cause is not initialized, and may</span></span>
<span class="line"><span>     * subsequently be initialized by a call to {@link #initCause}.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    public BusinessException() {</span></span>
<span class="line"><span>        super();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * Constructs a new exception with the specified detail message. The cause is not initialized, and may subsequently</span></span>
<span class="line"><span>     * be initialized by a call to {@link #initCause}.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param message the detail message. The detail message is saved for later retrieval by the {@link #getMessage()}</span></span>
<span class="line"><span>     *                method.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    public BusinessException(final String message) {</span></span>
<span class="line"><span>        super(message);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * Constructs a new exception with the specified detail message and cause.</span></span>
<span class="line"><span>     * &lt;p&gt;</span></span>
<span class="line"><span>     * Note that the detail message associated with {@code cause} is &lt;i&gt;not&lt;/i&gt; automatically incorporated in this</span></span>
<span class="line"><span>     * exception&#39;s detail message.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param message the detail message (which is saved for later retrieval by the {@link #getMessage()} method).</span></span>
<span class="line"><span>     * @param cause   the cause (which is saved for later retrieval by the {@link #getCause()} method). (A &lt;tt&gt;null&lt;/tt&gt;</span></span>
<span class="line"><span>     *                value is permitted, and indicates that the cause is nonexistent or unknown.)</span></span>
<span class="line"><span>     * @since 1.4</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    public BusinessException(final String message, final Throwable cause) {</span></span>
<span class="line"><span>        super(message, cause);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * Constructs a new exception with the specified cause and a detail message of</span></span>
<span class="line"><span>     * &lt;tt&gt;(cause==null ? null : cause.toString())&lt;/tt&gt; (which typically contains the class and detail message of</span></span>
<span class="line"><span>     * &lt;tt&gt;cause&lt;/tt&gt;). This constructor is useful for exceptions that are little more than wrappers for other</span></span>
<span class="line"><span>     * throwables (for example, {@link java.security.PrivilegedActionException}).</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param cause the cause (which is saved for later retrieval by the {@link #getCause()} method). (A &lt;tt&gt;null&lt;/tt&gt;</span></span>
<span class="line"><span>     *              value is permitted, and indicates that the cause is nonexistent or unknown.)</span></span>
<span class="line"><span>     * @since 1.4</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    public BusinessException(final Throwable cause) {</span></span>
<span class="line"><span>        super(cause);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * Constructs a new exception with the specified detail message, cause, suppression enabled or disabled, and</span></span>
<span class="line"><span>     * writable stack trace enabled or disabled.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param message            the detail message.</span></span>
<span class="line"><span>     * @param cause              the cause. (A {@code null} value is permitted, and indicates that the cause is nonexistent or</span></span>
<span class="line"><span>     *                           unknown.)</span></span>
<span class="line"><span>     * @param enableSuppression  whether or not suppression is enabled or disabled</span></span>
<span class="line"><span>     * @param writableStackTrace whether or not the stack trace should be writable</span></span>
<span class="line"><span>     * @since 1.7</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    protected BusinessException(final String message, final Throwable cause, boolean enableSuppression,</span></span>
<span class="line"><span>                                boolean writableStackTrace) {</span></span>
<span class="line"><span>        super(message, cause, enableSuppression, writableStackTrace);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre></div><p>异常的处理</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>package tech.pdai.ratelimit.guava.config.exception;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import lombok.extern.slf4j.Slf4j;</span></span>
<span class="line"><span>import org.springframework.web.bind.annotation.ExceptionHandler;</span></span>
<span class="line"><span>import org.springframework.web.bind.annotation.ResponseBody;</span></span>
<span class="line"><span>import org.springframework.web.bind.annotation.RestControllerAdvice;</span></span>
<span class="line"><span>import tech.pdai.ratelimit.guava.config.response.ResponseResult;</span></span>
<span class="line"><span>import tech.pdai.ratelimit.guava.config.response.ResponseStatus;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * @author pdai</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>@Slf4j</span></span>
<span class="line"><span>@RestControllerAdvice</span></span>
<span class="line"><span>public class GlobalExceptionHandler {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * handle business exception.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param businessException business exception</span></span>
<span class="line"><span>     * @return ResponseResult</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @ResponseBody</span></span>
<span class="line"><span>    @ExceptionHandler(BusinessException.class)</span></span>
<span class="line"><span>    public ResponseResult&lt;BusinessException&gt; processBusinessException(BusinessException businessException) {</span></span>
<span class="line"><span>        log.error(businessException.getLocalizedMessage());</span></span>
<span class="line"><span>        return ResponseResult.fail(null, businessException.getLocalizedMessage()==null</span></span>
<span class="line"><span>                ? ResponseStatus.HTTP_STATUS_500.getDescription()</span></span>
<span class="line"><span>                :businessException.getLocalizedMessage());</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * handle other exception.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param exception exception</span></span>
<span class="line"><span>     * @return ResponseResult</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @ResponseBody</span></span>
<span class="line"><span>    @ExceptionHandler(Exception.class)</span></span>
<span class="line"><span>    public ResponseResult&lt;Exception&gt; processException(Exception exception) {</span></span>
<span class="line"><span>        log.error(exception.getLocalizedMessage(), exception);</span></span>
<span class="line"><span>        return ResponseResult.fail(null, ResponseStatus.HTTP_STATUS_500.getDescription());</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="统一结果返回封装" tabindex="-1">统一结果返回封装 <a class="header-anchor" href="#统一结果返回封装" aria-label="Permalink to &quot;统一结果返回封装&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>package tech.pdai.ratelimit.guava.config.response;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import java.io.Serializable;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import lombok.AllArgsConstructor;</span></span>
<span class="line"><span>import lombok.Builder;</span></span>
<span class="line"><span>import lombok.Data;</span></span>
<span class="line"><span>import lombok.NoArgsConstructor;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@NoArgsConstructor</span></span>
<span class="line"><span>@AllArgsConstructor</span></span>
<span class="line"><span>@Data</span></span>
<span class="line"><span>@Builder</span></span>
<span class="line"><span>public class ResponseResult&lt;T&gt; {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * response timestamp.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private long timestamp;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * response code, 200 -&gt; OK.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private String status;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * response message.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private String message;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * response data.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private T data;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * response success result wrapper.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param &lt;T&gt; type of data class</span></span>
<span class="line"><span>     * @return response result</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    public static &lt;T&gt; ResponseResult&lt;T&gt; success() {</span></span>
<span class="line"><span>        return success(null);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * response success result wrapper.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param data response data</span></span>
<span class="line"><span>     * @param &lt;T&gt;  type of data class</span></span>
<span class="line"><span>     * @return response result</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    public static &lt;T&gt; ResponseResult&lt;T&gt; success(T data) {</span></span>
<span class="line"><span>        return ResponseResult.&lt;T&gt;builder().data(data)</span></span>
<span class="line"><span>                .message(ResponseStatus.SUCCESS.getDescription())</span></span>
<span class="line"><span>                .status(ResponseStatus.SUCCESS.getResponseCode())</span></span>
<span class="line"><span>                .timestamp(System.currentTimeMillis())</span></span>
<span class="line"><span>                .build();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * response error result wrapper.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param message error message</span></span>
<span class="line"><span>     * @param &lt;T&gt;     type of data class</span></span>
<span class="line"><span>     * @return response result</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    public static &lt;T extends Serializable&gt; ResponseResult&lt;T&gt; fail(String message) {</span></span>
<span class="line"><span>        return fail(null, message);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * response error result wrapper.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param data    response data</span></span>
<span class="line"><span>     * @param message error message</span></span>
<span class="line"><span>     * @param &lt;T&gt;     type of data class</span></span>
<span class="line"><span>     * @return response result</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    public static &lt;T&gt; ResponseResult&lt;T&gt; fail(T data, String message) {</span></span>
<span class="line"><span>        return ResponseResult.&lt;T&gt;builder().data(data)</span></span>
<span class="line"><span>                .message(message)</span></span>
<span class="line"><span>                .status(ResponseStatus.FAIL.getResponseCode())</span></span>
<span class="line"><span>                .timestamp(System.currentTimeMillis())</span></span>
<span class="line"><span>                .build();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="controller接口" tabindex="-1">controller接口 <a class="header-anchor" href="#controller接口" aria-label="Permalink to &quot;controller接口&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>package tech.pdai.ratelimit.guava.controller;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import lombok.extern.slf4j.Slf4j;</span></span>
<span class="line"><span>import org.springframework.web.bind.annotation.GetMapping;</span></span>
<span class="line"><span>import org.springframework.web.bind.annotation.RestController;</span></span>
<span class="line"><span>import tech.pdai.ratelimit.guava.config.ratelimit.RateLimit;</span></span>
<span class="line"><span>import tech.pdai.ratelimit.guava.config.response.ResponseResult;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * @author pdai</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>@Slf4j</span></span>
<span class="line"><span>@RestController</span></span>
<span class="line"><span>public class RateLimitTestController {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @RateLimit</span></span>
<span class="line"><span>    @GetMapping(&quot;/limit&quot;)</span></span>
<span class="line"><span>    public ResponseResult&lt;String&gt; limit() {</span></span>
<span class="line"><span>        log.info(&quot;limit&quot;);</span></span>
<span class="line"><span>        return ResponseResult.success();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @RateLimit(limit = 5)</span></span>
<span class="line"><span>    @GetMapping(&quot;/limit1&quot;)</span></span>
<span class="line"><span>    public ResponseResult&lt;String&gt; limit1() {</span></span>
<span class="line"><span>        log.info(&quot;limit1&quot;);</span></span>
<span class="line"><span>        return ResponseResult.success();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @GetMapping(&quot;/nolimit&quot;)</span></span>
<span class="line"><span>    public ResponseResult&lt;String&gt; noRateLimiter() {</span></span>
<span class="line"><span>        log.info(&quot;no limit&quot;);</span></span>
<span class="line"><span>        return ResponseResult.success();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="接口测试" tabindex="-1">接口测试 <a class="header-anchor" href="#接口测试" aria-label="Permalink to &quot;接口测试&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@SneakyThrows</span></span>
<span class="line"><span>public static void test(int clientSize) {</span></span>
<span class="line"><span>    CountDownLatch downLatch = new CountDownLatch(clientSize);</span></span>
<span class="line"><span>    ExecutorService fixedThreadPool = Executors.newFixedThreadPool(clientSize);</span></span>
<span class="line"><span>    IntStream.range(0, clientSize).forEach(i -&gt;</span></span>
<span class="line"><span>            fixedThreadPool.submit(() -&gt; {</span></span>
<span class="line"><span>                RestTemplate restTemplate = new RestTemplate();</span></span>
<span class="line"><span>                restTemplate.getForObject(&quot;http://localhost:8080/limit1&quot;, ResponseResult.class);</span></span>
<span class="line"><span>                downLatch.countDown();</span></span>
<span class="line"><span>            })</span></span>
<span class="line"><span>    );</span></span>
<span class="line"><span>    downLatch.await();</span></span>
<span class="line"><span>    fixedThreadPool.shutdown();</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>测试结果</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>2021-10-01 15:22:47.171  INFO 30092 --- [nio-8080-exec-4] t.p.r.g.c.RateLimitTestController        : limit1</span></span>
<span class="line"><span>2021-10-01 15:22:47.171  INFO 30092 --- [nio-8080-exec-8] t.p.r.g.c.RateLimitTestController        : limit1</span></span>
<span class="line"><span>2021-10-01 15:22:47.171  INFO 30092 --- [nio-8080-exec-5] t.p.r.g.c.RateLimitTestController        : limit1</span></span>
<span class="line"><span>2021-10-01 15:22:47.187  INFO 30092 --- [nio-8080-exec-9] t.p.r.g.c.RateLimitTestController        : limit1</span></span>
<span class="line"><span>2021-10-01 15:22:47.187  INFO 30092 --- [nio-8080-exec-2] t.p.r.g.c.RateLimitTestController        : limit1</span></span>
<span class="line"><span>2021-10-01 15:22:47.187  INFO 30092 --- [io-8080-exec-10] t.p.r.g.c.RateLimitTestController        : limit1</span></span>
<span class="line"><span>2021-10-01 15:22:47.202 ERROR 30092 --- [nio-8080-exec-7] t.p.r.g.c.e.GlobalExceptionHandler       : too many requests, please try again later...</span></span>
<span class="line"><span>2021-10-01 15:22:47.202 ERROR 30092 --- [nio-8080-exec-6] t.p.r.g.c.e.GlobalExceptionHandler       : too many requests, please try again later...</span></span>
<span class="line"><span>2021-10-01 15:22:47.221 ERROR 30092 --- [nio-8080-exec-1] t.p.r.g.c.e.GlobalExceptionHandler       : too many requests, please try again later...</span></span>
<span class="line"><span>2021-10-01 15:22:47.222 ERROR 30092 --- [nio-8080-exec-5] t.p.r.g.c.e.GlobalExceptionHandler       : too many requests, please try again later...</span></span>
<span class="line"><span>2021-10-01 15:22:47.225 ERROR 30092 --- [nio-8080-exec-6] t.p.r.g.c.e.GlobalExceptionHandler       : too many requests, please try again later...</span></span>
<span class="line"><span>2021-10-01 15:22:47.225 ERROR 30092 --- [nio-8080-exec-8] t.p.r.g.c.e.GlobalExceptionHandler       : too many requests, please try again later...</span></span>
<span class="line"><span>2021-10-01 15:22:47.225 ERROR 30092 --- [nio-8080-exec-3] t.p.r.g.c.e.GlobalExceptionHandler       : too many requests, please try again later...</span></span>
<span class="line"><span>2021-10-01 15:22:47.225 ERROR 30092 --- [io-8080-exec-12] t.p.r.g.c.e.GlobalExceptionHandler       : too many requests, please try again later...</span></span>
<span class="line"><span>2021-10-01 15:22:47.225 ERROR 30092 --- [io-8080-exec-14] t.p.r.g.c.e.GlobalExceptionHandler       : too many requests, please try again later...</span></span>
<span class="line"><span>2021-10-01 15:22:47.225 ERROR 30092 --- [io-8080-exec-13] t.p.r.g.c.e.GlobalExceptionHandler       : too many requests, please try again later...</span></span>
<span class="line"><span>2021-10-01 15:22:47.225 ERROR 30092 --- [io-8080-exec-15] t.p.r.g.c.e.GlobalExceptionHandler       : too many requests, please try again later...</span></span>
<span class="line"><span>2021-10-01 15:22:47.240 ERROR 30092 --- [io-8080-exec-11] t.p.r.g.c.e.GlobalExceptionHandler       : too many requests, please try again later...</span></span>
<span class="line"><span>2021-10-01 15:22:47.240 ERROR 30092 --- [nio-8080-exec-4] t.p.r.g.c.e.GlobalExceptionHandler       : too many requests, please try again later...</span></span>
<span class="line"><span>2021-10-01 15:22:47.256 ERROR 30092 --- [nio-8080-exec-2] t.p.r.g.c.e.GlobalExceptionHandler       : too many requests, please try again later...</span></span></code></pre></div><h3 id="上述实现方案的槽点" tabindex="-1">上述实现方案的槽点 <a class="header-anchor" href="#上述实现方案的槽点" aria-label="Permalink to &quot;上述实现方案的槽点&quot;">​</a></h3><p>注意</p><p>必须要说明一下，<strong>上述实现方式只是单实例下一种思路而已</strong>，如果细细的看，上面的代码存在一些槽点。</p><ol><li>首先, <code>EXISTED_RATE_LIMITERS.computeIfAbsent(method.getName(), k -&gt; RateLimiter.create(annotation.limit()))</code> 这行代码中 <code>method.getName()</code>表明是对方法名进行限流的，其实并不合适，应该需要至少加上类名；</li><li>其次, 如果首次运行时访问的请求是一次性涌入的，即EXISTED_RATE_LIMITERS还是空的时候并发请求@RateLimit接口，那么RateLimiter.create(annotation.limit())是会重复创建并加入到EXISTED_RATE_LIMITERS的，这是明显的bug；</li><li>再者, 上述实现方式按照方法名去限定请求量，对于很多情况下至少需要支持按照IP和方法名，或者其它自定义的方式进行限流。</li><li>其它一些场景支持的参数抽象和封装等</li></ol><h2 id="示例源码" tabindex="-1">示例源码 <a class="header-anchor" href="#示例源码" aria-label="Permalink to &quot;示例源码&quot;">​</a></h2><p><a href="https://github.com/realpdai/tech-pdai-spring-demos" target="_blank" rel="noreferrer">https://github.com/realpdai/tech-pdai-spring-demos</a></p><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>`,40)]))}const m=n(l,[["render",i]]);export{d as __pageData,m as default};
