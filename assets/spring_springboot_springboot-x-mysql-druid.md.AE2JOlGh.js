import{_ as s,c as n,ai as e,o as p}from"./chunks/framework.BrYByd3F.js";const t="/vitepress-blog-template/images/spring/springboot/springboot-druid-11.png",i="/vitepress-blog-template/images/spring/springboot/springboot-druid-12.png",r="/vitepress-blog-template/images/spring/springboot/springboot-druid-13.png",l="/vitepress-blog-template/images/spring/springboot/springboot-druid-1.png",o="/vitepress-blog-template/images/spring/springboot/springboot-druid-2.png",d="/vitepress-blog-template/images/spring/springboot/springboot-druid-3.png",c="/vitepress-blog-template/images/spring/springboot/springboot-druid-4.png",u="/vitepress-blog-template/images/spring/springboot/springboot-druid-6.png",g="/vitepress-blog-template/images/spring/springboot/springboot-druid-5.png",b="/vitepress-blog-template/images/spring/springboot/springboot-druid-8.png",D=JSON.parse('{"title":"SpringBoot集成连接池 - 集成数据库Druid连接池","description":"","frontmatter":{},"headers":[],"relativePath":"spring/springboot/springboot-x-mysql-druid.md","filePath":"spring/springboot/springboot-x-mysql-druid.md","lastUpdated":1737706346000}'),h={name:"spring/springboot/springboot-x-mysql-druid.md"};function m(f,a,k,S,q,_){return p(),n("div",null,a[0]||(a[0]=[e(`<h1 id="springboot集成连接池-集成数据库druid连接池" tabindex="-1">SpringBoot集成连接池 - 集成数据库Druid连接池 <a class="header-anchor" href="#springboot集成连接池-集成数据库druid连接池" aria-label="Permalink to &quot;SpringBoot集成连接池 - 集成数据库Druid连接池&quot;">​</a></h1><blockquote><p>上文介绍默认数据库连接池HikariCP，本文主要介绍SpringBoot集成阿里的Druid连接池的实践; 客观的来说，阿里Druid只能说是中文开源中功能全且广泛的连接池为基础的监控组件，但是（仅从连接池的角度）在生态，维护性，开源规范性，综合性能等方面和HikariCP比还是有很大差距。 @pdai</p></blockquote><h2 id="知识准备" tabindex="-1">知识准备 <a class="header-anchor" href="#知识准备" aria-label="Permalink to &quot;知识准备&quot;">​</a></h2><blockquote><p>了解Druid连接池。</p></blockquote><h3 id="druid连接池的定位" tabindex="-1">Druid连接池的定位？ <a class="header-anchor" href="#druid连接池的定位" aria-label="Permalink to &quot;Druid连接池的定位？&quot;">​</a></h3><blockquote><p>Druid连接池是阿里巴巴开源的数据库连接池项目。Druid连接池<strong>为监控而生</strong>，内置强大的监控功能，监控特性不影响性能。功能强大，能防SQL注入，内置Loging能诊断Hack应用行为。</p></blockquote><ul><li>Github项目地址 <a href="https://github.com/alibaba/druid" target="_blank" rel="noreferrer">https://github.com/alibaba/druid</a></li><li>文档 <a href="https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98" target="_blank" rel="noreferrer">https://github.com/alibaba/druid/wiki/常见问题</a></li><li>下载 <a href="http://repo1.maven.org/maven2/com/alibaba/druid/" target="_blank" rel="noreferrer">http://repo1.maven.org/maven2/com/alibaba/druid/</a></li><li>监控DEMO <a href="http://120.26.192.168/druid/index.html" target="_blank" rel="noreferrer">http://120.26.192.168/druid/index.html</a></li></ul><p>（更多功能请看后续文章）</p><h2 id="简单示例" tabindex="-1">简单示例 <a class="header-anchor" href="#简单示例" aria-label="Permalink to &quot;简单示例&quot;">​</a></h2><blockquote><p>本示例主要展示SpringBoot2 和 Druid CP的集成，并在<a href="https://pdai.tech/md/spring/springboot/springboot-x-mysql-jpa.html" target="_blank" rel="noreferrer">SpringBoot集成MySQL - 基于JPA的封装</a>基础增加Druid而成。</p></blockquote><h3 id="pom配置" tabindex="-1">POM配置 <a class="header-anchor" href="#pom配置" aria-label="Permalink to &quot;POM配置&quot;">​</a></h3><p>增加依赖</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid-spring-boot-starter --&gt;</span></span>
<span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;</span></span>
<span class="line"><span>    &lt;version&gt;1.2.9&lt;/version&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre></div><h3 id="yml配置" tabindex="-1">yml配置 <a class="header-anchor" href="#yml配置" aria-label="Permalink to &quot;yml配置&quot;">​</a></h3><p>详细的yml配置如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>spring:</span></span>
<span class="line"><span>  datasource:</span></span>
<span class="line"><span>    url: jdbc:mysql://localhost:3306/test_db?useSSL=false&amp;autoReconnect=true&amp;characterEncoding=utf8</span></span>
<span class="line"><span>    driver-class-name: com.mysql.cj.jdbc.Driver</span></span>
<span class="line"><span>    username: root</span></span>
<span class="line"><span>    password: bfXa4Pt2lUUScy8jakXf</span></span>
<span class="line"><span>    # Druid datasource</span></span>
<span class="line"><span>    type: com.alibaba.druid.pool.DruidDataSource</span></span>
<span class="line"><span>    druid:</span></span>
<span class="line"><span>      # 初始化大小</span></span>
<span class="line"><span>      initial-size: 5</span></span>
<span class="line"><span>      # 最小连接数</span></span>
<span class="line"><span>      min-idle: 10</span></span>
<span class="line"><span>      # 最大连接数</span></span>
<span class="line"><span>      max-active: 20</span></span>
<span class="line"><span>      # 获取连接时的最大等待时间</span></span>
<span class="line"><span>      max-wait: 60000</span></span>
<span class="line"><span>      # 一个连接在池中最小生存的时间，单位是毫秒</span></span>
<span class="line"><span>      min-evictable-idle-time-millis: 300000</span></span>
<span class="line"><span>      # 多久才进行一次检测需要关闭的空闲连接，单位是毫秒</span></span>
<span class="line"><span>      time-between-eviction-runs-millis: 60000</span></span>
<span class="line"><span>      # 配置扩展插件：stat-监控统计，log4j-日志，wall-防火墙（防止SQL注入），去掉后，监控界面的sql无法统计</span></span>
<span class="line"><span>      filters: stat,wall</span></span>
<span class="line"><span>      # 检测连接是否有效的 SQL语句，为空时以下三个配置均无效</span></span>
<span class="line"><span>      validation-query: SELECT 1</span></span>
<span class="line"><span>      # 申请连接时执行validationQuery检测连接是否有效，默认true，开启后会降低性能</span></span>
<span class="line"><span>      test-on-borrow: true</span></span>
<span class="line"><span>      # 归还连接时执行validationQuery检测连接是否有效，默认false，开启后会降低性能</span></span>
<span class="line"><span>      test-on-return: true</span></span>
<span class="line"><span>      # 申请连接时如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效，默认false，建议开启，不影响性能</span></span>
<span class="line"><span>      test-while-idle: true</span></span>
<span class="line"><span>      # 是否开启 StatViewServlet</span></span>
<span class="line"><span>      stat-view-servlet:</span></span>
<span class="line"><span>        enabled: true</span></span>
<span class="line"><span>        # 访问监控页面 白名单，默认127.0.0.1</span></span>
<span class="line"><span>        allow: 127.0.0.1</span></span>
<span class="line"><span>        login-username: admin</span></span>
<span class="line"><span>        login-password: admin</span></span>
<span class="line"><span>      # FilterStat</span></span>
<span class="line"><span>      filter:</span></span>
<span class="line"><span>        stat:</span></span>
<span class="line"><span>          # 是否开启 FilterStat，默认true</span></span>
<span class="line"><span>          enabled: true</span></span>
<span class="line"><span>          # 是否开启 慢SQL 记录，默认false</span></span>
<span class="line"><span>          log-slow-sql: true</span></span>
<span class="line"><span>          # 慢 SQL 的标准，默认 3000，单位：毫秒</span></span>
<span class="line"><span>          slow-sql-millis: 5000</span></span>
<span class="line"><span>          # 合并多个连接池的监控数据，默认false</span></span>
<span class="line"><span>          merge-sql: false</span></span>
<span class="line"><span>  jpa:</span></span>
<span class="line"><span>    open-in-view: false</span></span>
<span class="line"><span>    generate-ddl: false</span></span>
<span class="line"><span>    show-sql: false</span></span>
<span class="line"><span>    properties:</span></span>
<span class="line"><span>      hibernate:</span></span>
<span class="line"><span>        dialect: org.hibernate.dialect.MySQLDialect</span></span>
<span class="line"><span>        format_sql: true</span></span>
<span class="line"><span>        use-new-id-generator-mappings: false</span></span></code></pre></div><p>更多的配置，请参考<a href="https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8" target="_blank" rel="noreferrer">官方配置在新窗口打开</a></p><h3 id="测试" tabindex="-1">测试 <a class="header-anchor" href="#测试" aria-label="Permalink to &quot;测试&quot;">​</a></h3><p>访问<a href="http://localhost:8080/druid/datasource.html" target="_blank" rel="noreferrer">http://localhost:8080/druid/datasource.html</a></p><p>admin/admin登录</p><p><img src="`+t+'" alt="error.图片加载失败"></p><p>访问接口，进行SQL查询</p><p><img src="'+i+'" alt="error.图片加载失败"></p><p>SQL和慢查询监控</p><p><img src="'+r+`" alt="error.图片加载失败"></p><h2 id="进一步理解" tabindex="-1">进一步理解 <a class="header-anchor" href="#进一步理解" aria-label="Permalink to &quot;进一步理解&quot;">​</a></h2><blockquote><p>进一步理解下阿里的Druid。</p></blockquote><h3 id="更多功能等" tabindex="-1">更多功能等 <a class="header-anchor" href="#更多功能等" aria-label="Permalink to &quot;更多功能等&quot;">​</a></h3><blockquote><p>Druid连接池最初就是为监控系统采集jdbc运行信息而生的，它内置了StatFilter 功能，能采集非常完备的连接池执行信息Druid连接池内置了能和Spring/Servlet关联监控的实现，使得监控Web应用特别方便Druid连接池内置了一个监控页面，提供了非常完备的监控信息，可以快速诊断系统的瓶颈。更多请参考：Druid 的GitHub仓库<a href="https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98" target="_blank" rel="noreferrer">wiki在新窗口打开</a></p></blockquote><h4 id="监控信息采集的statfilter" tabindex="-1">监控信息采集的StatFilter <a class="header-anchor" href="#监控信息采集的statfilter" aria-label="Permalink to &quot;监控信息采集的StatFilter&quot;">​</a></h4><p>Druid连接池的监控信息主要是通过StatFilter 采集的，采集的信息非常全面，包括SQL执行、并发、慢查、执行时间区间分布等。具体配置可以看这个 <a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE%5C_StatFilter" target="_blank" rel="noreferrer">https://github.com/alibaba/druid/wiki/配置\\_StatFilter</a></p><ul><li><strong>监控不影响性能</strong></li></ul><p>Druid增加StatFilter之后，能采集大量统计信息，同时对性能基本没有影响。StatFilter对CPU和内存的消耗都极小，对系统的影响可以忽略不计。监控不影响性能是Druid连接池的重要特性。</p><ul><li><strong>SQL参数化合并监控</strong></li></ul><p>实际业务中，如果SQL不是走PreparedStatement，SQL没有参数化，这时SQL需要参数化合并监控才能真实反映业务情况。如下SQL：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>select * from t where id = 1</span></span>
<span class="line"><span>select * from t where id = 2</span></span>
<span class="line"><span>select * from t where id = 3</span></span></code></pre></div><p>参数化后：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>select * from t where id = ?</span></span></code></pre></div><p>参数化合并监控是基于SQL Parser语法解析实现的，是Druid连接池独一无二的功能。</p><ul><li><strong>执行次数、返回行数、更新行数和并发监控</strong></li></ul><p>StatFilter能采集到每个SQL的执行次数、返回行数总和、更新行数总和、执行中次数和和最大并发。并发监控的统计是在SQL执行开始对计数器加一，结束后对计数器减一实现的。可以采集到每个SQL的当前并发和采集期间的最大并发。</p><ul><li><strong>慢查监控</strong></li></ul><p>缺省执行耗时超过3秒的被认为是慢查，统计项中有包括每个SQL的最后发生的慢查的耗时和发生时的参数。</p><ul><li><strong>Exception监控</strong></li></ul><p>如果SQL执行时抛出了Exception，SQL统计项上会Exception有最后的发生时间、堆栈和Message，根据这些信息可以很容易定位错误原因。</p><h4 id="诊断支持" tabindex="-1">诊断支持 <a class="header-anchor" href="#诊断支持" aria-label="Permalink to &quot;诊断支持&quot;">​</a></h4><p>Druid连接池内置了LogFilter，将Connection/Statement/ResultSet相关操作的日志输出，可以用于诊断系统问题，也可以用于Hack一个不熟悉的系统。</p><p>LogFilter可以输出连接申请/释放，事务提交回滚，Statement的Create/Prepare/Execute/Close，ResultSet的Open/Next/Close，通过LogFilter可以详细诊断一个系统的Jdbc行为。</p><p>LogFilter有Log4j、Log4j2、Slf4j、CommsLog等实现，具体配置看这里 <a href="https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE%5C_LogFilter" target="_blank" rel="noreferrer">https://github.com/alibaba/druid/wiki/配置\\_LogFilter</a></p><h4 id="防sql注入" tabindex="-1">防SQL注入 <a class="header-anchor" href="#防sql注入" aria-label="Permalink to &quot;防SQL注入&quot;">​</a></h4><p>SQL注入攻击是黑客对数据库进行攻击的常用手段，Druid连接池内置了WallFilter 提供防SQL注入功能，在不影响性能的同时防御SQL注入攻击。</p><ul><li><strong>基于语意的防SQL注入</strong></li></ul><p>Druid连接池内置了一个功能完备的SQL Parser，能够完整解析mysql、sql server、oracle、postgresql的语法，通过语意分析能够精确识别SQL注入攻击。</p><ul><li><strong>极低的漏报率和误报率</strong></li></ul><p>基于SQL语意分析，大量应用和反馈，使得Druid的防SQL注入拥有极低的漏报率和误报率。</p><ul><li><strong>防注入对性能影响极小</strong></li></ul><p>内置参数化后的Cache、高性能手写的Parser，使得打开防SQL注入对应用的性能基本不受影响。</p><h3 id="如何评价阿里的druid连接池" tabindex="-1">如何评价阿里的Druid连接池 <a class="header-anchor" href="#如何评价阿里的druid连接池" aria-label="Permalink to &quot;如何评价阿里的Druid连接池&quot;">​</a></h3><blockquote><p><strong>客观的来说</strong>，阿里Druid只能说是中文开源中功能全且广泛的连接池为基础的监控组件，但是（仅从连接池的角度）在生态，维护性，开源规范性，综合性能等方面和HikariCP比还是有很大差距。（<strong>以下是pdai本人观点，对国产开源并没偏见</strong>！）。</p></blockquote><p>首先，仅从<a href="https://github.com/alibaba/druid/wiki/Druid%E8%BF%9E%E6%8E%A5%E6%B1%A0%E4%BB%8B%E7%BB%8D" target="_blank" rel="noreferrer">功能在新窗口打开</a>上看，Druid并不是一个存粹的连接池，它还承载了监控，诊断，安全的功能。从产品的角度看，all in one 也是有代价的，如果我只期望使用连接池的功能，其它的功能对于使用者来说就是鸡肋；而我们没有看到其长期架构设计（比如插拔式架构，分包设计等）， 大概率是当时Druid这种开源的驱动方式并不是一个完善规范的开源软件开发方式（比如KPI driven和个人主义色彩)</p><p>（如果你仅仅从功能上比较，你就已经输了，因为这种比较根本不在一个维度上；看到druid主要作者wenshao和hikari作者的<a href="https://github.com/brettwooldridge/HikariCP/issues/232" target="_blank" rel="noreferrer">讨论在新窗口打开</a>，读者自行辨别~）</p><p><img src="`+l+'" alt="error.图片加载失败"></p><p>文档的规范性，发包规范性，bug修复，生态构建等方面国产开源在那时（当下及未来一段时间）还有很长的路要走。</p><p>来看看相关Isusse，2k多个issues哈，没有专职维护（图中Spring的高危漏洞无人修正）</p><p><img src="'+o+'" alt="error.图片加载失败"></p><p>源代码中当前版本是1.2.8，实际版本</p><p><img src="'+d+'" alt="error.图片加载失败"></p><p>实际mvn repo中已经是1.2.9</p><p><img src="'+c+'" alt="error.图片加载失败"></p><p>再看wiki，有些链接居然是空的...</p><p><img src="'+u+'" alt="error.图片加载失败"></p><p>最新的Springboot-starter中SpringBoot还是1.5.12-RELEASE版本，先不说没有支持SpringBoot 2.x版本；高危漏洞无人持续维护，对于开发者而言就是坑(不禁让我又想起了FastJson，说多了都是泪)！</p><p><img src="'+g+'" alt="error.图片加载失败"></p><p>此外，广告都加到UI上了（KPI压力？）</p><p><img src="'+b+'" alt="error.图片加载失败"></p><p>只能说，国产开源在还有很长的路要走！</p><h2 id="示例源码" tabindex="-1">示例源码 <a class="header-anchor" href="#示例源码" aria-label="Permalink to &quot;示例源码&quot;">​</a></h2><p><a href="https://github.com/realpdai/tech-pdai-spring-demos" target="_blank" rel="noreferrer">https://github.com/realpdai/tech-pdai-spring-demos</a></p><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>',79)]))}const L=s(h,[["render",m]]);export{D as __pageData,L as default};
