import{_ as n,c as a,ai as p,o as e}from"./chunks/framework.BrYByd3F.js";const l="/vitepress-blog-template/images/spring/springboot/springboot-mysql57-jpa-1.png",i="/vitepress-blog-template/images/spring/springboot/springboot-mysql57-jpa-2.png",b=JSON.parse('{"title":"▶SpringBoot集成MySQL - 基于JPA的封装","description":"","frontmatter":{},"headers":[],"relativePath":"spring/springboot/springboot-x-mysql-jpa.md","filePath":"spring/springboot/springboot-x-mysql-jpa.md","lastUpdated":1737706346000}'),t={name:"spring/springboot/springboot-x-mysql-jpa.md"};function c(r,s,o,d,g,u){return e(),a("div",null,s[0]||(s[0]=[p(`<h1 id="▶springboot集成mysql-基于jpa的封装" tabindex="-1">▶SpringBoot集成MySQL - 基于JPA的封装 <a class="header-anchor" href="#▶springboot集成mysql-基于jpa的封装" aria-label="Permalink to &quot;▶SpringBoot集成MySQL - 基于JPA的封装&quot;">​</a></h1><blockquote><p>在实际开发中，最为常见的是基于数据库的CRUD封装等，比如SpringBoot集成MySQL数据库，常用的方式有JPA和MyBatis； 本文主要介绍基于JPA方式的基础封装思路。@pdai</p></blockquote><h2 id="知识准备" tabindex="-1">知识准备 <a class="header-anchor" href="#知识准备" aria-label="Permalink to &quot;知识准备&quot;">​</a></h2><blockquote><p>需要对MySQL，JPA以及接口封装有了解。</p></blockquote><h3 id="mysql相关" tabindex="-1">MySQL相关 <a class="header-anchor" href="#mysql相关" aria-label="Permalink to &quot;MySQL相关&quot;">​</a></h3><ul><li><p><a href="https://pdai.tech/md/db/sql/sql-db.html" target="_blank" rel="noreferrer">数据库基础和SQL知识体系详解</a></p></li><li><p><a href="https://pdai.tech/md/db/sql-mysql/sql-mysql-overview.html" target="_blank" rel="noreferrer">MySQL知识体系详解</a></p></li></ul><h3 id="jpa相关" tabindex="-1">JPA相关 <a class="header-anchor" href="#jpa相关" aria-label="Permalink to &quot;JPA相关&quot;">​</a></h3><ul><li><a href="https://pdai.tech/md/spring/springboot/springboot-x-hello-h2-jpa.html" target="_blank" rel="noreferrer">SpringBoot入门 - 添加内存数据库H2</a></li></ul><h3 id="接口相关" tabindex="-1">接口相关 <a class="header-anchor" href="#接口相关" aria-label="Permalink to &quot;接口相关&quot;">​</a></h3><ul><li><a href="https://pdai.tech/md/spring/springboot/springboot-x-interface-response.html" target="_blank" rel="noreferrer">SpringBoot接口 - 如何统一接口封装</a><ul><li>在以SpringBoot开发Restful接口时，统一返回方便前端进行开发和封装，以及出现时给出响应编码和信息。</li></ul></li><li><a href="https://pdai.tech/md/spring/springboot/springboot-x-interface-param.html" target="_blank" rel="noreferrer">SpringBoot接口 - 如何对参数进行校验</a><ul><li>在以SpringBoot开发Restful接口时, 对于接口的查询参数后台也是要进行校验的，同时还需要给出校验的返回信息放到上文我们统一封装的结构中。那么如何优雅的进行参数的统一校验呢？</li></ul></li><li><a href="https://pdai.tech/md/spring/springboot/springboot-x-interface-param-i18n.html" target="_blank" rel="noreferrer">SpringBoot接口 - 如何参数校验国际化</a><ul><li>上文我们学习了如何对SpringBoot接口进行参数校验，但是如果需要有国际化的信息，应该如何优雅处理呢？</li></ul></li><li><a href="https://pdai.tech/md/spring/springboot/springboot-x-interface-exception.html" target="_blank" rel="noreferrer">SpringBoot接口 - 如何统一异常处理</a><ul><li>SpringBoot接口如何对异常进行统一封装，并统一返回呢？以上文的参数校验为例，如何优雅的将参数校验的错误信息统一处理并封装返回呢？</li></ul></li><li><a href="https://pdai.tech/md/spring/springboot/springboot-x-interface-version.html" target="_blank" rel="noreferrer">SpringBoot接口 - 如何提供多个版本接口</a><ul><li>在以SpringBoot开发Restful接口时，由于模块，系统等业务的变化，需要对同一接口提供不同版本的参数实现（老的接口还有模块或者系统在用，不能直接改，所以需要不同版本）。如何更加优雅的实现多版本接口呢？</li></ul></li><li><a href="https://pdai.tech/md/spring/springboot/springboot-x-interface-doc.html" target="_blank" rel="noreferrer">SpringBoot接口 - 如何生成接口文档</a><ul><li>SpringBoot开发Restful接口，有什么API规范吗？如何快速生成API文档呢？</li></ul></li><li><a href="https://pdai.tech/md/spring/springboot/springboot-x-interface-3rd.html" target="_blank" rel="noreferrer">SpringBoot接口 - 如何访问外部接口</a><ul><li>在SpringBoot接口开发中，存在着本模块的代码需要访问外面模块接口或外部url链接的需求, 比如调用外部的地图API或者天气API。那么有哪些方式可以调用外部接口呢？</li></ul></li><li><a href="https://pdai.tech/md/spring/springboot/springboot-x-interface-jiami.html" target="_blank" rel="noreferrer">SpringBoot接口 - 如何对接口进行加密</a><ul><li>在以SpringBoot开发后台API接口时，会存在哪些接口不安全的因素呢？通常如何去解决的呢？本文主要介绍API<strong>接口有不安全的因素</strong>以及<strong>常见的保证接口安全的方式</strong>，重点<strong>实践如何对接口进行签名</strong>。</li></ul></li><li><a href="https://pdai.tech/md/spring/springboot/springboot-x-interface-mideng.html" target="_blank" rel="noreferrer">SpringBoot接口 - 如何保证接口幂等</a><ul><li>在以SpringBoot开发Restful接口时，如何防止接口的重复提交呢？ 本文主要介绍接口幂等相关的知识点，并实践常见基于Token实现接口幂等。</li></ul></li><li><a href="https://pdai.tech/md/spring/springboot/springboot-x-interface-xianliu.html" target="_blank" rel="noreferrer">SpringBoot接口 - 如何实现接口限流之单实例</a><ul><li>在以SpringBoot开发Restful接口时，当流量超过服务极限能力时，系统可能会出现卡死、崩溃的情况，所以就有了降级和限流。在接口层如何做限流呢？ 本文主要回顾限流的知识点，并实践单实例限流的一种思路。</li></ul></li><li><a href="https://pdai.tech/md/spring/springboot/springboot-x-interface-xianliu-dist.html" target="_blank" rel="noreferrer">SpringBoot接口 - 如何实现接口限流之分布式</a><ul><li>上文中介绍了单实例下如何在业务接口层做限流，本文主要介绍分布式场景下限流的方案，以及什么样的分布式场景下需要在业务层加限流而不是接入层; 并且结合kailing开源的<a href="https://gitee.com/kailing/ratelimiter-spring-boot-starter" target="_blank" rel="noreferrer">ratelimiter-spring-boot-starter在新窗口打开</a>为例， 学习<strong>思路+代码封装+starter封装</strong>。</li></ul></li></ul><h2 id="实现案例" tabindex="-1">实现案例 <a class="header-anchor" href="#实现案例" aria-label="Permalink to &quot;实现案例&quot;">​</a></h2><blockquote><p>本例主要简单示例下基于JPA DAO/Service层封装， 并且注意下如下例子MySQL是5.7版本，8.x版本相关例子也在<a href="https://github.com/realpdai/tech-pdai-spring-demos" target="_blank" rel="noreferrer">示例源码在新窗口打开</a>中。</p></blockquote><h3 id="准备db" tabindex="-1">准备DB <a class="header-anchor" href="#准备db" aria-label="Permalink to &quot;准备DB&quot;">​</a></h3><p>创建MySQL的schema test_db, 导入SQL 文件如下</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-- MySQL dump 10.13  Distrib 5.7.12, for Win64 (x86_64)</span></span>
<span class="line"><span>--</span></span>
<span class="line"><span>-- Host: localhost    Database: test_db</span></span>
<span class="line"><span>-- ------------------------------------------------------</span></span>
<span class="line"><span>-- Server version	5.7.17-log</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;</span></span>
<span class="line"><span>/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;</span></span>
<span class="line"><span>/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;</span></span>
<span class="line"><span>/*!40101 SET NAMES utf8 */;</span></span>
<span class="line"><span>/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;</span></span>
<span class="line"><span>/*!40103 SET TIME_ZONE=&#39;+00:00&#39; */;</span></span>
<span class="line"><span>/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;</span></span>
<span class="line"><span>/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;</span></span>
<span class="line"><span>/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=&#39;NO_AUTO_VALUE_ON_ZERO&#39; */;</span></span>
<span class="line"><span>/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>--</span></span>
<span class="line"><span>-- Table structure for table \`tb_role\`</span></span>
<span class="line"><span>--</span></span>
<span class="line"><span></span></span>
<span class="line"><span>DROP TABLE IF EXISTS \`tb_role\`;</span></span>
<span class="line"><span>/*!40101 SET @saved_cs_client     = @@character_set_client */;</span></span>
<span class="line"><span>/*!40101 SET character_set_client = utf8 */;</span></span>
<span class="line"><span>CREATE TABLE \`tb_role\` (</span></span>
<span class="line"><span>  \`id\` int(11) NOT NULL AUTO_INCREMENT,</span></span>
<span class="line"><span>  \`name\` varchar(255) NOT NULL,</span></span>
<span class="line"><span>  \`role_key\` varchar(255) NOT NULL,</span></span>
<span class="line"><span>  \`description\` varchar(255) DEFAULT NULL,</span></span>
<span class="line"><span>  \`create_time\` datetime DEFAULT NULL,</span></span>
<span class="line"><span>  \`update_time\` datetime DEFAULT NULL,</span></span>
<span class="line"><span>  PRIMARY KEY (\`id\`)</span></span>
<span class="line"><span>) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;</span></span>
<span class="line"><span>/*!40101 SET character_set_client = @saved_cs_client */;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>--</span></span>
<span class="line"><span>-- Dumping data for table \`tb_role\`</span></span>
<span class="line"><span>--</span></span>
<span class="line"><span></span></span>
<span class="line"><span>LOCK TABLES \`tb_role\` WRITE;</span></span>
<span class="line"><span>/*!40000 ALTER TABLE \`tb_role\` DISABLE KEYS */;</span></span>
<span class="line"><span>INSERT INTO \`tb_role\` VALUES (1,&#39;admin&#39;,&#39;admin&#39;,&#39;admin&#39;,&#39;2021-09-08 17:09:15&#39;,&#39;2021-09-08 17:09:15&#39;);</span></span>
<span class="line"><span>/*!40000 ALTER TABLE \`tb_role\` ENABLE KEYS */;</span></span>
<span class="line"><span>UNLOCK TABLES;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>--</span></span>
<span class="line"><span>-- Table structure for table \`tb_user\`</span></span>
<span class="line"><span>--</span></span>
<span class="line"><span></span></span>
<span class="line"><span>DROP TABLE IF EXISTS \`tb_user\`;</span></span>
<span class="line"><span>/*!40101 SET @saved_cs_client     = @@character_set_client */;</span></span>
<span class="line"><span>/*!40101 SET character_set_client = utf8 */;</span></span>
<span class="line"><span>CREATE TABLE \`tb_user\` (</span></span>
<span class="line"><span>  \`id\` int(11) NOT NULL AUTO_INCREMENT,</span></span>
<span class="line"><span>  \`user_name\` varchar(45) NOT NULL,</span></span>
<span class="line"><span>  \`password\` varchar(45) NOT NULL,</span></span>
<span class="line"><span>  \`email\` varchar(45) DEFAULT NULL,</span></span>
<span class="line"><span>  \`phone_number\` int(11) DEFAULT NULL,</span></span>
<span class="line"><span>  \`description\` varchar(255) DEFAULT NULL,</span></span>
<span class="line"><span>  \`create_time\` datetime DEFAULT NULL,</span></span>
<span class="line"><span>  \`update_time\` datetime DEFAULT NULL,</span></span>
<span class="line"><span>  PRIMARY KEY (\`id\`)</span></span>
<span class="line"><span>) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;</span></span>
<span class="line"><span>/*!40101 SET character_set_client = @saved_cs_client */;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>--</span></span>
<span class="line"><span>-- Dumping data for table \`tb_user\`</span></span>
<span class="line"><span>--</span></span>
<span class="line"><span></span></span>
<span class="line"><span>LOCK TABLES \`tb_user\` WRITE;</span></span>
<span class="line"><span>/*!40000 ALTER TABLE \`tb_user\` DISABLE KEYS */;</span></span>
<span class="line"><span>INSERT INTO \`tb_user\` VALUES (1,&#39;pdai&#39;,&#39;dfasdf&#39;,&#39;suzhou.daipeng@gmail.com&#39;,1212121213,&#39;afsdfsaf&#39;,&#39;2021-09-08 17:09:15&#39;,&#39;2021-09-08 17:09:15&#39;);</span></span>
<span class="line"><span>/*!40000 ALTER TABLE \`tb_user\` ENABLE KEYS */;</span></span>
<span class="line"><span>UNLOCK TABLES;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>--</span></span>
<span class="line"><span>-- Table structure for table \`tb_user_role\`</span></span>
<span class="line"><span>--</span></span>
<span class="line"><span></span></span>
<span class="line"><span>DROP TABLE IF EXISTS \`tb_user_role\`;</span></span>
<span class="line"><span>/*!40101 SET @saved_cs_client     = @@character_set_client */;</span></span>
<span class="line"><span>/*!40101 SET character_set_client = utf8 */;</span></span>
<span class="line"><span>CREATE TABLE \`tb_user_role\` (</span></span>
<span class="line"><span>  \`user_id\` int(11) NOT NULL,</span></span>
<span class="line"><span>  \`role_id\` int(11) NOT NULL</span></span>
<span class="line"><span>) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span></span>
<span class="line"><span>/*!40101 SET character_set_client = @saved_cs_client */;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>--</span></span>
<span class="line"><span>-- Dumping data for table \`tb_user_role\`</span></span>
<span class="line"><span>--</span></span>
<span class="line"><span></span></span>
<span class="line"><span>LOCK TABLES \`tb_user_role\` WRITE;</span></span>
<span class="line"><span>/*!40000 ALTER TABLE \`tb_user_role\` DISABLE KEYS */;</span></span>
<span class="line"><span>INSERT INTO \`tb_user_role\` VALUES (1,1);</span></span>
<span class="line"><span>/*!40000 ALTER TABLE \`tb_user_role\` ENABLE KEYS */;</span></span>
<span class="line"><span>UNLOCK TABLES;</span></span>
<span class="line"><span>/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;</span></span>
<span class="line"><span>/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;</span></span>
<span class="line"><span>/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;</span></span>
<span class="line"><span>/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;</span></span>
<span class="line"><span>/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;</span></span>
<span class="line"><span>/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;</span></span>
<span class="line"><span>/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- Dump completed on 2021-09-08 17:12:11</span></span></code></pre></div><p>引入maven依赖</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;mysql&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span></span>
<span class="line"><span>    &lt;version&gt;5.1.47&lt;/version&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span>
<span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span>
<span class="line"><span>&lt;!-- jpa-spec ---&gt;</span></span>
<span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;com.github.wenhao&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;jpa-spec&lt;/artifactId&gt;</span></span>
<span class="line"><span>    &lt;version&gt;3.1.0&lt;/version&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre></div><p>增加yml配置</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>spring:</span></span>
<span class="line"><span>  datasource:</span></span>
<span class="line"><span>    url: jdbc:mysql://localhost:3306/test_db?useSSL=false&amp;autoReconnect=true&amp;characterEncoding=utf8</span></span>
<span class="line"><span>    driver-class-name: com.mysql.jdbc.Driver</span></span>
<span class="line"><span>    username: root</span></span>
<span class="line"><span>    password: xxxxxxxxx</span></span>
<span class="line"><span>    initial-size: 20</span></span>
<span class="line"><span>    max-idle: 60</span></span>
<span class="line"><span>    max-wait: 10000</span></span>
<span class="line"><span>    min-idle: 10</span></span>
<span class="line"><span>    max-active: 200</span></span>
<span class="line"><span>  jpa:</span></span>
<span class="line"><span>    generate-ddl: false</span></span>
<span class="line"><span>    show-sql: false</span></span>
<span class="line"><span>    properties:</span></span>
<span class="line"><span>      hibernate:</span></span>
<span class="line"><span>        dialect: org.hibernate.dialect.MySQLDialect</span></span>
<span class="line"><span>        format_sql: true</span></span>
<span class="line"><span>        use-new-id-generator-mappings: false</span></span></code></pre></div><h3 id="定义实体" tabindex="-1">定义实体 <a class="header-anchor" href="#定义实体" aria-label="Permalink to &quot;定义实体&quot;">​</a></h3><blockquote><p>USER/ROLE</p></blockquote><p>BaseEntity</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>package tech.pdai.springboot.mysql57.jpa.entity;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import java.io.Serializable;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * @author pdai</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>public interface BaseEntity extends Serializable {</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>User</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>package tech.pdai.springboot.mysql57.jpa.entity;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import java.time.LocalDateTime;</span></span>
<span class="line"><span>import java.util.Set;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import javax.persistence.CascadeType;</span></span>
<span class="line"><span>import javax.persistence.Column;</span></span>
<span class="line"><span>import javax.persistence.Entity;</span></span>
<span class="line"><span>import javax.persistence.FetchType;</span></span>
<span class="line"><span>import javax.persistence.GeneratedValue;</span></span>
<span class="line"><span>import javax.persistence.GenerationType;</span></span>
<span class="line"><span>import javax.persistence.Id;</span></span>
<span class="line"><span>import javax.persistence.JoinColumn;</span></span>
<span class="line"><span>import javax.persistence.JoinTable;</span></span>
<span class="line"><span>import javax.persistence.ManyToMany;</span></span>
<span class="line"><span>import javax.persistence.Table;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import lombok.Getter;</span></span>
<span class="line"><span>import lombok.Setter;</span></span>
<span class="line"><span>import lombok.ToString;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * @author pdai</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>@Getter</span></span>
<span class="line"><span>@Setter</span></span>
<span class="line"><span>@ToString</span></span>
<span class="line"><span>@Entity</span></span>
<span class="line"><span>@Table(name = &quot;tb_user&quot;)</span></span>
<span class="line"><span>public class User implements BaseEntity {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * user id.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @Id</span></span>
<span class="line"><span>    @GeneratedValue(strategy = GenerationType.IDENTITY)</span></span>
<span class="line"><span>    @Column(name = &quot;id&quot;, nullable = false)</span></span>
<span class="line"><span>    private Long id;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * username.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private String userName;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * user pwd.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private String password;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * email.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private String email;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * phoneNumber.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private long phoneNumber;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * description.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private String description;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * create date time.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private LocalDateTime createTime;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * update date time.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private LocalDateTime updateTime;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * join to role table.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @ManyToMany(cascade = {CascadeType.REFRESH}, fetch = FetchType.EAGER)</span></span>
<span class="line"><span>    @JoinTable(name = &quot;tb_user_role&quot;, joinColumns = {</span></span>
<span class="line"><span>            @JoinColumn(name = &quot;user_id&quot;)}, inverseJoinColumns = {@JoinColumn(name = &quot;role_id&quot;)})</span></span>
<span class="line"><span>    private Set&lt;Role&gt; roles;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre></div><p>Role</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>package tech.pdai.springboot.mysql57.jpa.entity;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import java.time.LocalDateTime;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import javax.persistence.Column;</span></span>
<span class="line"><span>import javax.persistence.Entity;</span></span>
<span class="line"><span>import javax.persistence.GeneratedValue;</span></span>
<span class="line"><span>import javax.persistence.GenerationType;</span></span>
<span class="line"><span>import javax.persistence.Id;</span></span>
<span class="line"><span>import javax.persistence.Table;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import lombok.Getter;</span></span>
<span class="line"><span>import lombok.Setter;</span></span>
<span class="line"><span>import lombok.ToString;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * @author pdai</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>@Getter</span></span>
<span class="line"><span>@Setter</span></span>
<span class="line"><span>@ToString</span></span>
<span class="line"><span>@Entity</span></span>
<span class="line"><span>@Table(name = &quot;tb_role&quot;)</span></span>
<span class="line"><span>public class Role implements BaseEntity {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * role id.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @Id</span></span>
<span class="line"><span>    @GeneratedValue(strategy = GenerationType.IDENTITY)</span></span>
<span class="line"><span>    @Column(name = &quot;id&quot;, nullable = false)</span></span>
<span class="line"><span>    private Long id;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * role name.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private String name;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * role key.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private String roleKey;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * description.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private String description;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * create date time.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private LocalDateTime createTime;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * update date time.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private LocalDateTime updateTime;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="dao层" tabindex="-1">DAO层 <a class="header-anchor" href="#dao层" aria-label="Permalink to &quot;DAO层&quot;">​</a></h3><p>BaseDao</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>package tech.pdai.springboot.mysql57.jpa.dao;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import java.io.Serializable;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import org.springframework.data.jpa.repository.JpaRepository;</span></span>
<span class="line"><span>import org.springframework.data.jpa.repository.JpaSpecificationExecutor;</span></span>
<span class="line"><span>import org.springframework.data.repository.NoRepositoryBean;</span></span>
<span class="line"><span>import tech.pdai.springboot.mysql57.jpa.entity.BaseEntity;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * @author pdai</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>@NoRepositoryBean</span></span>
<span class="line"><span>public interface IBaseDao&lt;T extends BaseEntity, I extends Serializable&gt;</span></span>
<span class="line"><span>        extends JpaRepository&lt;T, I&gt;, JpaSpecificationExecutor&lt;T&gt; {</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>UserDao</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>package tech.pdai.springboot.mysql57.jpa.dao;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import org.springframework.stereotype.Repository;</span></span>
<span class="line"><span>import tech.pdai.springboot.mysql57.jpa.entity.User;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * @author pdai</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>@Repository</span></span>
<span class="line"><span>public interface IUserDao extends IBaseDao&lt;User, Long&gt; {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre></div><p>RoleDao</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>package tech.pdai.springboot.mysql57.jpa.dao;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import org.springframework.stereotype.Repository;</span></span>
<span class="line"><span>import tech.pdai.springboot.mysql57.jpa.entity.Role;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * @author pdai</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>@Repository</span></span>
<span class="line"><span>public interface IRoleDao extends IBaseDao&lt;Role, Long&gt; {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="service层" tabindex="-1">Service层 <a class="header-anchor" href="#service层" aria-label="Permalink to &quot;Service层&quot;">​</a></h3><h4 id="baseservice" tabindex="-1">BaseService <a class="header-anchor" href="#baseservice" aria-label="Permalink to &quot;BaseService&quot;">​</a></h4><p>封装BaseService</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>package tech.pdai.springboot.mysql57.jpa.service;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import java.io.Serializable;</span></span>
<span class="line"><span>import java.util.List;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import org.springframework.data.domain.Page;</span></span>
<span class="line"><span>import org.springframework.data.domain.Pageable;</span></span>
<span class="line"><span>import org.springframework.data.domain.Sort;</span></span>
<span class="line"><span>import org.springframework.data.jpa.domain.Specification;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * @author pdai</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>public interface IBaseService&lt;T, I extends Serializable&gt; {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * @param id id</span></span>
<span class="line"><span>     * @return T</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    T find(I id);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * @return List</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    List&lt;T&gt; findAll();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * @param ids ids</span></span>
<span class="line"><span>     * @return List</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    List&lt;T&gt; findList(I[] ids);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * @param ids ids</span></span>
<span class="line"><span>     * @return List</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    List&lt;T&gt; findList(Iterable&lt;I&gt; ids);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * @param pageable pageable</span></span>
<span class="line"><span>     * @return Page</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    Page&lt;T&gt; findAll(Pageable pageable);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * @param spec     spec</span></span>
<span class="line"><span>     * @param pageable pageable</span></span>
<span class="line"><span>     * @return Page</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    Page&lt;T&gt; findAll(Specification&lt;T&gt; spec, Pageable pageable);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * @param spec spec</span></span>
<span class="line"><span>     * @return T</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    T findOne(Specification&lt;T&gt; spec);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * count.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @return long</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    long count();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * count.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param spec spec</span></span>
<span class="line"><span>     * @return long</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    long count(Specification&lt;T&gt; spec);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * exists.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param id id</span></span>
<span class="line"><span>     * @return boolean</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    boolean exists(I id);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * save.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param entity entity</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    void save(T entity);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * save.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param entities entities</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    void save(List&lt;T&gt; entities);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * update.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param entity entity</span></span>
<span class="line"><span>     * @return T</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    T update(T entity);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * delete.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param id id</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    void delete(I id);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * delete by ids.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param ids ids</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    void deleteByIds(List&lt;I&gt; ids);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * delete.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param entities entities</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    void delete(T[] entities);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * delete.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param entities entities</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    void delete(Iterable&lt;T&gt; entities);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * delete.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param entity entity</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    void delete(T entity);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * delete all.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    void deleteAll();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * find list.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param spec spec</span></span>
<span class="line"><span>     * @return list</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    List&lt;T&gt; findList(Specification&lt;T&gt; spec);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * find list.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param spec spec</span></span>
<span class="line"><span>     * @param sort sort</span></span>
<span class="line"><span>     * @return List</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    List&lt;T&gt; findList(Specification&lt;T&gt; spec, Sort sort);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * flush.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    void flush();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre></div><p>BaseService实现类</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>package tech.pdai.springboot.mysql57.jpa.service.impl;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import java.io.Serializable;</span></span>
<span class="line"><span>import java.util.Arrays;</span></span>
<span class="line"><span>import java.util.List;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import javax.transaction.Transactional;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import lombok.extern.slf4j.Slf4j;</span></span>
<span class="line"><span>import org.springframework.data.domain.Page;</span></span>
<span class="line"><span>import org.springframework.data.domain.Pageable;</span></span>
<span class="line"><span>import org.springframework.data.domain.Sort;</span></span>
<span class="line"><span>import org.springframework.data.jpa.domain.Specification;</span></span>
<span class="line"><span>import tech.pdai.springboot.mysql57.jpa.dao.IBaseDao;</span></span>
<span class="line"><span>import tech.pdai.springboot.mysql57.jpa.entity.BaseEntity;</span></span>
<span class="line"><span>import tech.pdai.springboot.mysql57.jpa.service.IBaseService;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * @author pdai</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>@Slf4j</span></span>
<span class="line"><span>@Transactional</span></span>
<span class="line"><span>public abstract class BaseDoServiceImpl&lt;T extends BaseEntity, I extends Serializable&gt; implements IBaseService&lt;T, I&gt; {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * @return IBaseDao</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    public abstract IBaseDao&lt;T, I&gt; getBaseDao();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * findById.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param id id</span></span>
<span class="line"><span>     * @return T</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public T find(I id) {</span></span>
<span class="line"><span>        return getBaseDao().findById(id).orElse(null);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * @return List</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public List&lt;T&gt; findAll() {</span></span>
<span class="line"><span>        return getBaseDao().findAll();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * @param ids ids</span></span>
<span class="line"><span>     * @return List</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public List&lt;T&gt; findList(I[] ids) {</span></span>
<span class="line"><span>        List&lt;I&gt; idList = Arrays.asList(ids);</span></span>
<span class="line"><span>        return getBaseDao().findAllById(idList);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * find list.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param spec spec</span></span>
<span class="line"><span>     * @return list</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public List&lt;T&gt; findList(Specification&lt;T&gt; spec) {</span></span>
<span class="line"><span>        return getBaseDao().findAll(spec);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * find list.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param spec spec</span></span>
<span class="line"><span>     * @param sort sort</span></span>
<span class="line"><span>     * @return List</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public List&lt;T&gt; findList(Specification&lt;T&gt; spec, Sort sort) {</span></span>
<span class="line"><span>        return getBaseDao().findAll(spec, sort);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * find one.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param spec spec</span></span>
<span class="line"><span>     * @return T</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public T findOne(Specification&lt;T&gt; spec) {</span></span>
<span class="line"><span>        return getBaseDao().findOne(spec).orElse(null);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * @param pageable pageable</span></span>
<span class="line"><span>     * @return Page</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public Page&lt;T&gt; findAll(Pageable pageable) {</span></span>
<span class="line"><span>        return getBaseDao().findAll(pageable);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * count.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @return long</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public long count() {</span></span>
<span class="line"><span>        return getBaseDao().count();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * count.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param spec spec</span></span>
<span class="line"><span>     * @return long</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public long count(Specification&lt;T&gt; spec) {</span></span>
<span class="line"><span>        return getBaseDao().count(spec);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * exists.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param id id</span></span>
<span class="line"><span>     * @return boolean</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public boolean exists(I id) {</span></span>
<span class="line"><span>        return getBaseDao().findById(id).isPresent();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * save.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param entity entity</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void save(T entity) {</span></span>
<span class="line"><span>        getBaseDao().save(entity);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * save.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param entities entities</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void save(List&lt;T&gt; entities) {</span></span>
<span class="line"><span>        getBaseDao().saveAll(entities);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * update.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param entity entity</span></span>
<span class="line"><span>     * @return T</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public T update(T entity) {</span></span>
<span class="line"><span>        return getBaseDao().saveAndFlush(entity);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * delete.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param id id</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void delete(I id) {</span></span>
<span class="line"><span>        getBaseDao().deleteById(id);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * delete by ids.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param ids ids</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void deleteByIds(List&lt;I&gt; ids) {</span></span>
<span class="line"><span>        getBaseDao().deleteAllById(ids);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * delete all.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void deleteAll() {</span></span>
<span class="line"><span>        getBaseDao().deleteAllInBatch();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * delete.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param entities entities</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void delete(T[] entities) {</span></span>
<span class="line"><span>        List&lt;T&gt; tList = Arrays.asList(entities);</span></span>
<span class="line"><span>        getBaseDao().deleteAll(tList);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * delete.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param entities entities</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void delete(Iterable&lt;T&gt; entities) {</span></span>
<span class="line"><span>        getBaseDao().deleteAll(entities);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * delete.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param entity entity</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void delete(T entity) {</span></span>
<span class="line"><span>        getBaseDao().delete(entity);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * @param ids ids</span></span>
<span class="line"><span>     * @return List</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public List&lt;T&gt; findList(Iterable&lt;I&gt; ids) {</span></span>
<span class="line"><span>        return getBaseDao().findAllById(ids);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * @param spec     spec</span></span>
<span class="line"><span>     * @param pageable pageable</span></span>
<span class="line"><span>     * @return Page</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public Page&lt;T&gt; findAll(Specification&lt;T&gt; spec, Pageable pageable) {</span></span>
<span class="line"><span>        return getBaseDao().findAll(spec, pageable);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * flush.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void flush() {</span></span>
<span class="line"><span>        getBaseDao().flush();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre></div><h4 id="userservice" tabindex="-1">UserService <a class="header-anchor" href="#userservice" aria-label="Permalink to &quot;UserService&quot;">​</a></h4><p>UserService接口定义</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>package tech.pdai.springboot.mysql57.jpa.service;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import org.springframework.data.domain.Page;</span></span>
<span class="line"><span>import org.springframework.data.domain.PageRequest;</span></span>
<span class="line"><span>import tech.pdai.springboot.mysql57.jpa.entity.query.UserQueryBean;</span></span>
<span class="line"><span>import tech.pdai.springboot.mysql57.jpa.entity.User;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * @author pdai</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>public interface IUserService extends IBaseService&lt;User, Long&gt; {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * find by page.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param userQueryBean query</span></span>
<span class="line"><span>     * @param pageRequest   pageRequest</span></span>
<span class="line"><span>     * @return page</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    Page&lt;User&gt; findPage(UserQueryBean userQueryBean, PageRequest pageRequest);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre></div><p>UserService实现类</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>package tech.pdai.springboot.mysql57.jpa.service.impl;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import com.github.wenhao.jpa.Specifications;</span></span>
<span class="line"><span>import org.apache.commons.lang3.StringUtils;</span></span>
<span class="line"><span>import org.springframework.data.domain.Page;</span></span>
<span class="line"><span>import org.springframework.data.domain.PageRequest;</span></span>
<span class="line"><span>import org.springframework.data.jpa.domain.Specification;</span></span>
<span class="line"><span>import org.springframework.stereotype.Service;</span></span>
<span class="line"><span>import tech.pdai.springboot.mysql57.jpa.dao.IBaseDao;</span></span>
<span class="line"><span>import tech.pdai.springboot.mysql57.jpa.dao.IUserDao;</span></span>
<span class="line"><span>import tech.pdai.springboot.mysql57.jpa.entity.User;</span></span>
<span class="line"><span>import tech.pdai.springboot.mysql57.jpa.entity.query.UserQueryBean;</span></span>
<span class="line"><span>import tech.pdai.springboot.mysql57.jpa.service.IUserService;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@Service</span></span>
<span class="line"><span>public class UserDoServiceImpl extends BaseDoServiceImpl&lt;User, Long&gt; implements IUserService {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * userDao.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private final IUserDao userDao;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * init.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param userDao2 user dao</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    public UserDoServiceImpl(final IUserDao userDao2) {</span></span>
<span class="line"><span>        this.userDao = userDao2;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * @return base dao</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public IBaseDao&lt;User, Long&gt; getBaseDao() {</span></span>
<span class="line"><span>        return this.userDao;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * find by page.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param queryBean   query</span></span>
<span class="line"><span>     * @param pageRequest pageRequest</span></span>
<span class="line"><span>     * @return page</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public Page&lt;User&gt; findPage(UserQueryBean queryBean, PageRequest pageRequest) {</span></span>
<span class="line"><span>        Specification&lt;User&gt; specification = Specifications.&lt;User&gt;and()</span></span>
<span class="line"><span>                .like(StringUtils.isNotEmpty(queryBean.getName()), &quot;user_name&quot;, queryBean.getName())</span></span>
<span class="line"><span>                .like(StringUtils.isNotEmpty(queryBean.getDescription()), &quot;description&quot;,</span></span>
<span class="line"><span>                        queryBean.getDescription())</span></span>
<span class="line"><span>                .build();</span></span>
<span class="line"><span>        return this.getBaseDao().findAll(specification, pageRequest);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre></div><h4 id="roleservice" tabindex="-1">RoleService <a class="header-anchor" href="#roleservice" aria-label="Permalink to &quot;RoleService&quot;">​</a></h4><p>RoleService接口定义</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>package tech.pdai.springboot.mysql57.jpa.service;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import org.springframework.data.domain.Page;</span></span>
<span class="line"><span>import org.springframework.data.domain.PageRequest;</span></span>
<span class="line"><span>import tech.pdai.springboot.mysql57.jpa.entity.Role;</span></span>
<span class="line"><span>import tech.pdai.springboot.mysql57.jpa.entity.query.RoleQueryBean;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>public interface IRoleService extends IBaseService&lt;Role, Long&gt; {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * find page by query.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param roleQueryBean query</span></span>
<span class="line"><span>     * @param pageRequest   pageRequest</span></span>
<span class="line"><span>     * @return page</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    Page&lt;Role&gt; findPage(RoleQueryBean roleQueryBean, PageRequest pageRequest);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre></div><p>RoleService实现类</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>package tech.pdai.springboot.mysql57.jpa.service.impl;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import com.github.wenhao.jpa.Specifications;</span></span>
<span class="line"><span>import org.apache.commons.lang3.StringUtils;</span></span>
<span class="line"><span>import org.springframework.data.domain.Page;</span></span>
<span class="line"><span>import org.springframework.data.domain.PageRequest;</span></span>
<span class="line"><span>import org.springframework.data.jpa.domain.Specification;</span></span>
<span class="line"><span>import org.springframework.stereotype.Service;</span></span>
<span class="line"><span>import tech.pdai.springboot.mysql57.jpa.dao.IBaseDao;</span></span>
<span class="line"><span>import tech.pdai.springboot.mysql57.jpa.dao.IRoleDao;</span></span>
<span class="line"><span>import tech.pdai.springboot.mysql57.jpa.entity.Role;</span></span>
<span class="line"><span>import tech.pdai.springboot.mysql57.jpa.entity.query.RoleQueryBean;</span></span>
<span class="line"><span>import tech.pdai.springboot.mysql57.jpa.service.IRoleService;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@Service</span></span>
<span class="line"><span>public class RoleDoServiceImpl extends BaseDoServiceImpl&lt;Role, Long&gt; implements IRoleService {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * roleDao.</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    private final IRoleDao roleDao;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * init.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param roleDao2 role dao</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    public RoleDoServiceImpl(final IRoleDao roleDao2) {</span></span>
<span class="line"><span>        this.roleDao = roleDao2;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * @return base dao</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public IBaseDao&lt;Role, Long&gt; getBaseDao() {</span></span>
<span class="line"><span>        return this.roleDao;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * find page by query.</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param roleQueryBean query</span></span>
<span class="line"><span>     * @param pageRequest   pageRequest</span></span>
<span class="line"><span>     * @return page</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public Page&lt;Role&gt; findPage(RoleQueryBean roleQueryBean, PageRequest pageRequest) {</span></span>
<span class="line"><span>        Specification&lt;Role&gt; specification = Specifications.&lt;Role&gt;and()</span></span>
<span class="line"><span>                .like(StringUtils.isNotEmpty(roleQueryBean.getName()), &quot;name&quot;,</span></span>
<span class="line"><span>                        roleQueryBean.getName())</span></span>
<span class="line"><span>                .like(StringUtils.isNotEmpty(roleQueryBean.getDescription()), &quot;description&quot;,</span></span>
<span class="line"><span>                        roleQueryBean.getDescription())</span></span>
<span class="line"><span>                .build();</span></span>
<span class="line"><span>        return this.roleDao.findAll(specification, pageRequest);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="controller层" tabindex="-1">Controller层 <a class="header-anchor" href="#controller层" aria-label="Permalink to &quot;Controller层&quot;">​</a></h3><p>UserController</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>package tech.pdai.springboot.mysql57.jpa.controller;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import java.time.LocalDateTime;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import io.swagger.annotations.ApiOperation;</span></span>
<span class="line"><span>import org.springframework.beans.factory.annotation.Autowired;</span></span>
<span class="line"><span>import org.springframework.data.domain.Page;</span></span>
<span class="line"><span>import org.springframework.data.domain.PageRequest;</span></span>
<span class="line"><span>import org.springframework.web.bind.annotation.GetMapping;</span></span>
<span class="line"><span>import org.springframework.web.bind.annotation.PathVariable;</span></span>
<span class="line"><span>import org.springframework.web.bind.annotation.PostMapping;</span></span>
<span class="line"><span>import org.springframework.web.bind.annotation.RequestMapping;</span></span>
<span class="line"><span>import org.springframework.web.bind.annotation.RequestParam;</span></span>
<span class="line"><span>import org.springframework.web.bind.annotation.RestController;</span></span>
<span class="line"><span>import tech.pdai.springboot.mysql57.jpa.entity.User;</span></span>
<span class="line"><span>import tech.pdai.springboot.mysql57.jpa.entity.query.UserQueryBean;</span></span>
<span class="line"><span>import tech.pdai.springboot.mysql57.jpa.entity.response.ResponseResult;</span></span>
<span class="line"><span>import tech.pdai.springboot.mysql57.jpa.service.IUserService;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * @author pdai</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>@RestController</span></span>
<span class="line"><span>@RequestMapping(&quot;/user&quot;)</span></span>
<span class="line"><span>public class UserController {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Autowired</span></span>
<span class="line"><span>    private IUserService userService;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * @param user user param</span></span>
<span class="line"><span>     * @return user</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @ApiOperation(&quot;Add/Edit User&quot;)</span></span>
<span class="line"><span>    @PostMapping(&quot;add&quot;)</span></span>
<span class="line"><span>    public ResponseResult&lt;User&gt; add(User user) {</span></span>
<span class="line"><span>        if (user.getId()==null || !userService.exists(user.getId())) {</span></span>
<span class="line"><span>            user.setCreateTime(LocalDateTime.now());</span></span>
<span class="line"><span>            user.setUpdateTime(LocalDateTime.now());</span></span>
<span class="line"><span>            userService.save(user);</span></span>
<span class="line"><span>        } else {</span></span>
<span class="line"><span>            user.setUpdateTime(LocalDateTime.now());</span></span>
<span class="line"><span>            userService.update(user);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        return ResponseResult.success(userService.find(user.getId()));</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * @return user list</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @ApiOperation(&quot;Query User One&quot;)</span></span>
<span class="line"><span>    @GetMapping(&quot;edit/{userId}&quot;)</span></span>
<span class="line"><span>    public ResponseResult&lt;User&gt; edit(@PathVariable(&quot;userId&quot;) Long userId) {</span></span>
<span class="line"><span>        return ResponseResult.success(userService.find(userId));</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * @return user list</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    @ApiOperation(&quot;Query User Page&quot;)</span></span>
<span class="line"><span>    @GetMapping(&quot;list&quot;)</span></span>
<span class="line"><span>    public ResponseResult&lt;Page&lt;User&gt;&gt; list(@RequestParam int pageSize, @RequestParam int pageNumber) {</span></span>
<span class="line"><span>        return ResponseResult.success(userService.findPage(UserQueryBean.builder().build(), PageRequest.of(pageNumber, pageSize)));</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="运行测试" tabindex="-1">运行测试 <a class="header-anchor" href="#运行测试" aria-label="Permalink to &quot;运行测试&quot;">​</a></h3><p>查询一个</p><p><img src="`+l+'" alt="error.图片加载失败"></p><p>查询分页列表</p><p><img src="'+i+'" alt="error.图片加载失败"></p><h2 id="示例源码" tabindex="-1">示例源码 <a class="header-anchor" href="#示例源码" aria-label="Permalink to &quot;示例源码&quot;">​</a></h2><p><a href="https://github.com/realpdai/tech-pdai-spring-demos" target="_blank" rel="noreferrer">https://github.com/realpdai/tech-pdai-spring-demos</a></p><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>',61)]))}const h=n(t,[["render",c]]);export{b as __pageData,h as default};
