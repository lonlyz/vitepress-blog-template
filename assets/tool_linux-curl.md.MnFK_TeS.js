import{_ as s,c as n,ai as e,o as p}from"./chunks/framework.BrYByd3F.js";const d=JSON.parse('{"title":"Linux - Curl使用","description":"","frontmatter":{},"headers":[],"relativePath":"tool/linux-curl.md","filePath":"tool/linux-curl.md","lastUpdated":1737706346000}'),t={name:"tool/linux-curl.md"};function l(i,a,c,o,h,r){return p(),n("div",null,a[0]||(a[0]=[e(`<h1 id="linux-curl使用" tabindex="-1">Linux - Curl使用 <a class="header-anchor" href="#linux-curl使用" aria-label="Permalink to &quot;Linux - Curl使用&quot;">​</a></h1><blockquote><p>主要总结Linux Curl的一些常见用法。@pdai</p></blockquote><h2 id="linux-curl使用-1" tabindex="-1">Linux Curl使用 <a class="header-anchor" href="#linux-curl使用-1" aria-label="Permalink to &quot;Linux Curl使用&quot;">​</a></h2><h3 id="下载单个文件" tabindex="-1">下载单个文件 <a class="header-anchor" href="#下载单个文件" aria-label="Permalink to &quot;下载单个文件&quot;">​</a></h3><p>默认将输出打印到标准输出中(STDOUT)中</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>curl http://www.centos.org</span></span></code></pre></div><p>通过-o/-O选项保存下载的文件到指定的文件中: -o: 将文件保存为命令行中指定的文件名的文件中 -O: 使用URL中默认的文件名保存文件到本地</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 将文件下载到本地并命名为mygettext.html</span></span>
<span class="line"><span>curl -o mygettext.html http://www.gnu.org/software/gettext/manual/gettext.html</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 将文件保存到本地并命名为gettext.html</span></span>
<span class="line"><span>curl -O http://www.gnu.org/software/gettext/manual/gettext.html</span></span></code></pre></div><p>同样可以使用转向字符&quot;&gt;&quot;对输出进行转向输出</p><h3 id="同时获取多个文件" tabindex="-1">同时获取多个文件 <a class="header-anchor" href="#同时获取多个文件" aria-label="Permalink to &quot;同时获取多个文件&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>curl -O URL1 -O URL2</span></span></code></pre></div><p>若同时从同一站点下载多个文件时，curl会尝试重用链接(connection)。</p><h3 id="通过-l选项进行重定向" tabindex="-1">通过-L选项进行重定向 <a class="header-anchor" href="#通过-l选项进行重定向" aria-label="Permalink to &quot;通过-L选项进行重定向&quot;">​</a></h3><p>默认情况下CURL不会发送HTTP Location headers(重定向).当一个被请求页面移动到另一个站点时，会发送一个HTTP Loaction header作为请求，然后将请求重定向到新的地址上。 例如: 访问google.com时，会自动将地址重定向到google.com.hk上。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>curl http://www.google.com</span></span>
<span class="line"><span> &lt;HTML&gt;</span></span>
<span class="line"><span> &lt;HEAD&gt;</span></span>
<span class="line"><span>     &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;</span></span>
<span class="line"><span>     &lt;TITLE&gt;302 Moved&lt;/TITLE&gt;</span></span>
<span class="line"><span> &lt;/HEAD&gt;</span></span>
<span class="line"><span> &lt;BODY&gt;</span></span>
<span class="line"><span>     &lt;H1&gt;302 Moved&lt;/H1&gt;</span></span>
<span class="line"><span>     The document has moved</span></span>
<span class="line"><span>     &lt;A HREF=&quot;http://www.google.com.hk/url?sa=p&amp;hl=zh-CN&amp;pref=hkredirect&amp;pval=yes&amp;q=http://www.google.com.hk/&amp;ust=1379402837567135amp;usg=AFQjCNF3o7umf3jyJpNDPuF7KTibavE4aA&quot;&gt;here&lt;/A&gt;.</span></span>
<span class="line"><span>&lt;/BODY&gt;</span></span>
<span class="line"><span>&lt;/HTML&gt;</span></span></code></pre></div><p>上述输出说明所请求的档案被转移到了<a href="http://www.google.com.hk" target="_blank" rel="noreferrer">http://www.google.com.hk</a>。</p><p>这是可以通过使用-L选项进行强制重定向</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 让curl使用地址重定向，此时会查询google.com.hk站点</span></span>
<span class="line"><span>curl -L http://www.google.com</span></span></code></pre></div><h3 id="断点续传" tabindex="-1">断点续传 <a class="header-anchor" href="#断点续传" aria-label="Permalink to &quot;断点续传&quot;">​</a></h3><p>通过使用-C选项可对大文件使用断点续传功能，如:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 当文件在下载完成之前结束该进程</span></span>
<span class="line"><span>$ curl -O http://www.gnu.org/software/gettext/manual/gettext.html</span></span>
<span class="line"><span>#############             20.1%</span></span>
<span class="line"><span># 通过添加-C选项继续对该文件进行下载，已经下载过的文件不会被重新下载</span></span>
<span class="line"><span>curl -C - -O http://www.gnu.org/software/gettext/manual/gettext.html</span></span>
<span class="line"><span>##############            21.1%</span></span></code></pre></div><h3 id="对curl使用网络限速" tabindex="-1">对CURL使用网络限速 <a class="header-anchor" href="#对curl使用网络限速" aria-label="Permalink to &quot;对CURL使用网络限速&quot;">​</a></h3><p>通过--limit-rate选项对CURL的最大网络使用进行限制</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 下载速度最大不会超过1000B/second</span></span>
<span class="line"><span>curl --limit-rate 1000B -O http://www.gnu.org/software/gettext/manual/gettext.html</span></span></code></pre></div><h3 id="下载指定时间内修改过的文件" tabindex="-1">下载指定时间内修改过的文件 <a class="header-anchor" href="#下载指定时间内修改过的文件" aria-label="Permalink to &quot;下载指定时间内修改过的文件&quot;">​</a></h3><p>当下载一个文件时，可对该文件的最后修改日期进行判断，如果该文件在指定日期内修改过，就进行下载，否则不下载。 该功能可通过使用-z选项来实现:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 若yy.html文件在2011/12/21之后有过更新才会进行下载</span></span>
<span class="line"><span>curl -z 21-Dec-11 http://www.example.com/yy.html</span></span></code></pre></div><h3 id="curl授权" tabindex="-1">CURL授权 <a class="header-anchor" href="#curl授权" aria-label="Permalink to &quot;CURL授权&quot;">​</a></h3><p>在访问需要授权的页面时，可通过-u选项提供用户名和密码进行授权</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>curl -u username:password URL</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 通常的做法是在命令行只输入用户名，之后会提示输入密码，这样可以保证在查看历史记录时不会将密码泄露</span></span>
<span class="line"><span>curl -u username URL</span></span></code></pre></div><h3 id="从ftp服务器下载文件" tabindex="-1">从FTP服务器下载文件 <a class="header-anchor" href="#从ftp服务器下载文件" aria-label="Permalink to &quot;从FTP服务器下载文件&quot;">​</a></h3><p>CURL同样支持FTP下载，若在url中指定的是某个文件路径而非具体的某个要下载的文件名，CURL则会列出该目录下的所有文件名而并非下载该目录下的所有文件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 列出public_html下的所有文件夹和文件</span></span>
<span class="line"><span>curl -u ftpuser:ftppass -O ftp://ftp_server/public_html/</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 下载xss.php文件</span></span>
<span class="line"><span>curl -u ftpuser:ftppass -O ftp://ftp_server/public_html/xss.php</span></span></code></pre></div><h3 id="上传文件到ftp服务器" tabindex="-1">上传文件到FTP服务器 <a class="header-anchor" href="#上传文件到ftp服务器" aria-label="Permalink to &quot;上传文件到FTP服务器&quot;">​</a></h3><p>通过 -T 选项可将指定的本地文件上传到FTP服务器上 复制代码</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 将myfile.txt文件上传到服务器</span></span>
<span class="line"><span>curl -u ftpuser:ftppass -T myfile.txt ftp://ftp.testserver.com</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 同时上传多个文件</span></span>
<span class="line"><span>curl -u ftpuser:ftppass -T &quot;{file1,file2}&quot; ftp://ftp.testserver.com</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 从标准输入获取内容保存到服务器指定的文件中</span></span>
<span class="line"><span>curl -u ftpuser:ftppass -T - ftp://ftp.testserver.com/myfile_1.txt</span></span></code></pre></div><h3 id="获取更多信息" tabindex="-1">获取更多信息 <a class="header-anchor" href="#获取更多信息" aria-label="Permalink to &quot;获取更多信息&quot;">​</a></h3><p>通过使用 -v 和 -trace获取更多的链接信息</p><p>通过字典查询单词</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1 # 查询bash单词的含义</span></span>
<span class="line"><span>2 curl dict://dict.org/d:bash</span></span>
<span class="line"><span>3 </span></span>
<span class="line"><span>4 # 列出所有可用词典</span></span>
<span class="line"><span>5 curl dict://dict.org/show:db</span></span>
<span class="line"><span>6 </span></span>
<span class="line"><span>7 # 在foldoc词典中查询bash单词的含义</span></span>
<span class="line"><span>8 curl dict://dict.org/d:bash:foldoc</span></span></code></pre></div><h3 id="为curl设置代理" tabindex="-1">为CURL设置代理 <a class="header-anchor" href="#为curl设置代理" aria-label="Permalink to &quot;为CURL设置代理&quot;">​</a></h3><p>-x 选项可以为CURL添加代理功能</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1 # 指定代理主机和端口</span></span>
<span class="line"><span>2 curl -x proxysever.test.com:3128 http://google.co.in</span></span></code></pre></div><h3 id="保存与使用网站cookie信息" tabindex="-1">保存与使用网站cookie信息 <a class="header-anchor" href="#保存与使用网站cookie信息" aria-label="Permalink to &quot;保存与使用网站cookie信息&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1 # 将网站的cookies信息保存到sugarcookies文件中</span></span>
<span class="line"><span>2 curl -D sugarcookies http://localhost/sugarcrm/index.php</span></span>
<span class="line"><span>3 </span></span>
<span class="line"><span>4 # 使用上次保存的cookie信息</span></span>
<span class="line"><span>5 curl -b sugarcookies http://localhost/sugarcrm/index.php</span></span></code></pre></div><h3 id="传递请求数据" tabindex="-1">传递请求数据 <a class="header-anchor" href="#传递请求数据" aria-label="Permalink to &quot;传递请求数据&quot;">​</a></h3><p>默认curl使用GET方式请求数据，这种方式下直接通过URL传递数据 可以通过 --data/-d 方式指定使用POST方式传递数据</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1 # GET</span></span>
<span class="line"><span>2 curl -u username https://api.github.com/user?access_token=XXXXXXXXXX</span></span>
<span class="line"><span>3 </span></span>
<span class="line"><span>4 # POST</span></span>
<span class="line"><span>5 curl -u username --data &quot;param1=value1&amp;param2=value&quot; https://api.github.com</span></span>
<span class="line"><span>6 </span></span>
<span class="line"><span>7 # 也可以指定一个文件，将该文件中的内容当作数据传递给服务器端</span></span>
<span class="line"><span>8 curl --data @filename https://github.api.com/authorizations</span></span></code></pre></div><p>注: 默认情况下，通过POST方式传递过去的数据中若有特殊字符，首先需要将特殊字符转义在传递给服务器端，如value值中包含有空格，则需要先将空格转换成%20，如:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1 curl -d &quot;value%201&quot; http://hostname.com</span></span></code></pre></div><p>在新版本的CURL中，提供了新的选项 --data-urlencode，通过该选项提供的参数会自动转义特殊字符。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1 curl --data-urlencode &quot;value 1&quot; http://hostname.com</span></span></code></pre></div><p>除了使用GET和POST协议外，还可以通过 -X 选项指定其它协议，如:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1 curl -I -X DELETE https://api.github.cim</span></span></code></pre></div><h3 id="上传文件" tabindex="-1">上传文件 <a class="header-anchor" href="#上传文件" aria-label="Permalink to &quot;上传文件&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1 curl --form &quot;fileupload=@filename.txt&quot; http://hostname/resource</span></span></code></pre></div><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="http://www.thegeekstuff.com/2012/04/curl-examples/" target="_blank" rel="noreferrer">http://www.thegeekstuff.com/2012/04/curl-examples/</a></li><li><a href="http://www.cnblogs.com/gbyukg/p/3326825.html" target="_blank" rel="noreferrer">http://www.cnblogs.com/gbyukg/p/3326825.html</a></li></ul><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>`,59)]))}const g=s(t,[["render",l]]);export{d as __pageData,g as default};
