import{_ as s,a as e}from"./chunks/git-five-states.B5qV1GuN.js";import{_ as t,c as i,ai as n,o as l}from"./chunks/framework.BrYByd3F.js";const p="/vitepress-blog-template/images/tool-git-learn-1.png",v=JSON.parse('{"title":"工具详解 - Git 详解","description":"","frontmatter":{},"headers":[],"relativePath":"tool/tool-git.md","filePath":"tool/tool-git.md","lastUpdated":1737706346000}'),o={name:"tool/tool-git.md"};function c(r,a,d,h,g,u){return l(),i("div",null,a[0]||(a[0]=[n('<h1 id="工具详解-git-详解" tabindex="-1">工具详解 - Git 详解 <a class="header-anchor" href="#工具详解-git-详解" aria-label="Permalink to &quot;工具详解 - Git 详解&quot;">​</a></h1><blockquote><p>Git是分布式代码托管的标杆，这里将提供如何学习Git，以及Git工作流的总结，和常用的操作命令。 @pdai</p></blockquote><h2 id="必读" tabindex="-1">必读 <a class="header-anchor" href="#必读" aria-label="Permalink to &quot;必读&quot;">​</a></h2><blockquote><p>如果要问一本就可以学习Git的书或者文章，毫无疑问我会推荐Git Pro2，绝对是良心之作啊</p></blockquote><ul><li><p><strong>Git Pro 2</strong></p><ul><li><a href="https://github.com/progit/progit2" target="_blank" rel="noreferrer">Git Pro2英文Github仓库在新窗口打开</a></li><li><a href="https://bingohuang.gitbooks.io/progit2/content/01-introduction/sections/about-version-control.html" target="_blank" rel="noreferrer">Git Pro2中文Gitbook在新窗口打开</a></li><li><a href="https://github.com/bingohuang/progit2-gitbook" target="_blank" rel="noreferrer">Git Pro2对应的中文Markdown版本的仓库地址在新窗口打开</a></li><li><a href="http://git.oschina.net/progit/index.html" target="_blank" rel="noreferrer">Git Pro中文阅读在新窗口打开</a></li></ul></li><li><p><strong>其它资料</strong></p><ul><li><a href="http://imtuzi.com/post/most-used-git-cmd.html" target="_blank" rel="noreferrer">99%的时间在使用的Git命令在新窗口打开</a></li><li><a href="https://www.jianshu.com/p/cbd8cf5e232d" target="_blank" rel="noreferrer">GIT分支开发模型规范在新窗口打开</a></li><li><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="noreferrer">Git - 简明指南在新窗口打开</a></li><li><a href="http://marklodato.github.io/visual-git-guide/index-zh-cn.html" target="_blank" rel="noreferrer">图解 Git在新窗口打开</a></li><li><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noreferrer">廖雪峰 : Git 教程在新窗口打开</a></li><li><a href="https://learngitbranching.js.org/" target="_blank" rel="noreferrer">Learn Git Branching在新窗口打开</a></li></ul></li><li><p><strong>在线学习</strong></p><ul><li>有个很好的在线学习网站，推荐给大家： <a href="https://learngitbranching.js.org/" target="_blank" rel="noreferrer">https://learngitbranching.js.org/在新窗口打开</a><img src="'+p+'" alt="error.图片加载失败"></li></ul></li></ul><h2 id="常用小结" tabindex="-1">常用小结 <a class="header-anchor" href="#常用小结" aria-label="Permalink to &quot;常用小结&quot;">​</a></h2><blockquote><p>读完Git Pro2, 大部分功能适合在使用的时候作为工具来参考，最需要理解的是常用的命令对应的workflow，以及分支管理和合并操作。</p></blockquote><h3 id="git操作流程" tabindex="-1">Git操作流程 <a class="header-anchor" href="#git操作流程" aria-label="Permalink to &quot;Git操作流程&quot;">​</a></h3><h4 id="代码提交和同步代码" tabindex="-1">代码提交和同步代码 <a class="header-anchor" href="#代码提交和同步代码" aria-label="Permalink to &quot;代码提交和同步代码&quot;">​</a></h4><p><img src="'+s+'" alt="error.图片加载失败"></p><h4 id="代码撤销和撤销同步" tabindex="-1">代码撤销和撤销同步 <a class="header-anchor" href="#代码撤销和撤销同步" aria-label="Permalink to &quot;代码撤销和撤销同步&quot;">​</a></h4><p><img src="'+e+`" alt="error.图片加载失败"></p><h3 id="git常用操作命令-代码提交和同步代码" tabindex="-1">Git常用操作命令 - 代码提交和同步代码 <a class="header-anchor" href="#git常用操作命令-代码提交和同步代码" aria-label="Permalink to &quot;Git常用操作命令 - 代码提交和同步代码&quot;">​</a></h3><ul><li>第零步: 工作区与仓库保持一致</li><li>第一步: 文件增删改，变为已修改状态</li><li>第二步: git add ，变为已暂存状态</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git status</span></span>
<span class="line"><span>$ git add --all # 当前项目下的所有更改</span></span>
<span class="line"><span>$ git add .  # 当前目录下的所有更改</span></span>
<span class="line"><span>$ git add xx/xx.py xx/xx2.py  # 添加某几个文件</span></span></code></pre></div><ul><li>第三步: git commit，变为已提交状态</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git commit -m&quot;&lt;这里写commit的描述&gt;&quot;</span></span></code></pre></div><ul><li>第四步: git push，变为已推送状态</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git push -u origin master # 第一次需要关联上</span></span>
<span class="line"><span>$ git push # 之后再推送就不用指明应该推送的远程分支了</span></span>
<span class="line"><span>$ git branch # 可以查看本地仓库的分支</span></span>
<span class="line"><span>$ git branch -a # 可以查看本地仓库和本地远程仓库(远程仓库的本地镜像)的所有分支</span></span></code></pre></div><blockquote><p>在某个分支下，我最常用的操作如下</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git status</span></span>
<span class="line"><span>$ git add -a</span></span>
<span class="line"><span>$ git status</span></span>
<span class="line"><span>$ git commit -m &#39;xxx&#39;</span></span>
<span class="line"><span>$ git pull --rebase</span></span>
<span class="line"><span>$ git push origin xxbranch</span></span></code></pre></div><h3 id="git常用操作命令-代码撤销和撤销同步" tabindex="-1">Git常用操作命令 - 代码撤销和撤销同步 <a class="header-anchor" href="#git常用操作命令-代码撤销和撤销同步" aria-label="Permalink to &quot;Git常用操作命令 - 代码撤销和撤销同步&quot;">​</a></h3><h4 id="已修改-但未暂存" tabindex="-1">已修改，但未暂存 <a class="header-anchor" href="#已修改-但未暂存" aria-label="Permalink to &quot;已修改，但未暂存&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git diff # 列出所有的修改</span></span>
<span class="line"><span>$ git diff xx/xx.py xx/xx2.py # 列出某(几)个文件的修改</span></span>
<span class="line"><span></span></span>
<span class="line"><span>$ git checkout # 撤销项目下所有的修改</span></span>
<span class="line"><span>$ git checkout . # 撤销当前文件夹下所有的修改</span></span>
<span class="line"><span>$ git checkout xx/xx.py xx/xx2.py # 撤销某几个文件的修改</span></span>
<span class="line"><span>$ git clean -f # untracked状态，撤销新增的文件</span></span>
<span class="line"><span>$ git clean -df # untracked状态，撤销新增的文件和文件夹</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Untracked files:</span></span>
<span class="line"><span>#  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span></span>
<span class="line"><span>#</span></span>
<span class="line"><span>#	xxx.py</span></span></code></pre></div><h4 id="已暂存-未提交" tabindex="-1">已暂存，未提交 <a class="header-anchor" href="#已暂存-未提交" aria-label="Permalink to &quot;已暂存，未提交&quot;">​</a></h4><blockquote><p>这个时候已经执行过git add，但未执行git commit，但是用git diff已经看不到任何修改。 因为git diff检查的是工作区与暂存区之间的差异。</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git diff --cached # 这个命令显示暂存区和本地仓库的差异</span></span>
<span class="line"><span></span></span>
<span class="line"><span>$ git reset # 暂存区的修改恢复到工作区</span></span>
<span class="line"><span>$ git reset --soft # 与git reset等价，回到已修改状态，修改的内容仍然在工作区中</span></span>
<span class="line"><span>$ git reset --hard # 回到未修改状态，清空暂存区和工作区</span></span></code></pre></div><blockquote><p>git reset --hard 操作等价于 git reset 和 git checkout 2步操作</p></blockquote><h4 id="已提交-未推送" tabindex="-1">已提交，未推送 <a class="header-anchor" href="#已提交-未推送" aria-label="Permalink to &quot;已提交，未推送&quot;">​</a></h4><blockquote><p>执行完commit之后，会在仓库中生成一个版本号(hash值)，标志这次提交。之后任何时候，都可以借助这个hash值回退到这次提交。</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git diff &lt;branch-name1&gt; &lt;branch-name2&gt; # 比较2个分支之间的差异</span></span>
<span class="line"><span>$ git diff master origin/master # 查看本地仓库与本地远程仓库的差异</span></span>
<span class="line"><span></span></span>
<span class="line"><span>$ git reset --hard origin/master # 回退与本地远程仓库一致</span></span>
<span class="line"><span>$ git reset --hard HEAD^ # 回退到本地仓库上一个版本</span></span>
<span class="line"><span>$ git reset --hard &lt;hash code&gt; # 回退到任意版本</span></span>
<span class="line"><span>$ git reset --soft/git reset # 回退且回到已修改状态，修改仍保留在工作区中。</span></span></code></pre></div><h4 id="已推送到远程" tabindex="-1">已推送到远程 <a class="header-anchor" href="#已推送到远程" aria-label="Permalink to &quot;已推送到远程&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git push -f orgin master # 强制覆盖远程分支</span></span>
<span class="line"><span>$ git push -f # 如果之前已经用 -u 关联过，则可省略分支名</span></span></code></pre></div><blockquote><p>慎用，一般情况下，本地分支比远程要新，所以可以直接推送到远程，但有时推送到远程后发现有问题，进行了版本回退，旧版本或者分叉版本推送到远程，需要添加 -f参数，表示强制覆盖。</p></blockquote><h3 id="git常用操作命令-其它常用命令" tabindex="-1">Git常用操作命令 - 其它常用命令 <a class="header-anchor" href="#git常用操作命令-其它常用命令" aria-label="Permalink to &quot;Git常用操作命令 - 其它常用命令&quot;">​</a></h3><h4 id="关联远程仓库" tabindex="-1">关联远程仓库 <a class="header-anchor" href="#关联远程仓库" aria-label="Permalink to &quot;关联远程仓库&quot;">​</a></h4><ul><li>如果还没有Git仓库，你需要</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git init</span></span></code></pre></div><ul><li>如果你想关联远程仓库</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git remote add &lt;name&gt; &lt;git-repo-url&gt;</span></span>
<span class="line"><span># 例如 git remote add origin https://github.com/xxxxxx # 是远程仓库的名称，通常为 origin</span></span></code></pre></div><ul><li>如果你想关联多个远程仓库</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git remote add &lt;name&gt; &lt;another-git-repo-url&gt;</span></span>
<span class="line"><span># 例如 git remote add coding https://coding.net/xxxxxx</span></span></code></pre></div><ul><li>忘了关联了哪些仓库或者地址</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git remote -v</span></span>
<span class="line"><span># origin https://github.com/gzdaijie/koa-react-server-render-blog.git (fetch)</span></span>
<span class="line"><span># origin https://github.com/gzdaijie/koa-react-server-render-blog.git (push)</span></span></code></pre></div><ul><li>如果远程有仓库，你需要clone到本地</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git clone &lt;git-repo-url&gt;</span></span>
<span class="line"><span># 关联的远程仓库将被命名为origin，这是默认的。</span></span></code></pre></div><ul><li>如果你想把别人仓库的地址改为自己的</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git remote set-url origin &lt;your-git-url&gt;</span></span></code></pre></div><h4 id="切换分支" tabindex="-1">切换分支 <a class="header-anchor" href="#切换分支" aria-label="Permalink to &quot;切换分支&quot;">​</a></h4><blockquote><p>新建仓库后，默认生成了master分支</p></blockquote><ul><li>如果你想新建分支并切换</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git checkout -b &lt;new-branch-name&gt;</span></span>
<span class="line"><span># 例如 git checkout -b dev</span></span>
<span class="line"><span># 如果仅新建，不切换，则去掉参数 -b</span></span></code></pre></div><ul><li>看看当前有哪些分支</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git branch</span></span>
<span class="line"><span># * dev</span></span>
<span class="line"><span>#   master # 标*号的代表当前所在的分支</span></span></code></pre></div><ul><li>看看当前本地&amp;远程有哪些分支</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git branch -a</span></span>
<span class="line"><span># * dev</span></span>
<span class="line"><span>#   master</span></span>
<span class="line"><span>#   remotes/origin/master</span></span></code></pre></div><ul><li>切换到现有的分支</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git checkout master</span></span></code></pre></div><ul><li>你想把dev分支合并到master分支</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git merge &lt;branch-name&gt;</span></span>
<span class="line"><span># 例如 git merge dev</span></span></code></pre></div><ul><li>你想把本地master分支推送到远程去</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git push origin master</span></span>
<span class="line"><span># 你可以使用git push -u origin master将本地分支与远程分支关联，之后仅需要使用git push即可。</span></span></code></pre></div><ul><li>远程分支被别人更新了，你需要更新代码</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git pull origin &lt;branch-name&gt;</span></span>
<span class="line"><span># 之前如果push时使用过-u，那么就可以省略为git pull</span></span></code></pre></div><ul><li>本地有修改，能不能先git pull</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git stash # 工作区修改暂存</span></span>
<span class="line"><span>$ git pull  # 更新分支</span></span>
<span class="line"><span>$ git stash pop # 暂存修改恢复到工作区</span></span></code></pre></div><h4 id="撤销操作" tabindex="-1">撤销操作 <a class="header-anchor" href="#撤销操作" aria-label="Permalink to &quot;撤销操作&quot;">​</a></h4><ul><li>恢复暂存区文件到工作区</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git checkout &lt;file-name&gt;</span></span></code></pre></div><ul><li>恢复暂存区的所有文件到工作区</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git checkout .</span></span></code></pre></div><ul><li>重置暂存区的某文件，与上一次commit保持一致，但工作区不变</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git reset &lt;file-name&gt;</span></span></code></pre></div><ul><li>重置暂存区与工作区，与上一次commit保持一致</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git reset --hard &lt;file-name&gt;</span></span>
<span class="line"><span># 如果是回退版本(commit)，那么file，变成commit的hash码就好了。</span></span></code></pre></div><ul><li>去掉某个commit</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git revert &lt;commit-hash&gt;</span></span>
<span class="line"><span># 实质是新建了一个与原来完全相反的commit，抵消了原来commit的效果</span></span></code></pre></div><ul><li>reset回退错误恢复</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git reflog #查看最近操作记录</span></span>
<span class="line"><span>$ git reset --hard HEAD{5} #恢复到前五笔操作</span></span>
<span class="line"><span>$ git pull origin backend-log #再次拉取代码</span></span></code></pre></div><h4 id="版本回退与前进" tabindex="-1">版本回退与前进 <a class="header-anchor" href="#版本回退与前进" aria-label="Permalink to &quot;版本回退与前进&quot;">​</a></h4><ul><li>查看历史版本</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git log</span></span></code></pre></div><ul><li>你可能觉得这样的log不好看，试试这个</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git log --graph --decorate --abbrev-commit --all</span></span></code></pre></div><ul><li>检出到任意版本</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git checkout a5d88ea</span></span>
<span class="line"><span># hash码很长，通常6-7位就够了</span></span></code></pre></div><ul><li>远程仓库的版本很新，但是你还是想用老版本覆盖</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git push origin master --force</span></span>
<span class="line"><span># 或者 git push -f origin master</span></span></code></pre></div><ul><li>觉得commit太多了? 多个commit合并为1个</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git rebase -i HEAD~4</span></span>
<span class="line"><span># 这个命令，将最近4个commit合并为1个，HEAD代表当前版本。将进入VIM界面，你可以修改提交信息。推送到远程分支的commit，不建议这样做，多人合作时，通常不建议修改历史。</span></span></code></pre></div><ul><li>想回退到某一个版本</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git reset --hard &lt;hash&gt;</span></span>
<span class="line"><span># 例如 git reset --hard a3hd73r</span></span>
<span class="line"><span># --hard代表丢弃工作区的修改，让工作区与版本代码一模一样，与之对应，--soft参数代表保留工作区的修改。</span></span></code></pre></div><ul><li>想回退到上一个版本，有没有简便方法?</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git reset --hard HEAD^</span></span></code></pre></div><ul><li>回退到上上个版本呢?</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git reset --hard HEAD^^</span></span>
<span class="line"><span># HEAD^^可以换作具体版本hash值。</span></span></code></pre></div><ul><li>回退错了，能不能前进呀</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git reflog</span></span>
<span class="line"><span># 这个命令保留了最近执行的操作及所处的版本，每条命令前的hash值，则是对应版本的hash值。使用上述的git checkout 或者 git reset命令 则可以检出或回退到对应版本。</span></span></code></pre></div><ul><li>刚才commit信息写错了，可以修改吗</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git commit --amend</span></span></code></pre></div><ul><li>看看当前状态吧</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git status</span></span></code></pre></div><h4 id="配置属于你的git" tabindex="-1">配置属于你的Git <a class="header-anchor" href="#配置属于你的git" aria-label="Permalink to &quot;配置属于你的Git&quot;">​</a></h4><ul><li>看看当前的配置</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git config --list</span></span></code></pre></div><ul><li>估计你需要配置你的名字</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git config --global user.name &quot;&lt;name&gt;&quot;</span></span>
<span class="line"><span>#  --global为可选参数，该参数表示配置全局信息</span></span></code></pre></div><ul><li>希望别人看到你的commit可以联系到你</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git config --global user.email &quot;&lt;email address&gt;&quot;</span></span></code></pre></div><ul><li>有些命令很长，能不能简化一下</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ git config --global alias.logg &quot;log --graph --decorate --abbrev-commit --all&quot;</span></span>
<span class="line"><span># 之后就可以开心地使用 git log了</span></span></code></pre></div><h2 id="gitignore" tabindex="-1">gitignore <a class="header-anchor" href="#gitignore" aria-label="Permalink to &quot;gitignore&quot;">​</a></h2><p><a href="https://www.jianshu.com/p/74bd0ceb6182" target="_blank" rel="noreferrer">Git 忽略提交 .gitignore在新窗口打开</a></p><h2 id="使用gource生成版本记录视频" tabindex="-1">使用Gource生成版本记录视频 <a class="header-anchor" href="#使用gource生成版本记录视频" aria-label="Permalink to &quot;使用Gource生成版本记录视频&quot;">​</a></h2><ul><li><p>工具下载<a href="https://www.cr173.com/soft/761328.html" target="_blank" rel="noreferrer">https://www.cr173.com/soft/761328.html</a></p></li><li><p>官网 <a href="https://github.com/acaudwell/Gource" target="_blank" rel="noreferrer">https://github.com/acaudwell/Gource</a></p></li><li><p>官网 - 转成视频 <a href="https://github.com/acaudwell/Gource/wiki/Videos" target="_blank" rel="noreferrer">https://github.com/acaudwell/Gource/wiki/Videos</a></p></li><li><p>视频预览 <a href="http://www.365yg.com/i6595151386688619022/#mid=1592562064545805" target="_blank" rel="noreferrer">http://www.365yg.com/i6595151386688619022/#mid=1592562064545805</a></p></li></ul><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>`,116)]))}const k=t(o,[["render",c]]);export{v as __pageData,k as default};
