import{_ as a}from"./chunks/maven_1.EzEll9Ae.js";import{_ as n,c as p,ai as e,o as l}from"./chunks/framework.BrYByd3F.js";const t="/vitepress-blog-template/images/maven_0.jpg",i="/vitepress-blog-template/images/maven_2.jpg",c="/vitepress-blog-template/images/maven_3.jpg",o="/vitepress-blog-template/images/maven_4.jpg",r="/vitepress-blog-template/images/maven_5.jpg",k=JSON.parse('{"title":"工具详解 - Maven项目构建","description":"","frontmatter":{},"headers":[],"relativePath":"tool/tool-maven.md","filePath":"tool/tool-maven.md","lastUpdated":1737706346000}'),g={name:"tool/tool-maven.md"};function m(u,s,h,d,v,f){return l(),p("div",null,s[0]||(s[0]=[e('<h1 id="工具详解-maven项目构建" tabindex="-1">工具详解 - Maven项目构建 <a class="header-anchor" href="#工具详解-maven项目构建" aria-label="Permalink to &quot;工具详解 - Maven项目构建&quot;">​</a></h1><blockquote><p>在Java开发中，常用构建工具ant,maven和gradle, 其中maven相对主流；本文参考和总结自 <a href="http://blog.csdn.net/luanlouis/article/details/50492163" target="_blank" rel="noreferrer">http://blog.csdn.net/luanlouis/article/details/50492163</a>, 对maven的理解看这一篇就够。@pDai</p></blockquote><h2 id="目录结构" tabindex="-1">目录结构 <a class="header-anchor" href="#目录结构" aria-label="Permalink to &quot;目录结构&quot;">​</a></h2><blockquote><p>well,每个项目工程，都有非常繁琐的目录结构，每个目录都有不同的作用。请记住这一点，目录的划分是根据需要来的，每个目录有其特定的功能。目录本质上就是一个文件或文件夹路径而已。那么，我们换一个思路考虑: 一个项目的文件结构需要组织什么信息呢?</p></blockquote><p>让我们来看一下功能的划分:</p><p><img src="'+t+`" alt="error.图片加载失败"></p><h2 id="如何修改默认的目录配置" tabindex="-1">如何修改默认的目录配置 <a class="header-anchor" href="#如何修改默认的目录配置" aria-label="Permalink to &quot;如何修改默认的目录配置&quot;">​</a></h2><p>在maven项目工程对应project的 pom.xml中，在<code>&lt;project&gt;--&gt;&lt;build&gt;</code>节点下，你可以指定自己的目录路径信息:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;build&gt;  </span></span>
<span class="line"><span>    &lt;!-- 目录信息维护,用户可以指定自己的目录路径 --&gt;  </span></span>
<span class="line"><span>    &lt;sourceDirectory&gt;E:\\intellis\\maven-principle\\phase-echo\\src\\main\\java&lt;/sourceDirectory&gt;  </span></span>
<span class="line"><span>    &lt;scriptSourceDirectory&gt;E:\\intellis\\maven-principle\\phase-echo\\src\\main\\scripts&lt;/scriptSourceDirectory&gt;  </span></span>
<span class="line"><span>    &lt;testSourceDirectory&gt;E:\\intellis\\maven-principle\\phase-echo\\src\\test\\java&lt;/testSourceDirectory&gt;  </span></span>
<span class="line"><span>    &lt;outputDirectory&gt;E:\\intellis\\maven-principle\\phase-echo\\target\\classes&lt;/outputDirectory&gt;  </span></span>
<span class="line"><span>    &lt;testOutputDirectory&gt;E:\\intellis\\maven-principle\\phase-echo\\target\\test-classes&lt;/testOutputDirectory&gt;  </span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>    &lt;!-- 注意，对resource而言，可以有很多个resource路径的配置，你只需要指定对应的路径是resource即可 --&gt;  </span></span>
<span class="line"><span>    &lt;resources&gt;  </span></span>
<span class="line"><span>      &lt;resource&gt;  </span></span>
<span class="line"><span>        &lt;directory&gt;E:\\intellis\\maven-principle\\phase-echo\\src\\main\\resources&lt;/directory&gt;  </span></span>
<span class="line"><span>      &lt;/resource&gt;  </span></span>
<span class="line"><span>    &lt;/resources&gt;  </span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>    &lt;!-- 注意，对resource而言，可以有很多个resource路径的配置，你只需要指定对应的路径是resource即可 --&gt;  </span></span>
<span class="line"><span>    &lt;testResources&gt;  </span></span>
<span class="line"><span>      &lt;testResource&gt;  </span></span>
<span class="line"><span>        &lt;directory&gt;E:\\intellis\\maven-principle\\phase-echo\\src\\test\\resources&lt;/directory&gt;  </span></span>
<span class="line"><span>      &lt;/testResource&gt;  </span></span>
<span class="line"><span>    &lt;/testResources&gt;  </span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>    &lt;directory&gt;E:\\intellis\\maven-principle\\phase-echo\\target&lt;/directory&gt;  </span></span>
<span class="line"><span>   </span></span>
<span class="line"><span>&lt;/build&gt;</span></span></code></pre></div><h2 id="依赖原则" tabindex="-1">依赖原则 <a class="header-anchor" href="#依赖原则" aria-label="Permalink to &quot;依赖原则&quot;">​</a></h2><h3 id="依赖路径最短优先原则" tabindex="-1">依赖路径最短优先原则 <a class="header-anchor" href="#依赖路径最短优先原则" aria-label="Permalink to &quot;依赖路径最短优先原则&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>A -&gt; B -&gt; C -&gt; X(1.0)</span></span>
<span class="line"><span>A -&gt; D -&gt; X(2.0)</span></span></code></pre></div><p>由于 X(2.0) 路径最短，所以使用 X(2.0)。</p><h3 id="声明顺序优先原则" tabindex="-1">声明顺序优先原则 <a class="header-anchor" href="#声明顺序优先原则" aria-label="Permalink to &quot;声明顺序优先原则&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>A -&gt; B -&gt; X(1.0)</span></span>
<span class="line"><span>A -&gt; C -&gt; X(2.0)</span></span></code></pre></div><p>在 POM 中最先声明的优先，上面的两个依赖如果先声明 B，那么最后使用 X(1.0)。</p><h3 id="覆写优先原则" tabindex="-1">覆写优先原则 <a class="header-anchor" href="#覆写优先原则" aria-label="Permalink to &quot;覆写优先原则&quot;">​</a></h3><p>子 POM 内声明的依赖优先于父 POM 中声明的依赖。</p><h2 id="解决依赖冲突" tabindex="-1">解决依赖冲突 <a class="header-anchor" href="#解决依赖冲突" aria-label="Permalink to &quot;解决依赖冲突&quot;">​</a></h2><p>找到 Maven 加载的 Jar 包版本，使用 <code>mvn dependency:tree</code> 查看依赖树，根据依赖原则来调整依赖在 POM 文件的声明顺序。</p><h1 id="maven-项目生命周期与构建原理" tabindex="-1">Maven 项目生命周期与构建原理 <a class="header-anchor" href="#maven-项目生命周期与构建原理" aria-label="Permalink to &quot;Maven 项目生命周期与构建原理&quot;">​</a></h1><h2 id="maven对项目生命周期的抽象-三大项目生命周期" tabindex="-1">Maven对项目生命周期的抽象--三大项目生命周期 <a class="header-anchor" href="#maven对项目生命周期的抽象-三大项目生命周期" aria-label="Permalink to &quot;Maven对项目生命周期的抽象--三大项目生命周期&quot;">​</a></h2><blockquote><p>Maven从项目的三个不同的角度，定义了单套生命周期，三套生命周期是相互独立的，它们之间不会相互影响。</p></blockquote><ul><li>默认构建生命周期(Default Lifeclyle): 该生命周期表示这项目的构建过程，定义了一个项目的构建要经过的不同的阶段。</li><li>清理生命周期(Clean Lifecycle): 该生命周期负责清理项目中的多余信息，保持项目资源和代码的整洁性。一般拿来清空directory(即一般的target)目录下的文件。</li><li>站点管理生命周期(Site Lifecycle) :向我们创建一个项目时，我们有时候需要提供一个站点，来介绍这个项目的信息，如项目介绍，项目进度状态、项目组成成员，版本控制信息，项目javadoc索引信息等等。站点管理生命周期定义了站点管理过程的各个阶段。</li></ul><p><img src="`+a+`" alt="error.图片加载失败"></p><h2 id="maven对项目默认生命周期的抽象" tabindex="-1">maven对项目默认生命周期的抽象 <a class="header-anchor" href="#maven对项目默认生命周期的抽象" aria-label="Permalink to &quot;maven对项目默认生命周期的抽象&quot;">​</a></h2><p>Maven将其架构和结构的组织放置到了components.xml 配置文件中，该配置文件的路径是: apache-maven-version\\lib\\maven−core−{version}\\lib\\maven-core-version\\lib\\maven−core−{version}.jar\\META-INFO\\plexus\\conponents.xml文件中。其中，我们可以看到关于default生命周期XML节点配置信息:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;component&gt;  </span></span>
<span class="line"><span>    &lt;role&gt;org.apache.maven.lifecycle.Lifecycle&lt;/role&gt;  </span></span>
<span class="line"><span>    &lt;implementation&gt;org.apache.maven.lifecycle.Lifecycle&lt;/implementation&gt;  </span></span>
<span class="line"><span>    &lt;role-hint&gt;default&lt;/role-hint&gt;  </span></span>
<span class="line"><span>    &lt;configuration&gt;  </span></span>
<span class="line"><span>        &lt;id&gt;default&lt;/id&gt;  </span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>        &lt;phases&gt;  </span></span>
<span class="line"><span>            &lt;phase&gt;validate&lt;/phase&gt;  </span></span>
<span class="line"><span>            &lt;phase&gt;initialize&lt;/phase&gt;  </span></span>
<span class="line"><span>            &lt;phase&gt;generate-sources&lt;/phase&gt;  </span></span>
<span class="line"><span>            &lt;phase&gt;process-sources&lt;/phase&gt;  </span></span>
<span class="line"><span>            &lt;phase&gt;generate-resources&lt;/phase&gt;  </span></span>
<span class="line"><span>            &lt;phase&gt;process-resources&lt;/phase&gt;  </span></span>
<span class="line"><span>            &lt;phase&gt;compile&lt;/phase&gt;  </span></span>
<span class="line"><span>            &lt;phase&gt;process-classes&lt;/phase&gt;  </span></span>
<span class="line"><span>            &lt;phase&gt;generate-test-sources&lt;/phase&gt;  </span></span>
<span class="line"><span>            &lt;phase&gt;process-test-sources&lt;/phase&gt;  </span></span>
<span class="line"><span>            &lt;phase&gt;generate-test-resources&lt;/phase&gt;  </span></span>
<span class="line"><span>            &lt;phase&gt;process-test-resources&lt;/phase&gt;  </span></span>
<span class="line"><span>            &lt;phase&gt;test-compile&lt;/phase&gt;  </span></span>
<span class="line"><span>            &lt;phase&gt;process-test-classes&lt;/phase&gt;  </span></span>
<span class="line"><span>            &lt;phase&gt;test&lt;/phase&gt;  </span></span>
<span class="line"><span>            &lt;phase&gt;prepare-package&lt;/phase&gt;  </span></span>
<span class="line"><span>            &lt;phase&gt;package&lt;/phase&gt;  </span></span>
<span class="line"><span>            &lt;phase&gt;pre-integration-test&lt;/phase&gt;  </span></span>
<span class="line"><span>            &lt;phase&gt;integration-test&lt;/phase&gt;  </span></span>
<span class="line"><span>            &lt;phase&gt;post-integration-test&lt;/phase&gt;  </span></span>
<span class="line"><span>            &lt;phase&gt;verify&lt;/phase&gt;  </span></span>
<span class="line"><span>            &lt;phase&gt;install&lt;/phase&gt;  </span></span>
<span class="line"><span>            &lt;phase&gt;deploy&lt;/phase&gt;  </span></span>
<span class="line"><span>        &lt;/phases&gt;  </span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>    &lt;/configuration&gt;  </span></span>
<span class="line"><span>&lt;/component&gt;</span></span></code></pre></div><p>Maven根据一个项目的生命周期的每个阶段，将一个项目的生命周期抽象成了如上图所示的23个阶段。而每一个阶段应该干什么事情由用户决定。换句话说，maven为每一个阶段设计了接口，你可以为每一阶段自己定义一个接口，进而实现对应阶段应该有的行为。</p><p><img src="`+i+'" alt="error.图片加载失败"></p><p>在经历这些生命周期的阶段中，每个阶段会理论上会有相应的处理操作。但是，在实际的项目开发过程中， 并不是所有的生命周期阶段都是必须的。 基于类似的约定，maven默认地为一些不同类型的maven项目生命周期的阶段实现了默认的行为。</p><p>Maven 在设计上将生命周期阶段的抽象和对应阶段应该执行的行为实现分离开，maven这些实现放到了插件中，这些插件本质上是实现了maven留在各个生命周期阶段的接口。 如下图所示，maven针对不同打包类型的maven项目的生命周期阶段绑定了对应的默认行为:</p><p><img src="'+c+'" alt="error.图片加载失败"></p><h2 id="maven各生命阶段行为绑定" tabindex="-1">Maven各生命阶段行为绑定 <a class="header-anchor" href="#maven各生命阶段行为绑定" aria-label="Permalink to &quot;Maven各生命阶段行为绑定&quot;">​</a></h2><p>maven会根据Mojo功能的划分，将具有相似功能的Mojo放到一个插件中。并且某一个特定的Mojo能实现的功能称为 goal,即目标，表明该Mojo能实现什么目标。</p><p><img src="'+o+'" alt="error.图片加载失败"></p><p>例如，我们项目生命周期有两个阶段: compile 和 test-compile,这两阶段都是需要将Java源代码编译成class文件中，相对应地，compile和test-compiler分别被绑定到了org.apache.maven.plugin.compiler.CompilerMojo 和org.apache.maven.plugin.compiler.TestCompilerMojo上:</p><p><img src="'+r+`" alt="error.图片加载失败"></p><h2 id="如何查看maven各个生命周期阶段和插件的绑定情况" tabindex="-1">如何查看maven各个生命周期阶段和插件的绑定情况 <a class="header-anchor" href="#如何查看maven各个生命周期阶段和插件的绑定情况" aria-label="Permalink to &quot;如何查看maven各个生命周期阶段和插件的绑定情况&quot;">​</a></h2><p>maven默认实现上，会为各个常用的生命周期根据约定绑定特定的插件目标。maven将这些配置放置到了: apache-maven-version\\lib\\maven−core−{version}\\lib\\maven-core-version\\lib\\maven−core−{version}.jar\\META-INFO\\plexus\\default-binds.xml文件中，针对不同打包类型的项目，其默认绑定情况也会不一样，我们先看一下常用的jar包类型和war包类型的项目默认绑定情况:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    &lt;!-- jar包格式的项目生命周期各个阶段默认绑定情况 --&gt;  </span></span>
<span class="line"><span>    &lt;component&gt;  </span></span>
<span class="line"><span>        &lt;role&gt;org.apache.maven.lifecycle.mapping.LifecycleMapping&lt;/role&gt;  </span></span>
<span class="line"><span>        &lt;role-hint&gt;jar&lt;/role-hint&gt;  </span></span>
<span class="line"><span>        &lt;implementation&gt;org.apache.maven.lifecycle.mapping.DefaultLifecycleMapping&lt;/implementation&gt;  </span></span>
<span class="line"><span>        &lt;configuration&gt;  </span></span>
<span class="line"><span>            &lt;lifecycles&gt;  </span></span>
<span class="line"><span>                &lt;lifecycle&gt;  </span></span>
<span class="line"><span>                    &lt;id&gt;default&lt;/id&gt;  </span></span>
<span class="line"><span>                    &lt;!-- START SNIPPET: jar-lifecycle --&gt;  </span></span>
<span class="line"><span>                    &lt;phases&gt;  </span></span>
<span class="line"><span>                        &lt;!-- 插件绑定的格式:   &lt;plugin-groupid&gt;:&lt;plugin-artifactid&gt;:&lt;version&gt;:goal  --&gt;   </span></span>
<span class="line"><span>                        &lt;process-resources&gt;  </span></span>
<span class="line"><span>                    org.apache.maven.plugins:maven-resources-plugin:2.6:resources  </span></span>
<span class="line"><span>                        &lt;/process-resources&gt;  </span></span>
<span class="line"><span>                        &lt;compile&gt;  </span></span>
<span class="line"><span>                    org.apache.maven.plugins:maven-compiler-plugin:3.1:compile  </span></span>
<span class="line"><span>                        &lt;/compile&gt;  </span></span>
<span class="line"><span>                        &lt;process-test-resources&gt;  </span></span>
<span class="line"><span>                    org.apache.maven.plugins:maven-resources-plugin:2.6:testResources  </span></span>
<span class="line"><span>                        &lt;/process-test-resources&gt;  </span></span>
<span class="line"><span>                        &lt;test-compile&gt;  </span></span>
<span class="line"><span>                    org.apache.maven.plugins:maven-compiler-plugin:3.1:testCompile  </span></span>
<span class="line"><span>                        &lt;/test-compile&gt;  </span></span>
<span class="line"><span>                        &lt;test&gt;  </span></span>
<span class="line"><span>                    org.apache.maven.plugins:maven-surefire-plugin:2.12.4:test  </span></span>
<span class="line"><span>                        &lt;/test&gt;  </span></span>
<span class="line"><span>                        &lt;package&gt;  </span></span>
<span class="line"><span>                    org.apache.maven.plugins:maven-jar-plugin:2.4:jar  </span></span>
<span class="line"><span>                        &lt;/package&gt;  </span></span>
<span class="line"><span>                        &lt;install&gt;  </span></span>
<span class="line"><span>                    org.apache.maven.plugins:maven-install-plugin:2.4:install  </span></span>
<span class="line"><span>                        &lt;/install&gt;  </span></span>
<span class="line"><span>                        &lt;deploy&gt;  </span></span>
<span class="line"><span>                    org.apache.maven.plugins:maven-deploy-plugin:2.7:deploy  </span></span>
<span class="line"><span>                        &lt;/deploy&gt;  </span></span>
<span class="line"><span>                    &lt;/phases&gt;  </span></span>
<span class="line"><span>                    &lt;!-- END SNIPPET: jar-lifecycle --&gt;  </span></span>
<span class="line"><span>                &lt;/lifecycle&gt;  </span></span>
<span class="line"><span>            &lt;/lifecycles&gt;  </span></span>
<span class="line"><span>        &lt;/configuration&gt;  </span></span>
<span class="line"><span>    &lt;/component&gt;  </span></span>
<span class="line"><span>      </span></span>
<span class="line"><span>    &lt;!-- war包格式的项目生命周期各个阶段默认绑定情况 --&gt;  </span></span>
<span class="line"><span>    &lt;component&gt;  </span></span>
<span class="line"><span>        &lt;role&gt;org.apache.maven.lifecycle.mapping.LifecycleMapping&lt;/role&gt;  </span></span>
<span class="line"><span>        &lt;role-hint&gt;war&lt;/role-hint&gt;  </span></span>
<span class="line"><span>        &lt;implementation&gt;org.apache.maven.lifecycle.mapping.DefaultLifecycleMapping&lt;/implementation&gt;  </span></span>
<span class="line"><span>        &lt;configuration&gt;  </span></span>
<span class="line"><span>            &lt;lifecycles&gt;  </span></span>
<span class="line"><span>                &lt;lifecycle&gt;  </span></span>
<span class="line"><span>                    &lt;id&gt;default&lt;/id&gt;  </span></span>
<span class="line"><span>                    &lt;!-- START SNIPPET: war-lifecycle --&gt;  </span></span>
<span class="line"><span>                    &lt;phases&gt;  </span></span>
<span class="line"><span>                        &lt;process-resources&gt;  </span></span>
<span class="line"><span>                    org.apache.maven.plugins:maven-resources-plugin:2.6:resources  </span></span>
<span class="line"><span>                        &lt;/process-resources&gt;  </span></span>
<span class="line"><span>                        &lt;compile&gt;  </span></span>
<span class="line"><span>                    org.apache.maven.plugins:maven-compiler-plugin:3.1:compile  </span></span>
<span class="line"><span>                        &lt;/compile&gt;  </span></span>
<span class="line"><span>                        &lt;process-test-resources&gt;  </span></span>
<span class="line"><span>                    org.apache.maven.plugins:maven-resources-plugin:2.6:testResources  </span></span>
<span class="line"><span>                        &lt;/process-test-resources&gt;  </span></span>
<span class="line"><span>                        &lt;test-compile&gt;  </span></span>
<span class="line"><span>                    org.apache.maven.plugins:maven-compiler-plugin:3.1:testCompile  </span></span>
<span class="line"><span>                        &lt;/test-compile&gt;  </span></span>
<span class="line"><span>                        &lt;test&gt;  </span></span>
<span class="line"><span>                    org.apache.maven.plugins:maven-surefire-plugin:2.12.4:test  </span></span>
<span class="line"><span>                        &lt;/test&gt;  </span></span>
<span class="line"><span>                        &lt;package&gt;  </span></span>
<span class="line"><span>                    org.apache.maven.plugins:maven-war-plugin:2.2:war  </span></span>
<span class="line"><span>                        &lt;/package&gt;  </span></span>
<span class="line"><span>                        &lt;install&gt;  </span></span>
<span class="line"><span>                    org.apache.maven.plugins:maven-install-plugin:2.4:install  </span></span>
<span class="line"><span>                        &lt;/install&gt;  </span></span>
<span class="line"><span>                        &lt;deploy&gt;  </span></span>
<span class="line"><span>                    org.apache.maven.plugins:maven-deploy-plugin:2.7:deploy  </span></span>
<span class="line"><span>                        &lt;/deploy&gt;  </span></span>
<span class="line"><span>                    &lt;/phases&gt;  </span></span>
<span class="line"><span>                    &lt;!-- END SNIPPET: war-lifecycle --&gt;  </span></span>
<span class="line"><span>                &lt;/lifecycle&gt;  </span></span>
<span class="line"><span>            &lt;/lifecycles&gt;  </span></span>
<span class="line"><span>        &lt;/configuration&gt;  </span></span>
<span class="line"><span>    &lt;/component&gt;</span></span></code></pre></div><h2 id="项目中run-package命令" tabindex="-1">项目中Run Package命令 <a class="header-anchor" href="#项目中run-package命令" aria-label="Permalink to &quot;项目中Run Package命令&quot;">​</a></h2><p>加入Jacoo测试统计的插件, pre-test和post-test两个阶段:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>	&lt;build&gt;</span></span>
<span class="line"><span>		&lt;plugins&gt;</span></span>
<span class="line"><span>			&lt;plugin&gt;</span></span>
<span class="line"><span>				&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span>
<span class="line"><span>				&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span></span>
<span class="line"><span>			&lt;/plugin&gt;</span></span>
<span class="line"><span>			&lt;plugin&gt;</span></span>
<span class="line"><span>				&lt;groupId&gt;org.jacoco&lt;/groupId&gt;</span></span>
<span class="line"><span>				&lt;artifactId&gt;jacoco-maven-plugin&lt;/artifactId&gt;</span></span>
<span class="line"><span>				&lt;version&gt;\${jacoco.version}&lt;/version&gt;</span></span>
<span class="line"><span>				&lt;executions&gt;</span></span>
<span class="line"><span>					&lt;execution&gt;</span></span>
<span class="line"><span>						&lt;id&gt;pre-test&lt;/id&gt;</span></span>
<span class="line"><span>						&lt;goals&gt;</span></span>
<span class="line"><span>							&lt;goal&gt;prepare-agent&lt;/goal&gt;</span></span>
<span class="line"><span>						&lt;/goals&gt;</span></span>
<span class="line"><span>					&lt;/execution&gt;</span></span>
<span class="line"><span>					&lt;execution&gt;</span></span>
<span class="line"><span>						&lt;id&gt;post-test&lt;/id&gt;</span></span>
<span class="line"><span>						&lt;phase&gt;test&lt;/phase&gt;</span></span>
<span class="line"><span>						&lt;goals&gt;</span></span>
<span class="line"><span>							&lt;goal&gt;report&lt;/goal&gt;</span></span>
<span class="line"><span>						&lt;/goals&gt;</span></span>
<span class="line"><span>					&lt;/execution&gt;</span></span>
<span class="line"><span>				&lt;/executions&gt;</span></span>
<span class="line"><span>			&lt;/plugin&gt;</span></span>
<span class="line"><span>		&lt;/plugins&gt;</span></span>
<span class="line"><span>		&lt;defaultGoal&gt;compile&lt;/defaultGoal&gt;</span></span>
<span class="line"><span>	&lt;/build&gt;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[INFO] Scanning for projects...</span></span>
<span class="line"><span>[INFO]                                                                         </span></span>
<span class="line"><span>[INFO] ------------------------------------------------------------------------</span></span>
<span class="line"><span>[INFO] Building cdc-common-config 1.0.1-RELEASE</span></span>
<span class="line"><span>[INFO] ------------------------------------------------------------------------</span></span>
<span class="line"><span>[INFO] </span></span>
<span class="line"><span>[INFO] --- jacoco-maven-plugin:0.7.7.201606060606:prepare-agent (pre-test) @ cdc-common-config ---</span></span>
<span class="line"><span>[INFO] argLine set to -javaagent:C:\\\\Users\\\\pdai\\\\.m2\\\\repository\\\\org\\\\jacoco\\\\org.jacoco.agent\\\\0.7.7.201606060606\\\\org.jacoco.agent-0.7.7.201606060606-runtime.jar=destfile=D:\\\\git_cdc2\\\\cdc-backend-services\\\\cdc-common-config\\\\target\\\\jacoco.exec</span></span>
<span class="line"><span>[INFO] </span></span>
<span class="line"><span>[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ cdc-common-config ---</span></span>
<span class="line"><span>[INFO] Using &#39;UTF-8&#39; encoding to copy filtered resources.</span></span>
<span class="line"><span>[INFO] Copying 1 resource</span></span>
<span class="line"><span>[INFO] Copying 5 resources</span></span>
<span class="line"><span>[INFO] </span></span>
<span class="line"><span>[INFO] --- maven-compiler-plugin:3.5.1:compile (default-compile) @ cdc-common-config ---</span></span>
<span class="line"><span>[INFO] Nothing to compile - all classes are up to date</span></span>
<span class="line"><span>[INFO] </span></span>
<span class="line"><span>[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ cdc-common-config ---</span></span>
<span class="line"><span>[INFO] Using &#39;UTF-8&#39; encoding to copy filtered resources.</span></span>
<span class="line"><span>[INFO] skip non existing resourceDirectory D:\\git_cdc2\\cdc-backend-services\\cdc-common-config\\src\\test\\resources</span></span>
<span class="line"><span>[INFO] </span></span>
<span class="line"><span>[INFO] --- maven-compiler-plugin:3.5.1:testCompile (default-testCompile) @ cdc-common-config ---</span></span>
<span class="line"><span>[INFO] Nothing to compile - all classes are up to date</span></span>
<span class="line"><span>[INFO] </span></span>
<span class="line"><span>[INFO] --- maven-surefire-plugin:2.19.1:test (default-test) @ cdc-common-config ---</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>Results :</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Tests run: 1, Failures: 0, Errors: 0, Skipped: 0</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[INFO] </span></span>
<span class="line"><span>[INFO] --- jacoco-maven-plugin:0.7.7.201606060606:report (post-test) @ cdc-common-config ---</span></span>
<span class="line"><span>[INFO] Loading execution data file D:\\git_cdc2\\cdc-backend-services\\cdc-common-config\\target\\jacoco.exec</span></span>
<span class="line"><span>[INFO] Analyzed bundle &#39;cdc-common-config&#39; with 1 classes</span></span>
<span class="line"><span>[INFO] </span></span>
<span class="line"><span>[INFO] --- maven-jar-plugin:2.6:jar (default-jar) @ cdc-common-config ---</span></span>
<span class="line"><span>[INFO] Building jar: D:\\git_cdc2\\cdc-backend-services\\cdc-common-config\\target\\cdc-common-config-1.0.1-RELEASE.jar</span></span>
<span class="line"><span>[INFO] </span></span>
<span class="line"><span>[INFO] --- spring-boot-maven-plugin:1.4.1.RELEASE:repackage (default) @ cdc-common-config ---</span></span>
<span class="line"><span>[INFO] ------------------------------------------------------------------------</span></span>
<span class="line"><span>[INFO] BUILD SUCCESS</span></span>
<span class="line"><span>[INFO] ------------------------------------------------------------------------</span></span>
<span class="line"><span>[INFO] Total time: 10.372 s</span></span>
<span class="line"><span>[INFO] Finished at: 2017-03-02T15:43:05+08:00</span></span>
<span class="line"><span>[INFO] Final Memory: 34M/497M</span></span>
<span class="line"><span>[INFO] ------------------------------------------------------------------------</span></span></code></pre></div><h1 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h1><ul><li><a href="http://maven.apache.org/pom.html#Dependency_Version_Requirement_Specification" target="_blank" rel="noreferrer">POM Reference在新窗口打开</a></li></ul><p>本文转自 <a href="https://pdai.tech" target="_blank" rel="noreferrer">https://pdai.tech</a>，如有侵权，请联系删除。</p>`,48)]))}const I=n(g,[["render",m]]);export{k as __pageData,I as default};
